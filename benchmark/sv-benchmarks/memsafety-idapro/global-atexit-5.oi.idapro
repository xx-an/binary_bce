.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : 51E9FC7A682BF0837600163A641B463E7DD366F6142FC1E9FC25C673844FCD61
.text:08000000 ; Input MD5    : 23252F793A7EE5F5070D309D8AB3EFA6
.text:08000000 ; Input CRC32  : E91B235A
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/global-atexit-5.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : 'global-atexit-5.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: bp-based frame
.text:08000000
.text:08000000                 public free_g1
.text:08000000 free_g1         proc near               ; DATA XREF: main+30↓o
.text:08000000                                         ; .eh_frame:08000194↓o
.text:08000000
.text:08000000 var_4           = dword ptr -4
.text:08000000
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_bx
.text:0800000C                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000012                 mov     eax, ds:(g - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000018                 sub     esp, 0Ch
.text:0800001B                 push    eax             ; ptr
.text:0800001C                 call    free            ; PIC mode
.text:08000021                 add     esp, 10h
.text:08000024                 mov     ds:(g - _GLOBAL_OFFSET_TABLE_)[ebx], 0
.text:0800002E                 nop
.text:0800002F                 mov     ebx, [ebp+var_4]
.text:08000032                 leave
.text:08000033                 retn
.text:08000033 ; } // starts at 8000000
.text:08000033 free_g1         endp
.text:08000033
.text:08000034
.text:08000034 ; =============== S U B R O U T I N E =======================================
.text:08000034
.text:08000034 ; Attributes: bp-based frame
.text:08000034
.text:08000034                 public free_g2
.text:08000034 free_g2         proc near               ; DATA XREF: f+28↓o
.text:08000034                                         ; .eh_frame:080001B8↓o
.text:08000034
.text:08000034 var_4           = dword ptr -4
.text:08000034
.text:08000034 ; __unwind {
.text:08000034                 push    ebp
.text:08000035                 mov     ebp, esp
.text:08000037                 push    ebx
.text:08000038                 sub     esp, 4
.text:0800003B                 call    __x86_get_pc_thunk_ax
.text:08000040                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000045                 mov     edx, ds:(g - _GLOBAL_OFFSET_TABLE_)[eax]
.text:0800004B                 test    edx, edx
.text:0800004D                 jz      short loc_8000065
.text:0800004F                 mov     edx, ds:(g - _GLOBAL_OFFSET_TABLE_)[eax]
.text:08000055                 mov     edx, [edx]
.text:08000057                 sub     esp, 0Ch
.text:0800005A                 push    edx             ; ptr
.text:0800005B                 mov     ebx, eax
.text:0800005D                 call    free            ; PIC mode
.text:08000062                 add     esp, 10h
.text:08000065
.text:08000065 loc_8000065:                            ; CODE XREF: free_g2+19↑j
.text:08000065                 nop
.text:08000066                 mov     ebx, [ebp+var_4]
.text:08000069                 leave
.text:0800006A                 retn
.text:0800006A ; } // starts at 8000034
.text:0800006A free_g2         endp
.text:0800006A
.text:0800006B
.text:0800006B ; =============== S U B R O U T I N E =======================================
.text:0800006B
.text:0800006B ; Attributes: bp-based frame
.text:0800006B
.text:0800006B                 public h
.text:0800006B h               proc near               ; CODE XREF: f+37↓p
.text:0800006B                                         ; DATA XREF: .eh_frame:080001DC↓o
.text:0800006B
.text:0800006B var_4           = dword ptr -4
.text:0800006B
.text:0800006B ; __unwind {
.text:0800006B                 push    ebp
.text:0800006C                 mov     ebp, esp
.text:0800006E                 push    ebx
.text:0800006F                 sub     esp, 4
.text:08000072                 call    __x86_get_pc_thunk_bx
.text:08000077                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800007D                 call    __VERIFIER_nondet_bool ; PIC mode
.text:08000082                 test    al, al
.text:08000084                 jz      short loc_8000090
.text:08000086                 sub     esp, 0Ch
.text:08000089                 push    1               ; status
.text:0800008B                 call    exit            ; PIC mode
.text:08000090 ; ---------------------------------------------------------------------------
.text:08000090
.text:08000090 loc_8000090:                            ; CODE XREF: h+19↑j
.text:08000090                 nop
.text:08000091                 mov     ebx, [ebp+var_4]
.text:08000094                 leave
.text:08000095                 retn
.text:08000095 ; } // starts at 800006B
.text:08000095 h               endp
.text:08000095
.text:08000096
.text:08000096 ; =============== S U B R O U T I N E =======================================
.text:08000096
.text:08000096 ; Attributes: bp-based frame
.text:08000096
.text:08000096                 public f
.text:08000096 f               proc near               ; CODE XREF: main:loc_800012C↓p
.text:08000096                                         ; DATA XREF: .eh_frame:08000200↓o
.text:08000096 ; __unwind {
.text:08000096                 push    ebp
.text:08000097                 mov     ebp, esp
.text:08000099                 push    esi
.text:0800009A                 push    ebx
.text:0800009B                 call    __x86_get_pc_thunk_bx
.text:080000A0                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000A6                 mov     esi, ds:(g - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000AC                 sub     esp, 0Ch
.text:080000AF                 push    4               ; size
.text:080000B1                 call    malloc          ; PIC mode
.text:080000B6                 add     esp, 10h
.text:080000B9                 mov     [esi], eax
.text:080000BB                 sub     esp, 0Ch
.text:080000BE                 lea     eax, (free_g2 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000C4                 push    eax             ; func
.text:080000C5                 call    atexit          ; PIC mode
.text:080000CA                 add     esp, 10h
.text:080000CD                 call    h
.text:080000D2                 nop
.text:080000D3                 lea     esp, [ebp-8]
.text:080000D6                 pop     ebx
.text:080000D7                 pop     esi
.text:080000D8                 pop     ebp
.text:080000D9                 retn
.text:080000D9 ; } // starts at 8000096
.text:080000D9 f               endp
.text:080000D9
.text:080000DA
.text:080000DA ; =============== S U B R O U T I N E =======================================
.text:080000DA
.text:080000DA ; Attributes: bp-based frame fuzzy-sp
.text:080000DA
.text:080000DA ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:080000DA                 public main
.text:080000DA main            proc near               ; DATA XREF: .eh_frame:08000228↓o
.text:080000DA
.text:080000DA argc            = dword ptr  8
.text:080000DA argv            = dword ptr  0Ch
.text:080000DA envp            = dword ptr  10h
.text:080000DA
.text:080000DA ; __unwind {
.text:080000DA                 lea     ecx, [esp+4]
.text:080000DE                 and     esp, 0FFFFFFF0h
.text:080000E1                 push    dword ptr [ecx-4]
.text:080000E4                 push    ebp
.text:080000E5                 mov     ebp, esp
.text:080000E7                 push    ebx
.text:080000E8                 push    ecx
.text:080000E9                 call    __x86_get_pc_thunk_bx
.text:080000EE                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000F4                 sub     esp, 0Ch
.text:080000F7                 push    4               ; size
.text:080000F9                 call    malloc          ; PIC mode
.text:080000FE                 add     esp, 10h
.text:08000101                 mov     ds:(g - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:08000107                 sub     esp, 0Ch
.text:0800010A                 lea     eax, (free_g1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000110                 push    eax             ; func
.text:08000111                 call    atexit          ; PIC mode
.text:08000116                 add     esp, 10h
.text:08000119                 call    __VERIFIER_nondet_bool ; PIC mode
.text:0800011E                 test    al, al
.text:08000120                 jz      short loc_800012C
.text:08000122                 sub     esp, 0Ch
.text:08000125                 push    1               ; status
.text:08000127                 call    exit            ; PIC mode
.text:0800012C ; ---------------------------------------------------------------------------
.text:0800012C
.text:0800012C loc_800012C:                            ; CODE XREF: main+46↑j
.text:0800012C                 call    f
.text:08000131                 mov     eax, ds:(g - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000137                 mov     eax, [eax]
.text:08000139                 sub     esp, 0Ch
.text:0800013C                 push    eax             ; ptr
.text:0800013D                 call    free            ; PIC mode
.text:08000142                 add     esp, 10h
.text:08000145                 mov     eax, ds:(g - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800014B                 sub     esp, 0Ch
.text:0800014E                 push    eax             ; ptr
.text:0800014F                 call    free            ; PIC mode
.text:08000154                 add     esp, 10h
.text:08000157                 mov     eax, 0
.text:0800015C                 lea     esp, [ebp-8]
.text:0800015F                 pop     ecx
.text:08000160                 pop     ebx
.text:08000161                 pop     ebp
.text:08000162                 lea     esp, [ecx-4]
.text:08000165                 retn
.text:08000165 ; } // starts at 80000DA
.text:08000165 main            endp
.text:08000165
.text:08000165 _text           ends
.text:08000165
.data:08000166 ; ===========================================================================
.data:08000166
.data:08000166 ; Segment type: Zero-length
.data:08000166 ; Segment permissions: Read/Write
.data:08000166 _data           segment byte public 'DATA' use32
.data:08000166 _data           ends
.data:08000166
.bss:08000168 ; ===========================================================================
.bss:08000168
.bss:08000168 ; Segment type: Uninitialized
.bss:08000168 ; Segment permissions: Read/Write
.bss:08000168 _bss            segment dword public 'BSS' use32
.bss:08000168                 assume cs:_bss
.bss:08000168                 ;org 8000168h
.bss:08000168                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.bss:08000168                 public g
.bss:08000168 g               dd ?                    ; DATA XREF: free_g1+12↑r
.bss:08000168                                         ; free_g1+24↑w ...
.bss:08000168 _bss            ends
.bss:08000168
.text.__x86.get_pc_thunk.ax:0800016C ; ===========================================================================
.text.__x86.get_pc_thunk.ax:0800016C
.text.__x86.get_pc_thunk.ax:0800016C ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:0800016C ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:0800016C _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:0800016C                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:0800016C                 ;org 800016Ch
.text.__x86.get_pc_thunk.ax:0800016C                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:0800016C
.text.__x86.get_pc_thunk.ax:0800016C ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:0800016C
.text.__x86.get_pc_thunk.ax:0800016C
.text.__x86.get_pc_thunk.ax:0800016C                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:0800016C __x86_get_pc_thunk_ax proc near         ; CODE XREF: free_g2+7↑p
.text.__x86.get_pc_thunk.ax:0800016C                                         ; DATA XREF: .eh_frame:0800025C↓o
.text.__x86.get_pc_thunk.ax:0800016C ; __unwind {
.text.__x86.get_pc_thunk.ax:0800016C                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:0800016F                 retn
.text.__x86.get_pc_thunk.ax:0800016F ; } // starts at 800016C
.text.__x86.get_pc_thunk.ax:0800016F __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:0800016F
.text.__x86.get_pc_thunk.ax:0800016F _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:0800016F
.text.__x86.get_pc_thunk.bx:08000170 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:08000170
.text.__x86.get_pc_thunk.bx:08000170 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:08000170 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:08000170 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:08000170                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000170                 ;org 8000170h
.text.__x86.get_pc_thunk.bx:08000170                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:08000170
.text.__x86.get_pc_thunk.bx:08000170 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:08000170
.text.__x86.get_pc_thunk.bx:08000170
.text.__x86.get_pc_thunk.bx:08000170                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000170 __x86_get_pc_thunk_bx proc near         ; CODE XREF: free_g1+7↑p
.text.__x86.get_pc_thunk.bx:08000170                                         ; h+7↑p ...
.text.__x86.get_pc_thunk.bx:08000170 ; __unwind {
.text.__x86.get_pc_thunk.bx:08000170                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:08000173                 retn
.text.__x86.get_pc_thunk.bx:08000173 ; } // starts at 8000170
.text.__x86.get_pc_thunk.bx:08000173 __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:08000173
.text.__x86.get_pc_thunk.bx:08000173 _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:08000173
.eh_frame:08000174 ; ===========================================================================
.eh_frame:08000174
.eh_frame:08000174 ; Segment type: Pure data
.eh_frame:08000174 ; Segment permissions: Read
.eh_frame:08000174 _eh_frame       segment dword public 'CONST' use32
.eh_frame:08000174                 assume cs:_eh_frame
.eh_frame:08000174                 ;org 8000174h
.eh_frame:08000174                 db  14h
.eh_frame:08000175                 db    0
.eh_frame:08000176                 db    0
.eh_frame:08000177                 db    0
.eh_frame:08000178                 db    0
.eh_frame:08000179                 db    0
.eh_frame:0800017A                 db    0
.eh_frame:0800017B                 db    0
.eh_frame:0800017C                 db    1
.eh_frame:0800017D                 db  7Ah ; z
.eh_frame:0800017E                 db  52h ; R
.eh_frame:0800017F                 db    0
.eh_frame:08000180                 db    1
.eh_frame:08000181                 db  7Ch ; |
.eh_frame:08000182                 db    8
.eh_frame:08000183                 db    1
.eh_frame:08000184                 db  1Bh
.eh_frame:08000185                 db  0Ch
.eh_frame:08000186                 db    4
.eh_frame:08000187                 db    4
.eh_frame:08000188                 db  88h
.eh_frame:08000189                 db    1
.eh_frame:0800018A                 db    0
.eh_frame:0800018B                 db    0
.eh_frame:0800018C                 db  20h
.eh_frame:0800018D                 db    0
.eh_frame:0800018E                 db    0
.eh_frame:0800018F                 db    0
.eh_frame:08000190                 db  1Ch
.eh_frame:08000191                 db    0
.eh_frame:08000192                 db    0
.eh_frame:08000193                 db    0
.eh_frame:08000194                 dd offset free_g1 - $
.eh_frame:08000198                 db  34h ; 4
.eh_frame:08000199                 db    0
.eh_frame:0800019A                 db    0
.eh_frame:0800019B                 db    0
.eh_frame:0800019C                 db    0
.eh_frame:0800019D                 db  41h ; A
.eh_frame:0800019E                 db  0Eh
.eh_frame:0800019F                 db    8
.eh_frame:080001A0                 db  85h
.eh_frame:080001A1                 db    2
.eh_frame:080001A2                 db  42h ; B
.eh_frame:080001A3                 db  0Dh
.eh_frame:080001A4                 db    5
.eh_frame:080001A5                 db  44h ; D
.eh_frame:080001A6                 db  83h
.eh_frame:080001A7                 db    3
.eh_frame:080001A8                 db  6Ch ; l
.eh_frame:080001A9                 db 0C5h
.eh_frame:080001AA                 db 0C3h
.eh_frame:080001AB                 db  0Ch
.eh_frame:080001AC                 db    4
.eh_frame:080001AD                 db    4
.eh_frame:080001AE                 db    0
.eh_frame:080001AF                 db    0
.eh_frame:080001B0                 db  20h
.eh_frame:080001B1                 db    0
.eh_frame:080001B2                 db    0
.eh_frame:080001B3                 db    0
.eh_frame:080001B4                 db  40h ; @
.eh_frame:080001B5                 db    0
.eh_frame:080001B6                 db    0
.eh_frame:080001B7                 db    0
.eh_frame:080001B8                 dd offset free_g2 - $
.eh_frame:080001BC                 db  37h ; 7
.eh_frame:080001BD                 db    0
.eh_frame:080001BE                 db    0
.eh_frame:080001BF                 db    0
.eh_frame:080001C0                 db    0
.eh_frame:080001C1                 db  41h ; A
.eh_frame:080001C2                 db  0Eh
.eh_frame:080001C3                 db    8
.eh_frame:080001C4                 db  85h
.eh_frame:080001C5                 db    2
.eh_frame:080001C6                 db  42h ; B
.eh_frame:080001C7                 db  0Dh
.eh_frame:080001C8                 db    5
.eh_frame:080001C9                 db  44h ; D
.eh_frame:080001CA                 db  83h
.eh_frame:080001CB                 db    3
.eh_frame:080001CC                 db  6Fh ; o
.eh_frame:080001CD                 db 0C5h
.eh_frame:080001CE                 db 0C3h
.eh_frame:080001CF                 db  0Ch
.eh_frame:080001D0                 db    4
.eh_frame:080001D1                 db    4
.eh_frame:080001D2                 db    0
.eh_frame:080001D3                 db    0
.eh_frame:080001D4                 db  20h
.eh_frame:080001D5                 db    0
.eh_frame:080001D6                 db    0
.eh_frame:080001D7                 db    0
.eh_frame:080001D8                 db  64h ; d
.eh_frame:080001D9                 db    0
.eh_frame:080001DA                 db    0
.eh_frame:080001DB                 db    0
.eh_frame:080001DC                 dd offset h - $
.eh_frame:080001E0                 db  2Bh ; +
.eh_frame:080001E1                 db    0
.eh_frame:080001E2                 db    0
.eh_frame:080001E3                 db    0
.eh_frame:080001E4                 db    0
.eh_frame:080001E5                 db  41h ; A
.eh_frame:080001E6                 db  0Eh
.eh_frame:080001E7                 db    8
.eh_frame:080001E8                 db  85h
.eh_frame:080001E9                 db    2
.eh_frame:080001EA                 db  42h ; B
.eh_frame:080001EB                 db  0Dh
.eh_frame:080001EC                 db    5
.eh_frame:080001ED                 db  44h ; D
.eh_frame:080001EE                 db  83h
.eh_frame:080001EF                 db    3
.eh_frame:080001F0                 db  63h ; c
.eh_frame:080001F1                 db 0C5h
.eh_frame:080001F2                 db 0C3h
.eh_frame:080001F3                 db  0Ch
.eh_frame:080001F4                 db    4
.eh_frame:080001F5                 db    4
.eh_frame:080001F6                 db    0
.eh_frame:080001F7                 db    0
.eh_frame:080001F8                 db  24h ; $
.eh_frame:080001F9                 db    0
.eh_frame:080001FA                 db    0
.eh_frame:080001FB                 db    0
.eh_frame:080001FC                 db  88h
.eh_frame:080001FD                 db    0
.eh_frame:080001FE                 db    0
.eh_frame:080001FF                 db    0
.eh_frame:08000200                 dd offset f - $
.eh_frame:08000204                 db  44h ; D
.eh_frame:08000205                 db    0
.eh_frame:08000206                 db    0
.eh_frame:08000207                 db    0
.eh_frame:08000208                 db    0
.eh_frame:08000209                 db  41h ; A
.eh_frame:0800020A                 db  0Eh
.eh_frame:0800020B                 db    8
.eh_frame:0800020C                 db  85h
.eh_frame:0800020D                 db    2
.eh_frame:0800020E                 db  42h ; B
.eh_frame:0800020F                 db  0Dh
.eh_frame:08000210                 db    5
.eh_frame:08000211                 db  42h ; B
.eh_frame:08000212                 db  86h
.eh_frame:08000213                 db    3
.eh_frame:08000214                 db  83h
.eh_frame:08000215                 db    4
.eh_frame:08000216                 db  7Ch ; |
.eh_frame:08000217                 db 0C3h
.eh_frame:08000218                 db  41h ; A
.eh_frame:08000219                 db 0C6h
.eh_frame:0800021A                 db  41h ; A
.eh_frame:0800021B                 db 0C5h
.eh_frame:0800021C                 db  0Ch
.eh_frame:0800021D                 db    4
.eh_frame:0800021E                 db    4
.eh_frame:0800021F                 db    0
.eh_frame:08000220                 db  30h ; 0
.eh_frame:08000221                 db    0
.eh_frame:08000222                 db    0
.eh_frame:08000223                 db    0
.eh_frame:08000224                 db 0B0h
.eh_frame:08000225                 db    0
.eh_frame:08000226                 db    0
.eh_frame:08000227                 db    0
.eh_frame:08000228                 dd offset main - $
.eh_frame:0800022C                 db  8Ch
.eh_frame:0800022D                 db    0
.eh_frame:0800022E                 db    0
.eh_frame:0800022F                 db    0
.eh_frame:08000230                 db    0
.eh_frame:08000231                 db  44h ; D
.eh_frame:08000232                 db  0Ch
.eh_frame:08000233                 db    1
.eh_frame:08000234                 db    0
.eh_frame:08000235                 db  49h ; I
.eh_frame:08000236                 db  10h
.eh_frame:08000237                 db    5
.eh_frame:08000238                 db    2
.eh_frame:08000239                 db  75h ; u
.eh_frame:0800023A                 db    0
.eh_frame:0800023B                 db  42h ; B
.eh_frame:0800023C                 db  0Fh
.eh_frame:0800023D                 db    3
.eh_frame:0800023E                 db  75h ; u
.eh_frame:0800023F                 db  78h ; x
.eh_frame:08000240                 db    6
.eh_frame:08000241                 db  10h
.eh_frame:08000242                 db    3
.eh_frame:08000243                 db    2
.eh_frame:08000244                 db  75h ; u
.eh_frame:08000245                 db  7Ch ; |
.eh_frame:08000246                 db    2
.eh_frame:08000247                 db  77h ; w
.eh_frame:08000248                 db 0C1h
.eh_frame:08000249                 db  0Ch
.eh_frame:0800024A                 db    1
.eh_frame:0800024B                 db    0
.eh_frame:0800024C                 db  41h ; A
.eh_frame:0800024D                 db 0C3h
.eh_frame:0800024E                 db  41h ; A
.eh_frame:0800024F                 db 0C5h
.eh_frame:08000250                 db  43h ; C
.eh_frame:08000251                 db  0Ch
.eh_frame:08000252                 db    4
.eh_frame:08000253                 db    4
.eh_frame:08000254                 db  10h
.eh_frame:08000255                 db    0
.eh_frame:08000256                 db    0
.eh_frame:08000257                 db    0
.eh_frame:08000258                 db 0E4h
.eh_frame:08000259                 db    0
.eh_frame:0800025A                 db    0
.eh_frame:0800025B                 db    0
.eh_frame:0800025C                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:08000260                 db    4
.eh_frame:08000261                 db    0
.eh_frame:08000262                 db    0
.eh_frame:08000263                 db    0
.eh_frame:08000264                 db    0
.eh_frame:08000265                 db    0
.eh_frame:08000266                 db    0
.eh_frame:08000267                 db    0
.eh_frame:08000268                 db  10h
.eh_frame:08000269                 db    0
.eh_frame:0800026A                 db    0
.eh_frame:0800026B                 db    0
.eh_frame:0800026C                 db 0F8h
.eh_frame:0800026D                 db    0
.eh_frame:0800026E                 db    0
.eh_frame:0800026F                 db    0
.eh_frame:08000270                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:08000274                 db    4
.eh_frame:08000275                 db    0
.eh_frame:08000276                 db    0
.eh_frame:08000277                 db    0
.eh_frame:08000278                 db    0
.eh_frame:08000279                 db    0
.eh_frame:0800027A                 db    0
.eh_frame:0800027B                 db    0
.eh_frame:0800027B _eh_frame       ends
.eh_frame:0800027B
extern:0800027C ; ===========================================================================
extern:0800027C
extern:0800027C ; Segment type: Externs
extern:0800027C ; extern
extern:0800027C ; void free(void *ptr)
extern:0800027C                 extrn free:near         ; CODE XREF: free_g1+1C↑p
extern:0800027C                                         ; free_g2+29↑p ...
extern:08000280                 extrn __VERIFIER_nondet_bool:near
extern:08000280                                         ; CODE XREF: h+12↑p
extern:08000280                                         ; main+3F↑p
extern:08000284 ; void exit(int status)
extern:08000284                 extrn exit:near         ; CODE XREF: h+20↑p
extern:08000284                                         ; main+4D↑p
extern:08000288 ; void *malloc(size_t size)
extern:08000288                 extrn malloc:near       ; CODE XREF: f+1B↑p
extern:08000288                                         ; main+1F↑p
extern:0800028C ; int atexit(void (*func)(void))
extern:0800028C                 extrn atexit:near       ; CODE XREF: f+2F↑p
extern:0800028C                                         ; main+37↑p
extern:0800028C
.got:08000290 ; ===========================================================================
.got:08000290
.got:08000290 ; Segment type: Pure data
.got:08000290 ; Segment permissions: Read
.got:08000290 _got            segment dword public 'CONST' use32
.got:08000290                 assume cs:_got
.got:08000290                 ;org 8000290h
.got:08000290 _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: free_g1+C↑o
.got:08000290                                         ; free_g1+12↑o ...
.got:08000290 _got            ends
.got:08000290
.got:08000290
.got:08000290                 end
