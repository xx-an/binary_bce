LOAD:00000000 ;
LOAD:00000000 ; +-------------------------------------------------------------------------+
LOAD:00000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:00000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:00000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:00000000 ; |                              Virginia Tech                              |
LOAD:00000000 ; +-------------------------------------------------------------------------+
LOAD:00000000 ;
LOAD:00000000 ; Input SHA256 : 75EF539B85A31F66AC3AEB76B968DE4427210058875ED32394369C256D894E86
LOAD:00000000 ; Input MD5    : CDC3E1A4798A8ACB2E33EA0C2E1C5940
LOAD:00000000 ; Input CRC32  : 8C058EE4
LOAD:00000000
LOAD:00000000 ; File Name   : /home/cindy/Documents/Workspace/sv-benchmarks/c/bin/memsafety/cmp-freed-ptr.o
LOAD:00000000 ; Format      : ELF for Intel 386 (Shared object)
LOAD:00000000 ; Interpreter '/lib/ld-linux.so.2'
LOAD:00000000 ; Needed Library 'libc.so.6'
LOAD:00000000 ;
LOAD:00000000 ; Source File : 'Scrt1.o'
LOAD:00000000 ; Source File : 'crtstuff.c'
LOAD:00000000 ; Source File : 'cmp-freed-ptr.c'
LOAD:00000000 ; Source File : 'crtstuff.c'
LOAD:00000000
LOAD:00000000                 .686p
LOAD:00000000                 .mmx
LOAD:00000000                 .model flat
LOAD:00000000 .intel_syntax noprefix
LOAD:00000000
LOAD:00000000 ; ===========================================================================
LOAD:00000000
LOAD:00000000 ; Segment type: Pure data
LOAD:00000000 ; Segment permissions: Read
LOAD:00000000 LOAD            segment mempage public 'DATA' use32
LOAD:00000000                 assume cs:LOAD
LOAD:00000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000021C↓o
LOAD:00000000                                         ; LOAD:0000022C↓o ...
LOAD:00000000                                         ; File format: \x7FELF
LOAD:00000004                 db 1                    ; File class: 32-bit
LOAD:00000005                 db 1                    ; Data encoding: little-endian
LOAD:00000006                 db 1                    ; File version
LOAD:00000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:00000008                 db 0                    ; ABI Version
LOAD:00000009                 db 7 dup(0)             ; Padding
LOAD:00000010                 dw 3                    ; File type: Shared object
LOAD:00000012                 dw 3                    ; Machine: Intel 386
LOAD:00000014                 dd 1                    ; File version
LOAD:00000018                 dd offset _start        ; Entry point
LOAD:0000001C                 dd 34h                  ; PHT file offset
LOAD:00000020                 dd 35DCh                ; SHT file offset
LOAD:00000024                 dd 0                    ; Processor-specific flags
LOAD:00000028                 dw 34h                  ; ELF header size
LOAD:0000002A                 dw 20h                  ; PHT entry size
LOAD:0000002C                 dw 0Bh                  ; Number of entries in PHT
LOAD:0000002E                 dw 28h                  ; SHT entry size
LOAD:00000030                 dw 1Dh                  ; Number of entries in SHT
LOAD:00000032                 dw 1Ch                  ; SHT entry index for string table
LOAD:00000034 ; ELF32 Program Header
LOAD:00000034 ; PHT Entry 0
LOAD:00000034 dword_34        dd 6                    ; DATA XREF: LOAD:0000003C↓o
LOAD:00000034                                         ; Type: PHDR
LOAD:00000038                 dd 34h                  ; File offset
LOAD:0000003C                 dd offset dword_34      ; Virtual address
LOAD:00000040                 dd 34h                  ; Physical address
LOAD:00000044                 dd 160h                 ; Size in file image
LOAD:00000048                 dd 160h                 ; Size in memory image
LOAD:0000004C                 dd 4                    ; Flags
LOAD:00000050                 dd 4                    ; Alignment
LOAD:00000054 ; PHT Entry 1
LOAD:00000054                 dd 3                    ; Type: INTERP
LOAD:00000058                 dd 194h                 ; File offset
LOAD:0000005C                 dd offset aLibLdLinuxSo2 ; Virtual address
LOAD:00000060                 dd 194h                 ; Physical address
LOAD:00000064                 dd 13h                  ; Size in file image
LOAD:00000068                 dd 13h                  ; Size in memory image
LOAD:0000006C                 dd 4                    ; Flags
LOAD:00000070                 dd 1                    ; Alignment
LOAD:00000074 ; PHT Entry 2
LOAD:00000074                 dd 1                    ; Type: LOAD
LOAD:00000078                 dd 0                    ; File offset
LOAD:0000007C                 dd 0                    ; Virtual address
LOAD:00000080                 dd 0                    ; Physical address
LOAD:00000084                 dd 3F4h                 ; Size in file image
LOAD:00000088                 dd 3F4h                 ; Size in memory image
LOAD:0000008C                 dd 4                    ; Flags
LOAD:00000090                 dd 1000h                ; Alignment
LOAD:00000094 ; PHT Entry 3
LOAD:00000094                 dd 1                    ; Type: LOAD
LOAD:00000098                 dd 1000h                ; File offset
LOAD:0000009C                 dd offset _init_proc    ; Virtual address
LOAD:000000A0                 dd 1000h                ; Physical address
LOAD:000000A4                 dd 260h                 ; Size in file image
LOAD:000000A8                 dd 260h                 ; Size in memory image
LOAD:000000AC                 dd 5                    ; Flags
LOAD:000000B0                 dd 1000h                ; Alignment
LOAD:000000B4 ; PHT Entry 4
LOAD:000000B4                 dd 1                    ; Type: LOAD
LOAD:000000B8                 dd 2000h                ; File offset
LOAD:000000BC                 dd offset _fp_hw        ; Virtual address
LOAD:000000C0                 dd 2000h                ; Physical address
LOAD:000000C4                 dd 0D0h                 ; Size in file image
LOAD:000000C8                 dd 0D0h                 ; Size in memory image
LOAD:000000CC                 dd 4                    ; Flags
LOAD:000000D0                 dd 1000h                ; Alignment
LOAD:000000D4 ; PHT Entry 5
LOAD:000000D4                 dd 1                    ; Type: LOAD
LOAD:000000D8                 dd 2ED4h                ; File offset
LOAD:000000DC                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:000000E0                 dd 3ED4h                ; Physical address
LOAD:000000E4                 dd 134h                 ; Size in file image
LOAD:000000E8                 dd 138h                 ; Size in memory image
LOAD:000000EC                 dd 6                    ; Flags
LOAD:000000F0                 dd 1000h                ; Alignment
LOAD:000000F4 ; PHT Entry 6
LOAD:000000F4                 dd 2                    ; Type: DYNAMIC
LOAD:000000F8                 dd 2EDCh                ; File offset
LOAD:000000FC                 dd offset _DYNAMIC      ; Virtual address
LOAD:00000100                 dd 3EDCh                ; Physical address
LOAD:00000104                 dd 0F8h                 ; Size in file image
LOAD:00000108                 dd 0F8h                 ; Size in memory image
LOAD:0000010C                 dd 6                    ; Flags
LOAD:00000110                 dd 4                    ; Alignment
LOAD:00000114 ; PHT Entry 7
LOAD:00000114                 dd 4                    ; Type: NOTE
LOAD:00000118                 dd 1A8h                 ; File offset
LOAD:0000011C                 dd offset dword_1A8     ; Virtual address
LOAD:00000120                 dd 1A8h                 ; Physical address
LOAD:00000124                 dd 44h                  ; Size in file image
LOAD:00000128                 dd 44h                  ; Size in memory image
LOAD:0000012C                 dd 4                    ; Flags
LOAD:00000130                 dd 4                    ; Alignment
LOAD:00000134 ; PHT Entry 8
LOAD:00000134                 dd 6474E550h            ; Type: EH_FRAME
LOAD:00000138                 dd 2008h                ; File offset
LOAD:0000013C                 dd offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000140                 dd 2008h                ; Physical address
LOAD:00000144                 dd 2Ch                  ; Size in file image
LOAD:00000148                 dd 2Ch                  ; Size in memory image
LOAD:0000014C                 dd 4                    ; Flags
LOAD:00000150                 dd 4                    ; Alignment
LOAD:00000154 ; PHT Entry 9
LOAD:00000154                 dd 6474E551h            ; Type: STACK
LOAD:00000158                 dd 0                    ; File offset
LOAD:0000015C                 dd 0                    ; Virtual address
LOAD:00000160                 dd 0                    ; Physical address
LOAD:00000164                 dd 0                    ; Size in file image
LOAD:00000168                 dd 0                    ; Size in memory image
LOAD:0000016C                 dd 6                    ; Flags
LOAD:00000170                 dd 10h                  ; Alignment
LOAD:00000174 ; PHT Entry 10
LOAD:00000174                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000178                 dd 2ED4h                ; File offset
LOAD:0000017C                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000180                 dd 3ED4h                ; Physical address
LOAD:00000184                 dd 12Ch                 ; Size in file image
LOAD:00000188                 dd 12Ch                 ; Size in memory image
LOAD:0000018C                 dd 4                    ; Flags
LOAD:00000190                 dd 1                    ; Alignment
LOAD:00000194 aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0
LOAD:00000194                                         ; DATA XREF: LOAD:0000005C↑o
LOAD:000001A7                 align 4
LOAD:000001A8 ; ELF Note Entry
LOAD:000001A8 dword_1A8       dd 4                    ; DATA XREF: LOAD:0000011C↑o
LOAD:000001A8                                         ; Name Size
LOAD:000001AC                 dd 14h                  ; Desc Size
LOAD:000001B0                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:000001B4 aGnu            db 'GNU',0              ; Name
LOAD:000001B8                 db 3Ch, 0B8h, 6Dh, 4Ch, 0C3h, 61h, 1Ch, 0DBh, 0D8h, 0EFh ; Desc
LOAD:000001B8                 db 39h, 67h, 2, 1Fh, 51h, 0D2h, 9Dh, 51h, 1Eh, 0C9h
LOAD:000001CC ; ELF Note Entry
LOAD:000001CC __abi_tag       dd 4                    ; Name Size
LOAD:000001D0                 dd 10h                  ; Desc Size
LOAD:000001D4                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:000001D8 aGnu_0          db 'GNU',0              ; Name
LOAD:000001DC                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:000001EC ; ELF GNU Hash Table
LOAD:000001EC elf_gnu_hash_nbuckets dd 2
LOAD:000001F0 elf_gnu_hash_symbias dd 8
LOAD:000001F4 elf_gnu_hash_bitmask_nwords dd 1
LOAD:000001F8 elf_gnu_hash_shift dd 5
LOAD:000001FC elf_gnu_hash_indexes dd 20002000h
LOAD:00000200 elf_gnu_hash_bucket dd 0, 8
LOAD:00000208 elf_gnu_hash_chain dd 0C0E34BADh
LOAD:0000020C ; ELF Symbol Table
LOAD:0000020C                 Elf32_Sym <0>
LOAD:0000021C                 Elf32_Sym <offset aLibcStartMain - offset unk_29C, offset dword_0, 0, \ ; "__libc_start_main"
LOAD:0000021C                            12h, 0, 0>
LOAD:0000022C                 Elf32_Sym <offset aItmDeregistert - offset unk_29C, offset dword_0, 0,\ ; "_ITM_deregisterTMCloneTable"
LOAD:0000022C                            20h, 0, 0>
LOAD:0000023C                 Elf32_Sym <offset aFree - offset unk_29C, offset dword_0, 0, 12h, 0, \ ; "free"
LOAD:0000023C                            0>
LOAD:0000024C                 Elf32_Sym <offset aCxaFinalize - offset unk_29C, offset dword_0, 0, \ ; "__cxa_finalize"
LOAD:0000024C                            22h, 0, 0>
LOAD:0000025C                 Elf32_Sym <offset aMalloc - offset unk_29C, offset dword_0, 0, 12h, 0,\ ; "malloc"
LOAD:0000025C                            0>
LOAD:0000026C                 Elf32_Sym <offset aGmonStart - offset unk_29C, offset dword_0, 0, 20h,\ ; "__gmon_start__"
LOAD:0000026C                            0, 0>
LOAD:0000027C                 Elf32_Sym <offset aItmRegistertmc - offset unk_29C, offset dword_0, 0,\ ; "_ITM_registerTMCloneTable"
LOAD:0000027C                            20h, 0, 0>
LOAD:0000028C                 Elf32_Sym <offset aIoStdinUsed - offset unk_29C, \ ; "_IO_stdin_used"
LOAD:0000028C                            offset _IO_stdin_used, 4, 11h, 0, 10h>
LOAD:0000029C ; ELF String Table
LOAD:0000029C unk_29C         db    0                 ; DATA XREF: LOAD:0000021C↑o
LOAD:0000029C                                         ; LOAD:0000022C↑o ...
LOAD:0000029D aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0000028C↑o
LOAD:000002AC aFree           db 'free',0             ; DATA XREF: LOAD:0000023C↑o
LOAD:000002B1 aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000024C↑o
LOAD:000002C0 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000025C↑o
LOAD:000002C7 aLibcStartMain  db '__libc_start_main',0
LOAD:000002C7                                         ; DATA XREF: LOAD:0000021C↑o
LOAD:000002D9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:0000035C↓o
LOAD:000002E3 aGlibc213       db 'GLIBC_2.1.3',0      ; DATA XREF: LOAD:0000036C↓o
LOAD:000002EF aGlibc20        db 'GLIBC_2.0',0        ; DATA XREF: LOAD:0000037C↓o
LOAD:000002F9 aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:0000038C↓o
LOAD:00000304 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000304                                         ; DATA XREF: LOAD:0000022C↑o
LOAD:00000320 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000026C↑o
LOAD:0000032F aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000032F                                         ; DATA XREF: LOAD:0000027C↑o
LOAD:00000349                 align 2
LOAD:0000034A ; ELF GNU Symbol Version Table
LOAD:0000034A                 dw 0
LOAD:0000034C                 dw 2                    ; __libc_start_main@@GLIBC_2.34
LOAD:0000034E                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:00000350                 dw 3                    ; free@@GLIBC_2.0
LOAD:00000352                 dw 4                    ; __cxa_finalize@@GLIBC_2.1.3
LOAD:00000354                 dw 3                    ; malloc@@GLIBC_2.0
LOAD:00000356                 dw 1                    ; global symbol: __gmon_start__
LOAD:00000358                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:0000035A                 dw 1                    ; global symbol: _IO_stdin_used
LOAD:0000035C ; ELF GNU Symbol Version Requirements
LOAD:0000035C                 Elf32_Verneed <1, 3, offset aLibcSo6 - offset unk_29C, 10h, 0> ; "libc.so.6"
LOAD:0000036C                 Elf32_Vernaux <9691F73h, 0, 4, offset aGlibc213 - offset unk_29C, 10h> ; "GLIBC_2.1.3"
LOAD:0000037C                 Elf32_Vernaux <0D696910h, 0, 3, offset aGlibc20 - offset unk_29C, 10h> ; "GLIBC_2.0"
LOAD:0000038C                 Elf32_Vernaux <69691B4h, 0, 2, offset aGlibc234 - offset unk_29C, 0> ; "GLIBC_2.34"
LOAD:0000039C ; ELF REL Relocation Table
LOAD:0000039C                 Elf32_Rel <3ED4h, 8>    ; R_386_RELATIVE
LOAD:000003A4                 Elf32_Rel <3ED8h, 8>    ; R_386_RELATIVE
LOAD:000003AC                 Elf32_Rel <3FF8h, 8>    ; R_386_RELATIVE
LOAD:000003B4                 Elf32_Rel <4004h, 8>    ; R_386_RELATIVE
LOAD:000003BC                 Elf32_Rel <3FECh, 206h> ; R_386_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:000003C4                 Elf32_Rel <3FF0h, 406h> ; R_386_GLOB_DAT __cxa_finalize
LOAD:000003CC                 Elf32_Rel <3FF4h, 606h> ; R_386_GLOB_DAT __gmon_start__
LOAD:000003D4                 Elf32_Rel <3FFCh, 706h> ; R_386_GLOB_DAT _ITM_registerTMCloneTable
LOAD:000003DC ; ELF JMPREL Relocation Table
LOAD:000003DC                 Elf32_Rel <3FE0h, 107h> ; R_386_JMP_SLOT __libc_start_main
LOAD:000003E4                 Elf32_Rel <3FE4h, 307h> ; R_386_JMP_SLOT free
LOAD:000003EC                 Elf32_Rel <3FE8h, 507h> ; R_386_JMP_SLOT malloc
LOAD:000003EC LOAD            ends
LOAD:000003EC
.init:00001000 ; ===========================================================================
.init:00001000
.init:00001000 ; Segment type: Pure code
.init:00001000 ; Segment permissions: Read/Execute
.init:00001000 _init           segment dword public 'CODE' use32
.init:00001000                 assume cs:_init
.init:00001000                 ;org 1000h
.init:00001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00001000
.init:00001000 ; =============== S U B R O U T I N E =======================================
.init:00001000
.init:00001000
.init:00001000                 public _init_proc
.init:00001000 _init_proc      proc near               ; DATA XREF: LOAD:0000009C↑o
.init:00001000                 endbr32                 ; _init
.init:00001004                 push    ebx
.init:00001005                 sub     esp, 8
.init:00001008                 call    __x86_get_pc_thunk_bx
.init:0000100D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.init:00001013                 mov     eax, ds:(__gmon_start___ptr - 3FD4h)[ebx]
.init:00001019                 test    eax, eax
.init:0000101B                 jz      short loc_101F
.init:0000101D                 call    eax
.init:0000101F
.init:0000101F loc_101F:                               ; CODE XREF: _init_proc+1B↑j
.init:0000101F                 add     esp, 8
.init:00001022                 pop     ebx
.init:00001023                 retn
.init:00001023 _init_proc      endp
.init:00001023
.init:00001023 _init           ends
.init:00001023
LOAD:00001024 ; ===========================================================================
LOAD:00001024
LOAD:00001024 ; Segment type: Pure code
LOAD:00001024 ; Segment permissions: Read/Execute
LOAD:00001024 LOAD            segment mempage public 'CODE' use32
LOAD:00001024                 assume cs:LOAD
LOAD:00001024                 ;org 1024h
LOAD:00001024                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00001024                 align 10h
LOAD:00001024 LOAD            ends
LOAD:00001024
.plt:00001030 ; ===========================================================================
.plt:00001030
.plt:00001030 ; Segment type: Pure code
.plt:00001030 ; Segment permissions: Read/Execute
.plt:00001030 _plt            segment para public 'CODE' use32
.plt:00001030                 assume cs:_plt
.plt:00001030                 ;org 1030h
.plt:00001030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00001030
.plt:00001030 ; =============== S U B R O U T I N E =======================================
.plt:00001030
.plt:00001030
.plt:00001030 sub_1030        proc near               ; CODE XREF: .plt:0000104B↓j
.plt:00001030                                         ; .plt:0000105B↓j ...
.plt:00001030 ; __unwind {
.plt:00001030                 push    dword ptr [ebx+4]
.plt:00001036                 jmp     dword ptr [ebx+8]
.plt:00001036 sub_1030        endp
.plt:00001036
.plt:00001036 ; ---------------------------------------------------------------------------
.plt:0000103C                 align 10h
.plt:00001040
.plt:00001040 ; =============== S U B R O U T I N E =======================================
.plt:00001040
.plt:00001040 ; Attributes: thunk
.plt:00001040
.plt:00001040 ; int __cdecl __libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
.plt:00001040 ___libc_start_main proc near            ; CODE XREF: _start+26↓p
.plt:00001040
.plt:00001040 main            = dword ptr  4
.plt:00001040 argc            = dword ptr  8
.plt:00001040 ubp_av          = dword ptr  0Ch
.plt:00001040 init            = dword ptr  10h
.plt:00001040 fini            = dword ptr  14h
.plt:00001040 rtld_fini       = dword ptr  18h
.plt:00001040 stack_end       = dword ptr  1Ch
.plt:00001040
.plt:00001040                 jmp     ds:__libc_start_main_ptr ; PIC mode
.plt:00001040 ___libc_start_main endp
.plt:00001040
.plt:00001046 ; ---------------------------------------------------------------------------
.plt:00001046                 push    0
.plt:0000104B                 jmp     sub_1030
.plt:00001050
.plt:00001050 ; =============== S U B R O U T I N E =======================================
.plt:00001050
.plt:00001050 ; Attributes: thunk
.plt:00001050
.plt:00001050 ; void free(void *ptr)
.plt:00001050 _free           proc near               ; CODE XREF: main+47↓p
.plt:00001050                                         ; main+73↓p ...
.plt:00001050
.plt:00001050 ptr             = dword ptr  4
.plt:00001050
.plt:00001050                 jmp     ds:free_ptr     ; PIC mode
.plt:00001050 _free           endp
.plt:00001050
.plt:00001056 ; ---------------------------------------------------------------------------
.plt:00001056                 push    8
.plt:0000105B                 jmp     sub_1030
.plt:00001060
.plt:00001060 ; =============== S U B R O U T I N E =======================================
.plt:00001060
.plt:00001060 ; Attributes: thunk
.plt:00001060
.plt:00001060 ; void *malloc(size_t size)
.plt:00001060 _malloc         proc near               ; CODE XREF: main+30↓p
.plt:00001060                                         ; main+54↓p
.plt:00001060
.plt:00001060 size            = dword ptr  4
.plt:00001060
.plt:00001060                 jmp     ds:malloc_ptr   ; PIC mode
.plt:00001060 _malloc         endp
.plt:00001060
.plt:00001066 ; ---------------------------------------------------------------------------
.plt:00001066                 push    10h
.plt:0000106B                 jmp     sub_1030
.plt:0000106B ; } // starts at 1030
.plt:0000106B _plt            ends
.plt:0000106B
.plt.got:00001070 ; ===========================================================================
.plt.got:00001070
.plt.got:00001070 ; Segment type: Pure code
.plt.got:00001070 ; Segment permissions: Read/Execute
.plt.got:00001070 _plt_got        segment qword public 'CODE' use32
.plt.got:00001070                 assume cs:_plt_got
.plt.got:00001070                 ;org 1070h
.plt.got:00001070                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00001070
.plt.got:00001070 ; =============== S U B R O U T I N E =======================================
.plt.got:00001070
.plt.got:00001070 ; Attributes: thunk
.plt.got:00001070
.plt.got:00001070 ; int __cdecl __cxa_finalize(void *)
.plt.got:00001070 ___cxa_finalize proc near               ; CODE XREF: __do_global_dtors_aux+32↓p
.plt.got:00001070 ; __unwind {
.plt.got:00001070                 jmp     ds:__cxa_finalize_ptr ; PIC mode
.plt.got:00001070 ___cxa_finalize endp
.plt.got:00001070
.plt.got:00001070 ; ---------------------------------------------------------------------------
.plt.got:00001076                 align 4
.plt.got:00001076 ; } // starts at 1070
.plt.got:00001076 _plt_got        ends
.plt.got:00001076
LOAD:00001078 ; ===========================================================================
LOAD:00001078
LOAD:00001078 ; Segment type: Pure code
LOAD:00001078 ; Segment permissions: Read/Execute
LOAD:00001078 LOAD            segment mempage public 'CODE' use32
LOAD:00001078                 assume cs:LOAD
LOAD:00001078                 ;org 1078h
LOAD:00001078                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00001078                 align 10h
LOAD:00001078 LOAD            ends
LOAD:00001078
.text:00001080 ; ===========================================================================
.text:00001080
.text:00001080 ; Segment type: Pure code
.text:00001080 ; Segment permissions: Read/Execute
.text:00001080 _text           segment para public 'CODE' use32
.text:00001080                 assume cs:_text
.text:00001080                 ;org 1080h
.text:00001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00001080
.text:00001080 ; =============== S U B R O U T I N E =======================================
.text:00001080
.text:00001080 ; Attributes: noreturn fuzzy-sp
.text:00001080
.text:00001080                 public _start
.text:00001080 _start          proc near               ; DATA XREF: LOAD:00000018↑o
.text:00001080 ; __unwind {
.text:00001080                 endbr32
.text:00001084                 xor     ebp, ebp
.text:00001086                 pop     esi
.text:00001087                 mov     ecx, esp
.text:00001089                 and     esp, 0FFFFFFF0h
.text:0000108C                 push    eax
.text:0000108D                 push    esp             ; stack_end
.text:0000108E                 push    edx             ; rtld_fini
.text:0000108F                 call    sub_10AC
.text:00001094                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0000109A                 push    0               ; fini
.text:0000109C                 push    0               ; init
.text:0000109E                 push    ecx             ; ubp_av
.text:0000109F                 push    esi             ; argc
.text:000010A0                 push    ds:(main_ptr - 3FD4h)[ebx] ; main
.text:000010A6                 call    ___libc_start_main
.text:000010AB                 hlt
.text:000010AB _start          endp
.text:000010AB
.text:000010AC
.text:000010AC ; =============== S U B R O U T I N E =======================================
.text:000010AC
.text:000010AC
.text:000010AC sub_10AC        proc near               ; CODE XREF: _start+F↑p
.text:000010AC                 mov     ebx, [esp+0]
.text:000010AF                 retn
.text:000010AF ; } // starts at 1080
.text:000010AF sub_10AC        endp
.text:000010AF
.text:000010B0
.text:000010B0 ; =============== S U B R O U T I N E =======================================
.text:000010B0
.text:000010B0
.text:000010B0                 public __x86_get_pc_thunk_bx
.text:000010B0 __x86_get_pc_thunk_bx proc near         ; CODE XREF: _init_proc+8↑p
.text:000010B0                                         ; __do_global_dtors_aux+8↓p ...
.text:000010B0                 mov     ebx, [esp+0]
.text:000010B3                 retn
.text:000010B3 __x86_get_pc_thunk_bx endp
.text:000010B3
.text:000010B3 ; ---------------------------------------------------------------------------
.text:000010B4                 align 10h
.text:000010C0
.text:000010C0 ; =============== S U B R O U T I N E =======================================
.text:000010C0
.text:000010C0
.text:000010C0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_118A↓p
.text:000010C0                 call    __x86_get_pc_thunk_dx
.text:000010C5                 add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000010CB                 lea     ecx, (__bss_start - 3FD4h)[edx]
.text:000010D1                 lea     eax, (__bss_start - 3FD4h)[edx]
.text:000010D7                 cmp     eax, ecx
.text:000010D9                 jz      short locret_10F8
.text:000010DB                 mov     eax, ds:(_ITM_deregisterTMCloneTable_ptr - 3FD4h)[edx]
.text:000010E1                 test    eax, eax
.text:000010E3                 jz      short locret_10F8
.text:000010E5                 push    ebp
.text:000010E6                 mov     ebp, esp
.text:000010E8                 sub     esp, 14h
.text:000010EB                 push    ecx
.text:000010EC                 call    eax
.text:000010EE                 add     esp, 10h
.text:000010F1                 leave
.text:000010F2                 retn
.text:000010F2 ; ---------------------------------------------------------------------------
.text:000010F3                 align 8
.text:000010F8
.text:000010F8 locret_10F8:                            ; CODE XREF: deregister_tm_clones+19↑j
.text:000010F8                                         ; deregister_tm_clones+23↑j
.text:000010F8                 retn
.text:000010F8 deregister_tm_clones endp
.text:000010F8
.text:000010F8 ; ---------------------------------------------------------------------------
.text:000010F9                 align 10h
.text:00001100
.text:00001100 ; =============== S U B R O U T I N E =======================================
.text:00001100
.text:00001100
.text:00001100 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:00001100                 call    __x86_get_pc_thunk_dx
.text:00001105                 add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0000110B                 push    ebp
.text:0000110C                 mov     ebp, esp
.text:0000110E                 push    ebx
.text:0000110F                 lea     ecx, (__bss_start - 3FD4h)[edx]
.text:00001115                 lea     eax, (__bss_start - 3FD4h)[edx]
.text:0000111B                 sub     esp, 4
.text:0000111E                 sub     eax, ecx
.text:00001120                 mov     ebx, eax
.text:00001122                 shr     eax, 1Fh
.text:00001125                 sar     ebx, 2
.text:00001128                 add     eax, ebx
.text:0000112A                 sar     eax, 1
.text:0000112C                 jz      short loc_1142
.text:0000112E                 mov     edx, ds:(_ITM_registerTMCloneTable_ptr - 3FD4h)[edx]
.text:00001134                 test    edx, edx
.text:00001136                 jz      short loc_1142
.text:00001138                 sub     esp, 8
.text:0000113B                 push    eax
.text:0000113C                 push    ecx
.text:0000113D                 call    edx
.text:0000113F                 add     esp, 10h
.text:00001142
.text:00001142 loc_1142:                               ; CODE XREF: register_tm_clones+2C↑j
.text:00001142                                         ; register_tm_clones+36↑j
.text:00001142                 mov     ebx, [ebp-4]
.text:00001145                 leave
.text:00001146                 retn
.text:00001146 register_tm_clones endp
.text:00001146
.text:00001146 ; ---------------------------------------------------------------------------
.text:00001147                 align 10h
.text:00001150
.text:00001150 ; =============== S U B R O U T I N E =======================================
.text:00001150
.text:00001150 ; Attributes: bp-based frame
.text:00001150
.text:00001150 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00001150
.text:00001150 var_4           = dword ptr -4
.text:00001150
.text:00001150                 endbr32
.text:00001154                 push    ebp
.text:00001155                 mov     ebp, esp
.text:00001157                 push    ebx
.text:00001158                 call    __x86_get_pc_thunk_bx
.text:0000115D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001163                 sub     esp, 4
.text:00001166                 cmp     ds:(__bss_start - 3FD4h)[ebx], 0
.text:0000116D                 jnz     short loc_1196
.text:0000116F                 mov     eax, ds:(__cxa_finalize_ptr - 3FD4h)[ebx]
.text:00001175                 test    eax, eax
.text:00001177                 jz      short loc_118A
.text:00001179                 sub     esp, 0Ch
.text:0000117C                 push    (__dso_handle - 3FD4h)[ebx] ; void *
.text:00001182                 call    ___cxa_finalize
.text:00001187                 add     esp, 10h
.text:0000118A
.text:0000118A loc_118A:                               ; CODE XREF: __do_global_dtors_aux+27↑j
.text:0000118A                 call    deregister_tm_clones
.text:0000118F                 mov     ds:(__bss_start - 3FD4h)[ebx], 1
.text:00001196
.text:00001196 loc_1196:                               ; CODE XREF: __do_global_dtors_aux+1D↑j
.text:00001196                 mov     ebx, [ebp+var_4]
.text:00001199                 leave
.text:0000119A                 retn
.text:0000119A __do_global_dtors_aux endp
.text:0000119A
.text:0000119A ; ---------------------------------------------------------------------------
.text:0000119B                 align 10h
.text:000011A0
.text:000011A0 ; =============== S U B R O U T I N E =======================================
.text:000011A0
.text:000011A0
.text:000011A0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:000011A0                 endbr32
.text:000011A4                 jmp     register_tm_clones
.text:000011A4 frame_dummy     endp
.text:000011A4
.text:000011A9
.text:000011A9 ; =============== S U B R O U T I N E =======================================
.text:000011A9
.text:000011A9
.text:000011A9                 public __x86_get_pc_thunk_dx
.text:000011A9 __x86_get_pc_thunk_dx proc near         ; CODE XREF: deregister_tm_clones↑p
.text:000011A9                                         ; register_tm_clones↑p
.text:000011A9                 mov     edx, [esp+0]
.text:000011AC                 retn
.text:000011AC __x86_get_pc_thunk_dx endp
.text:000011AC
.text:000011AD
.text:000011AD ; =============== S U B R O U T I N E =======================================
.text:000011AD
.text:000011AD ; Attributes: bp-based frame fuzzy-sp
.text:000011AD
.text:000011AD ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:000011AD                 public main
.text:000011AD main            proc near               ; DATA XREF: .got:main_ptr↓o
.text:000011AD
.text:000011AD var_18          = dword ptr -18h
.text:000011AD ptr             = dword ptr -14h
.text:000011AD var_10          = dword ptr -10h
.text:000011AD var_C           = dword ptr -0Ch
.text:000011AD argc            = dword ptr  8
.text:000011AD argv            = dword ptr  0Ch
.text:000011AD envp            = dword ptr  10h
.text:000011AD
.text:000011AD ; __unwind {
.text:000011AD                 lea     ecx, [esp+4]
.text:000011B1                 and     esp, 0FFFFFFF0h
.text:000011B4                 push    dword ptr [ecx-4]
.text:000011B7                 push    ebp
.text:000011B8                 mov     ebp, esp
.text:000011BA                 push    ebx
.text:000011BB                 push    ecx
.text:000011BC                 sub     esp, 10h
.text:000011BF                 call    __x86_get_pc_thunk_bx
.text:000011C4                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000011CA                 mov     [ebp+var_18], 0
.text:000011D1                 mov     [ebp+ptr], 0
.text:000011D8                 sub     esp, 0Ch
.text:000011DB                 push    4               ; size
.text:000011DD                 call    _malloc
.text:000011E2                 add     esp, 10h
.text:000011E5                 mov     [ebp+ptr], eax
.text:000011E8                 mov     eax, [ebp+ptr]
.text:000011EB                 mov     [ebp+var_10], eax
.text:000011EE                 sub     esp, 0Ch
.text:000011F1                 push    [ebp+ptr]       ; ptr
.text:000011F4                 call    _free
.text:000011F9                 add     esp, 10h
.text:000011FC                 sub     esp, 0Ch
.text:000011FF                 push    4               ; size
.text:00001201                 call    _malloc
.text:00001206                 add     esp, 10h
.text:00001209                 mov     [ebp+var_18], eax
.text:0000120C                 mov     eax, [ebp+var_18]
.text:0000120F                 mov     [ebp+var_C], eax
.text:00001212                 mov     eax, [ebp+var_C]
.text:00001215                 cmp     eax, [ebp+var_10]
.text:00001218                 jnz     short loc_1228
.text:0000121A                 sub     esp, 0Ch
.text:0000121D                 push    [ebp+var_18]    ; ptr
.text:00001220                 call    _free
.text:00001225                 add     esp, 10h
.text:00001228
.text:00001228 loc_1228:                               ; CODE XREF: main+6B↑j
.text:00001228                 sub     esp, 0Ch
.text:0000122B                 push    [ebp+var_18]    ; ptr
.text:0000122E                 call    _free
.text:00001233                 add     esp, 10h
.text:00001236                 mov     eax, 0
.text:0000123B                 lea     esp, [ebp-8]
.text:0000123E                 pop     ecx
.text:0000123F                 pop     ebx
.text:00001240                 pop     ebp
.text:00001241                 lea     esp, [ecx-4]
.text:00001244                 retn
.text:00001244 ; } // starts at 11AD
.text:00001244 main            endp
.text:00001244
.text:00001244 _text           ends
.text:00001244
LOAD:00001245 ; ===========================================================================
LOAD:00001245
LOAD:00001245 ; Segment type: Pure code
LOAD:00001245 ; Segment permissions: Read/Execute
LOAD:00001245 LOAD            segment mempage public 'CODE' use32
LOAD:00001245                 assume cs:LOAD
LOAD:00001245                 ;org 1245h
LOAD:00001245                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00001245                 align 4
LOAD:00001245 LOAD            ends
LOAD:00001245
.fini:00001248 ; ===========================================================================
.fini:00001248
.fini:00001248 ; Segment type: Pure code
.fini:00001248 ; Segment permissions: Read/Execute
.fini:00001248 _fini           segment dword public 'CODE' use32
.fini:00001248                 assume cs:_fini
.fini:00001248                 ;org 1248h
.fini:00001248                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:00001248
.fini:00001248 ; =============== S U B R O U T I N E =======================================
.fini:00001248
.fini:00001248
.fini:00001248                 public _term_proc
.fini:00001248 _term_proc      proc near
.fini:00001248                 endbr32                 ; _fini
.fini:0000124C                 push    ebx
.fini:0000124D                 sub     esp, 8
.fini:00001250                 call    __x86_get_pc_thunk_bx
.fini:00001255                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.fini:0000125B                 add     esp, 8
.fini:0000125E                 pop     ebx
.fini:0000125F                 retn
.fini:0000125F _term_proc      endp
.fini:0000125F
.fini:0000125F _fini           ends
.fini:0000125F
.rodata:00002000 ; ===========================================================================
.rodata:00002000
.rodata:00002000 ; Segment type: Pure data
.rodata:00002000 ; Segment permissions: Read
.rodata:00002000 _rodata         segment dword public 'CONST' use32
.rodata:00002000                 assume cs:_rodata
.rodata:00002000                 ;org 2000h
.rodata:00002000                 public _fp_hw
.rodata:00002000 _fp_hw          db    3                 ; DATA XREF: LOAD:000000BC↑o
.rodata:00002001                 db    0
.rodata:00002002                 db    0
.rodata:00002003                 db    0
.rodata:00002004                 public _IO_stdin_used
.rodata:00002004 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000028C↑o
.rodata:00002005                 db    0
.rodata:00002006                 db    2
.rodata:00002007                 db    0
.rodata:00002007 _rodata         ends
.rodata:00002007
.eh_frame_hdr:00002008 ; ===========================================================================
.eh_frame_hdr:00002008
.eh_frame_hdr:00002008 ; Segment type: Pure data
.eh_frame_hdr:00002008 ; Segment permissions: Read
.eh_frame_hdr:00002008 _eh_frame_hdr   segment dword public 'CONST' use32
.eh_frame_hdr:00002008                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00002008                 ;org 2008h
.eh_frame_hdr:00002008 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000013C↑o
.eh_frame_hdr:00002009                 db  1Bh
.eh_frame_hdr:0000200A                 db    3
.eh_frame_hdr:0000200B                 db  3Bh ; ;
.eh_frame_hdr:0000200C                 db  28h ; (
.eh_frame_hdr:0000200D                 db    0
.eh_frame_hdr:0000200E                 db    0
.eh_frame_hdr:0000200F                 db    0
.eh_frame_hdr:00002010                 db    4
.eh_frame_hdr:00002011                 db    0
.eh_frame_hdr:00002012                 db    0
.eh_frame_hdr:00002013                 db    0
.eh_frame_hdr:00002014                 db  28h ; (
.eh_frame_hdr:00002015                 db 0F0h
.eh_frame_hdr:00002016                 db 0FFh
.eh_frame_hdr:00002017                 db 0FFh
.eh_frame_hdr:00002018                 db  58h ; X
.eh_frame_hdr:00002019                 db    0
.eh_frame_hdr:0000201A                 db    0
.eh_frame_hdr:0000201B                 db    0
.eh_frame_hdr:0000201C                 db  68h ; h
.eh_frame_hdr:0000201D                 db 0F0h
.eh_frame_hdr:0000201E                 db 0FFh
.eh_frame_hdr:0000201F                 db 0FFh
.eh_frame_hdr:00002020                 db  7Ch ; |
.eh_frame_hdr:00002021                 db    0
.eh_frame_hdr:00002022                 db    0
.eh_frame_hdr:00002023                 db    0
.eh_frame_hdr:00002024                 db  78h ; x
.eh_frame_hdr:00002025                 db 0F0h
.eh_frame_hdr:00002026                 db 0FFh
.eh_frame_hdr:00002027                 db 0FFh
.eh_frame_hdr:00002028                 db  44h ; D
.eh_frame_hdr:00002029                 db    0
.eh_frame_hdr:0000202A                 db    0
.eh_frame_hdr:0000202B                 db    0
.eh_frame_hdr:0000202C                 db 0A5h
.eh_frame_hdr:0000202D                 db 0F1h
.eh_frame_hdr:0000202E                 db 0FFh
.eh_frame_hdr:0000202F                 db 0FFh
.eh_frame_hdr:00002030                 db  90h
.eh_frame_hdr:00002031                 db    0
.eh_frame_hdr:00002032                 db    0
.eh_frame_hdr:00002033                 db    0
.eh_frame_hdr:00002033 _eh_frame_hdr   ends
.eh_frame_hdr:00002033
.eh_frame:00002034 ; ===========================================================================
.eh_frame:00002034
.eh_frame:00002034 ; Segment type: Pure data
.eh_frame:00002034 ; Segment permissions: Read
.eh_frame:00002034 _eh_frame       segment dword public 'CONST' use32
.eh_frame:00002034                 assume cs:_eh_frame
.eh_frame:00002034                 ;org 2034h
.eh_frame:00002034                 db  14h
.eh_frame:00002035                 db    0
.eh_frame:00002036                 db    0
.eh_frame:00002037                 db    0
.eh_frame:00002038                 db    0
.eh_frame:00002039                 db    0
.eh_frame:0000203A                 db    0
.eh_frame:0000203B                 db    0
.eh_frame:0000203C                 db    1
.eh_frame:0000203D                 db  7Ah ; z
.eh_frame:0000203E                 db  52h ; R
.eh_frame:0000203F                 db    0
.eh_frame:00002040                 db    1
.eh_frame:00002041                 db  7Ch ; |
.eh_frame:00002042                 db    8
.eh_frame:00002043                 db    1
.eh_frame:00002044                 db  1Bh
.eh_frame:00002045                 db  0Ch
.eh_frame:00002046                 db    4
.eh_frame:00002047                 db    4
.eh_frame:00002048                 db  88h
.eh_frame:00002049                 db    1
.eh_frame:0000204A                 db    0
.eh_frame:0000204B                 db    0
.eh_frame:0000204C                 db  10h
.eh_frame:0000204D                 db    0
.eh_frame:0000204E                 db    0
.eh_frame:0000204F                 db    0
.eh_frame:00002050                 db  1Ch
.eh_frame:00002051                 db    0
.eh_frame:00002052                 db    0
.eh_frame:00002053                 db    0
.eh_frame:00002054                 db  2Ch ; ,
.eh_frame:00002055                 db 0F0h
.eh_frame:00002056                 db 0FFh
.eh_frame:00002057                 db 0FFh
.eh_frame:00002058                 db  30h ; 0
.eh_frame:00002059                 db    0
.eh_frame:0000205A                 db    0
.eh_frame:0000205B                 db    0
.eh_frame:0000205C                 db    0
.eh_frame:0000205D                 db  44h ; D
.eh_frame:0000205E                 db    7
.eh_frame:0000205F                 db    8
.eh_frame:00002060                 db  20h
.eh_frame:00002061                 db    0
.eh_frame:00002062                 db    0
.eh_frame:00002063                 db    0
.eh_frame:00002064                 db  30h ; 0
.eh_frame:00002065                 db    0
.eh_frame:00002066                 db    0
.eh_frame:00002067                 db    0
.eh_frame:00002068                 db 0C8h
.eh_frame:00002069                 db 0EFh
.eh_frame:0000206A                 db 0FFh
.eh_frame:0000206B                 db 0FFh
.eh_frame:0000206C                 db  40h ; @
.eh_frame:0000206D                 db    0
.eh_frame:0000206E                 db    0
.eh_frame:0000206F                 db    0
.eh_frame:00002070                 db    0
.eh_frame:00002071                 db  0Eh
.eh_frame:00002072                 db    8
.eh_frame:00002073                 db  46h ; F
.eh_frame:00002074                 db  0Eh
.eh_frame:00002075                 db  0Ch
.eh_frame:00002076                 db  4Ah ; J
.eh_frame:00002077                 db  0Fh
.eh_frame:00002078                 db  0Bh
.eh_frame:00002079                 db  74h ; t
.eh_frame:0000207A                 db    4
.eh_frame:0000207B                 db  78h ; x
.eh_frame:0000207C                 db    0
.eh_frame:0000207D                 db  3Fh ; ?
.eh_frame:0000207E                 db  1Ah
.eh_frame:0000207F                 db  3Bh ; ;
.eh_frame:00002080                 db  2Ah ; *
.eh_frame:00002081                 db  32h ; 2
.eh_frame:00002082                 db  24h ; $
.eh_frame:00002083                 db  22h ; "
.eh_frame:00002084                 db  10h
.eh_frame:00002085                 db    0
.eh_frame:00002086                 db    0
.eh_frame:00002087                 db    0
.eh_frame:00002088                 db  54h ; T
.eh_frame:00002089                 db    0
.eh_frame:0000208A                 db    0
.eh_frame:0000208B                 db    0
.eh_frame:0000208C                 db 0E4h
.eh_frame:0000208D                 db 0EFh
.eh_frame:0000208E                 db 0FFh
.eh_frame:0000208F                 db 0FFh
.eh_frame:00002090                 db    8
.eh_frame:00002091                 db    0
.eh_frame:00002092                 db    0
.eh_frame:00002093                 db    0
.eh_frame:00002094                 db    0
.eh_frame:00002095                 db    0
.eh_frame:00002096                 db    0
.eh_frame:00002097                 db    0
.eh_frame:00002098                 db  30h ; 0
.eh_frame:00002099                 db    0
.eh_frame:0000209A                 db    0
.eh_frame:0000209B                 db    0
.eh_frame:0000209C                 db  68h ; h
.eh_frame:0000209D                 db    0
.eh_frame:0000209E                 db    0
.eh_frame:0000209F                 db    0
.eh_frame:000020A0                 db  0Dh
.eh_frame:000020A1                 db 0F1h
.eh_frame:000020A2                 db 0FFh
.eh_frame:000020A3                 db 0FFh
.eh_frame:000020A4                 db  98h
.eh_frame:000020A5                 db    0
.eh_frame:000020A6                 db    0
.eh_frame:000020A7                 db    0
.eh_frame:000020A8                 db    0
.eh_frame:000020A9                 db  44h ; D
.eh_frame:000020AA                 db  0Ch
.eh_frame:000020AB                 db    1
.eh_frame:000020AC                 db    0
.eh_frame:000020AD                 db  49h ; I
.eh_frame:000020AE                 db  10h
.eh_frame:000020AF                 db    5
.eh_frame:000020B0                 db    2
.eh_frame:000020B1                 db  75h ; u
.eh_frame:000020B2                 db    0
.eh_frame:000020B3                 db  42h ; B
.eh_frame:000020B4                 db  0Fh
.eh_frame:000020B5                 db    3
.eh_frame:000020B6                 db  75h ; u
.eh_frame:000020B7                 db  78h ; x
.eh_frame:000020B8                 db    6
.eh_frame:000020B9                 db  10h
.eh_frame:000020BA                 db    3
.eh_frame:000020BB                 db    2
.eh_frame:000020BC                 db  75h ; u
.eh_frame:000020BD                 db  7Ch ; |
.eh_frame:000020BE                 db    2
.eh_frame:000020BF                 db  83h
.eh_frame:000020C0                 db 0C1h
.eh_frame:000020C1                 db  0Ch
.eh_frame:000020C2                 db    1
.eh_frame:000020C3                 db    0
.eh_frame:000020C4                 db  41h ; A
.eh_frame:000020C5                 db 0C3h
.eh_frame:000020C6                 db  41h ; A
.eh_frame:000020C7                 db 0C5h
.eh_frame:000020C8                 db  43h ; C
.eh_frame:000020C9                 db  0Ch
.eh_frame:000020CA                 db    4
.eh_frame:000020CB                 db    4
.eh_frame:000020CC __FRAME_END__   db    0
.eh_frame:000020CD                 db    0
.eh_frame:000020CE                 db    0
.eh_frame:000020CF                 db    0
.eh_frame:000020CF _eh_frame       ends
.eh_frame:000020CF
.init_array:00003ED4 ; ELF Initialization Function Table
.init_array:00003ED4 ; ===========================================================================
.init_array:00003ED4
.init_array:00003ED4 ; Segment type: Pure data
.init_array:00003ED4 ; Segment permissions: Read/Write
.init_array:00003ED4 _init_array     segment dword public 'DATA' use32
.init_array:00003ED4                 assume cs:_init_array
.init_array:00003ED4                 ;org 3ED4h
.init_array:00003ED4 __frame_dummy_init_array_entry dd offset frame_dummy
.init_array:00003ED4                                         ; DATA XREF: LOAD:000000DC↑o
.init_array:00003ED4                                         ; LOAD:0000017C↑o
.init_array:00003ED4 _init_array     ends
.init_array:00003ED4
.fini_array:00003ED8 ; ELF Termination Function Table
.fini_array:00003ED8 ; ===========================================================================
.fini_array:00003ED8
.fini_array:00003ED8 ; Segment type: Pure data
.fini_array:00003ED8 ; Segment permissions: Read/Write
.fini_array:00003ED8 _fini_array     segment dword public 'DATA' use32
.fini_array:00003ED8                 assume cs:_fini_array
.fini_array:00003ED8                 ;org 3ED8h
.fini_array:00003ED8 __do_global_dtors_aux_fini_array_entry dd offset __do_global_dtors_aux
.fini_array:00003ED8 _fini_array     ends
.fini_array:00003ED8
LOAD:00003EDC ; ELF Dynamic Information
LOAD:00003EDC ; ===========================================================================
LOAD:00003EDC
LOAD:00003EDC ; Segment type: Pure data
LOAD:00003EDC ; Segment permissions: Read/Write
LOAD:00003EDC LOAD            segment mempage public 'DATA' use32
LOAD:00003EDC                 assume cs:LOAD
LOAD:00003EDC                 ;org 3EDCh
LOAD:00003EDC _DYNAMIC        Elf32_Dyn <1, <3Dh>>    ; DATA XREF: LOAD:000000FC↑o
LOAD:00003EDC                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:00003EDC                                         ; DT_NEEDED libc.so.6
LOAD:00003EE4                 Elf32_Dyn <0Ch, <1000h>> ; DT_INIT
LOAD:00003EEC                 Elf32_Dyn <0Dh, <1248h>> ; DT_FINI
LOAD:00003EF4                 Elf32_Dyn <19h, <3ED4h>> ; DT_INIT_ARRAY
LOAD:00003EFC                 Elf32_Dyn <1Bh, <4>>    ; DT_INIT_ARRAYSZ
LOAD:00003F04                 Elf32_Dyn <1Ah, <3ED8h>> ; DT_FINI_ARRAY
LOAD:00003F0C                 Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
LOAD:00003F14                 Elf32_Dyn <6FFFFEF5h, <1ECh>> ; DT_GNU_HASH
LOAD:00003F1C                 Elf32_Dyn <5, <29Ch>>   ; DT_STRTAB
LOAD:00003F24                 Elf32_Dyn <6, <20Ch>>   ; DT_SYMTAB
LOAD:00003F2C                 Elf32_Dyn <0Ah, <0ADh>> ; DT_STRSZ
LOAD:00003F34                 Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
LOAD:00003F3C                 Elf32_Dyn <15h, <0>>    ; DT_DEBUG
LOAD:00003F44                 Elf32_Dyn <3, <3FD4h>>  ; DT_PLTGOT
LOAD:00003F4C                 Elf32_Dyn <2, <18h>>    ; DT_PLTRELSZ
LOAD:00003F54                 Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
LOAD:00003F5C                 Elf32_Dyn <17h, <3DCh>> ; DT_JMPREL
LOAD:00003F64                 Elf32_Dyn <11h, <39Ch>> ; DT_REL
LOAD:00003F6C                 Elf32_Dyn <12h, <40h>>  ; DT_RELSZ
LOAD:00003F74                 Elf32_Dyn <13h, <8>>    ; DT_RELENT
LOAD:00003F7C                 Elf32_Dyn <1Eh, <8>>    ; DT_FLAGS
LOAD:00003F84                 Elf32_Dyn <6FFFFFFBh, <8000001h>> ; DT_FLAGS_1
LOAD:00003F8C                 Elf32_Dyn <6FFFFFFEh, <35Ch>> ; DT_VERNEED
LOAD:00003F94                 Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
LOAD:00003F9C                 Elf32_Dyn <6FFFFFF0h, <34Ah>> ; DT_VERSYM
LOAD:00003FA4                 Elf32_Dyn <6FFFFFFAh, <4>> ; DT_RELCOUNT
LOAD:00003FAC                 Elf32_Dyn <0>           ; DT_NULL
LOAD:00003FB4                 db    0
LOAD:00003FB5                 db    0
LOAD:00003FB6                 db    0
LOAD:00003FB7                 db    0
LOAD:00003FB8                 db    0
LOAD:00003FB9                 db    0
LOAD:00003FBA                 db    0
LOAD:00003FBB                 db    0
LOAD:00003FBC                 db    0
LOAD:00003FBD                 db    0
LOAD:00003FBE                 db    0
LOAD:00003FBF                 db    0
LOAD:00003FC0                 db    0
LOAD:00003FC1                 db    0
LOAD:00003FC2                 db    0
LOAD:00003FC3                 db    0
LOAD:00003FC4                 db    0
LOAD:00003FC5                 db    0
LOAD:00003FC6                 db    0
LOAD:00003FC7                 db    0
LOAD:00003FC8                 db    0
LOAD:00003FC9                 db    0
LOAD:00003FCA                 db    0
LOAD:00003FCB                 db    0
LOAD:00003FCC                 db    0
LOAD:00003FCD                 db    0
LOAD:00003FCE                 db    0
LOAD:00003FCF                 db    0
LOAD:00003FD0                 db    0
LOAD:00003FD1                 db    0
LOAD:00003FD2                 db    0
LOAD:00003FD3                 db    0
LOAD:00003FD3 LOAD            ends
LOAD:00003FD3
.got:00003FD4 ; ===========================================================================
.got:00003FD4
.got:00003FD4 ; Segment type: Pure data
.got:00003FD4 ; Segment permissions: Read/Write
.got:00003FD4 _got            segment dword public 'DATA' use32
.got:00003FD4                 assume cs:_got
.got:00003FD4                 ;org 3FD4h
.got:00003FD4 _GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC
.got:00003FD4                                         ; DATA XREF: _init_proc+D↑o
.got:00003FD4                                         ; _start+14↑o ...
.got:00003FD8                 dd 0
.got:00003FDC                 dd 0
.got:00003FE0 __libc_start_main_ptr dd offset __libc_start_main
.got:00003FE0                                         ; DATA XREF: ___libc_start_main↑r
.got:00003FE4 free_ptr        dd offset free          ; DATA XREF: _free↑r
.got:00003FE8 malloc_ptr      dd offset malloc        ; DATA XREF: _malloc↑r
.got:00003FEC _ITM_deregisterTMCloneTable_ptr dd offset _ITM_deregisterTMCloneTable
.got:00003FEC                                         ; DATA XREF: deregister_tm_clones+1B↑r
.got:00003FF0 __cxa_finalize_ptr dd offset __cxa_finalize
.got:00003FF0                                         ; DATA XREF: ___cxa_finalize↑r
.got:00003FF0                                         ; __do_global_dtors_aux+1F↑r
.got:00003FF4 __gmon_start___ptr dd offset __gmon_start__
.got:00003FF4                                         ; DATA XREF: _init_proc+13↑r
.got:00003FF8 main_ptr        dd offset main          ; DATA XREF: _start+20↑r
.got:00003FFC _ITM_registerTMCloneTable_ptr dd offset _ITM_registerTMCloneTable
.got:00003FFC                                         ; DATA XREF: register_tm_clones+2E↑r
.got:00003FFC _got            ends
.got:00003FFC
.data:00004000 ; ===========================================================================
.data:00004000
.data:00004000 ; Segment type: Pure data
.data:00004000 ; Segment permissions: Read/Write
.data:00004000 _data           segment dword public 'DATA' use32
.data:00004000                 assume cs:_data
.data:00004000                 ;org 4000h
.data:00004000                 public __data_start ; weak
.data:00004000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:00004000                                         ; data_start
.data:00004001                 db    0
.data:00004002                 db    0
.data:00004003                 db    0
.data:00004004                 public __dso_handle
.data:00004004 __dso_handle    dd offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+2C↑r
.data:00004004                                         ; .data:__dso_handle↓o
.data:00004004 _data           ends
.data:00004004
.bss:00004008 ; ===========================================================================
.bss:00004008
.bss:00004008 ; Segment type: Uninitialized
.bss:00004008 ; Segment permissions: Read/Write
.bss:00004008 _bss            segment byte public 'BSS' use32
.bss:00004008                 assume cs:_bss
.bss:00004008                 ;org 4008h
.bss:00004008                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00004008                 public __bss_start
.bss:00004008 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones+B↑o
.bss:00004008                                         ; deregister_tm_clones+11↑o ...
.bss:00004008                                         ; Alternative name is '__TMC_END__'
.bss:00004008                                         ; completed.0
.bss:00004008                                         ; _edata
.bss:00004009                 align 4
.bss:00004009 _bss            ends
.bss:00004009
.prgend:0000400C ; ===========================================================================
.prgend:0000400C
.prgend:0000400C ; Segment type: Zero-length
.prgend:0000400C _prgend         segment byte public '' use32
.prgend:0000400C _end            label byte
.prgend:0000400C _prgend         ends
.prgend:0000400C
extern:00004010 ; ===========================================================================
extern:00004010
extern:00004010 ; Segment type: Externs
extern:00004010 ; extern
extern:00004010 ; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00004010                 extrn __libc_start_main:near
extern:00004010                                         ; CODE XREF: ___libc_start_main↑j
extern:00004010                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00004014 ; void free(void *ptr)
extern:00004014                 extrn free:near         ; CODE XREF: _free↑j
extern:00004014                                         ; DATA XREF: .got:free_ptr↑o
extern:00004018 ; int __cdecl _cxa_finalize(void *)
extern:00004018                 extrn __cxa_finalize:near ; weak
extern:00004018                                         ; CODE XREF: ___cxa_finalize↑j
extern:00004018                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000401C ; void *malloc(size_t size)
extern:0000401C                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000401C                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00004020                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00004020                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00004024                 extrn __gmon_start__ ; weak
extern:00004024                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00004028                 extrn _ITM_registerTMCloneTable ; weak
extern:00004028                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00004028
extern:00004028
extern:00004028                 end _start
