.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : 2D28A96038ECEA001105825E67540FC3F1F7A8212305937AE5E3364BCE87AA64
.text:08000000 ; Input MD5    : CF3C47E4D0B6DCB9F1D0AC778F1AC016
.text:08000000 ; Input CRC32  : 51CDE63A
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/test-0019-1.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : 'test-0019-1.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: noreturn bp-based frame
.text:08000000
.text:08000000                 public reach_error
.text:08000000 reach_error     proc near               ; DATA XREF: .eh_frame:08000164↓o
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_ax
.text:0800000C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000011                 lea     edx, (__PRETTY_FUNCTION___0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "reach_error"
.text:08000017                 push    edx             ; function
.text:08000018                 push    3               ; line
.text:0800001A                 lea     edx, (aTest00191C - _GLOBAL_OFFSET_TABLE_)[eax] ; "test-0019-1.c"
.text:08000020                 push    edx             ; file
.text:08000021                 lea     edx, (a0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "0"
.text:08000027                 push    edx             ; assertion
.text:08000028                 mov     ebx, eax
.text:0800002A                 call    __assert_fail   ; PIC mode
.text:0800002A ; } // starts at 8000000
.text:0800002A reach_error     endp
.text:0800002A
.text:0800002F
.text:0800002F ; =============== S U B R O U T I N E =======================================
.text:0800002F
.text:0800002F ; Attributes: bp-based frame
.text:0800002F
.text:0800002F alloc_data      proc near               ; CODE XREF: main+2D↓p
.text:0800002F                                         ; DATA XREF: .eh_frame:08000180↓o
.text:0800002F
.text:0800002F var_4           = dword ptr -4
.text:0800002F arg_0           = dword ptr  8
.text:0800002F
.text:0800002F ; __unwind {
.text:0800002F                 push    ebp
.text:08000030                 mov     ebp, esp
.text:08000032                 push    ebx
.text:08000033                 sub     esp, 4
.text:08000036                 call    __x86_get_pc_thunk_bx
.text:0800003B                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000041                 sub     esp, 0Ch
.text:08000044                 push    10h             ; size
.text:08000046                 call    malloc          ; PIC mode
.text:0800004B                 add     esp, 10h
.text:0800004E                 mov     edx, eax
.text:08000050                 mov     eax, [ebp+arg_0]
.text:08000053                 mov     [eax], edx
.text:08000055                 sub     esp, 0Ch
.text:08000058                 push    18h             ; size
.text:0800005A                 call    malloc          ; PIC mode
.text:0800005F                 add     esp, 10h
.text:08000062                 mov     edx, eax
.text:08000064                 mov     eax, [ebp+arg_0]
.text:08000067                 mov     [eax+4], edx
.text:0800006A                 nop
.text:0800006B                 mov     ebx, [ebp+var_4]
.text:0800006E                 leave
.text:0800006F                 retn
.text:0800006F ; } // starts at 800002F
.text:0800006F alloc_data      endp
.text:0800006F
.text:08000070
.text:08000070 ; =============== S U B R O U T I N E =======================================
.text:08000070
.text:08000070 ; Attributes: bp-based frame
.text:08000070
.text:08000070 free_data       proc near               ; CODE XREF: main+3E↓p
.text:08000070                                         ; DATA XREF: .eh_frame:080001A4↓o
.text:08000070
.text:08000070 ptr             = dword ptr -10h
.text:08000070 var_C           = dword ptr -0Ch
.text:08000070 var_4           = dword ptr -4
.text:08000070 arg_0           = dword ptr  8
.text:08000070 arg_4           = dword ptr  0Ch
.text:08000070
.text:08000070 ; __unwind {
.text:08000070                 push    ebp
.text:08000071                 mov     ebp, esp
.text:08000073                 push    ebx
.text:08000074                 sub     esp, 14h
.text:08000077                 call    __x86_get_pc_thunk_bx
.text:0800007C                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000082                 mov     eax, [ebp+arg_0]
.text:08000085                 mov     [ebp+ptr], eax
.text:08000088                 mov     eax, [ebp+arg_4]
.text:0800008B                 mov     [ebp+var_C], eax
.text:0800008E                 mov     eax, [ebp+ptr]
.text:08000091                 cmp     eax, [ebp+var_C]
.text:08000094                 jz      short loc_80000B4
.text:08000096                 sub     esp, 0Ch
.text:08000099                 push    [ebp+ptr]       ; ptr
.text:0800009C                 call    free            ; PIC mode
.text:080000A1                 add     esp, 10h
.text:080000A4                 sub     esp, 0Ch
.text:080000A7                 push    [ebp+var_C]     ; ptr
.text:080000AA                 call    free            ; PIC mode
.text:080000AF                 add     esp, 10h
.text:080000B2                 jmp     short loc_80000B5
.text:080000B4 ; ---------------------------------------------------------------------------
.text:080000B4
.text:080000B4 loc_80000B4:                            ; CODE XREF: free_data+24↑j
.text:080000B4                 nop
.text:080000B5
.text:080000B5 loc_80000B5:                            ; CODE XREF: free_data+42↑j
.text:080000B5                 mov     ebx, [ebp+var_4]
.text:080000B8                 leave
.text:080000B9                 retn
.text:080000B9 ; } // starts at 8000070
.text:080000B9 free_data       endp
.text:080000B9
.text:080000BA
.text:080000BA ; =============== S U B R O U T I N E =======================================
.text:080000BA
.text:080000BA ; Attributes: bp-based frame fuzzy-sp
.text:080000BA
.text:080000BA ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:080000BA                 public main
.text:080000BA main            proc near               ; DATA XREF: .eh_frame:080001C8↓o
.text:080000BA
.text:080000BA var_14          = dword ptr -14h
.text:080000BA var_10          = dword ptr -10h
.text:080000BA var_C           = dword ptr -0Ch
.text:080000BA var_4           = dword ptr -4
.text:080000BA argc            = dword ptr  8
.text:080000BA argv            = dword ptr  0Ch
.text:080000BA envp            = dword ptr  10h
.text:080000BA
.text:080000BA ; __unwind {
.text:080000BA                 lea     ecx, [esp+4]
.text:080000BE                 and     esp, 0FFFFFFF0h
.text:080000C1                 push    dword ptr [ecx-4]
.text:080000C4                 push    ebp
.text:080000C5                 mov     ebp, esp
.text:080000C7                 push    ecx
.text:080000C8                 sub     esp, 14h
.text:080000CB                 call    __x86_get_pc_thunk_ax
.text:080000D0                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000D5                 mov     eax, large gs:14h
.text:080000DB                 mov     [ebp+var_C], eax
.text:080000DE                 xor     eax, eax
.text:080000E0                 sub     esp, 0Ch
.text:080000E3                 lea     eax, [ebp+var_14]
.text:080000E6                 push    eax
.text:080000E7                 call    alloc_data
.text:080000EC                 add     esp, 10h
.text:080000EF                 sub     esp, 8
.text:080000F2                 push    [ebp+var_10]
.text:080000F5                 push    [ebp+var_14]
.text:080000F8                 call    free_data
.text:080000FD                 add     esp, 10h
.text:08000100                 mov     eax, 0
.text:08000105                 mov     edx, [ebp+var_C]
.text:08000108                 sub     edx, large gs:14h
.text:0800010F                 jz      short loc_8000116
.text:08000111                 call    __stack_chk_fail_local
.text:08000116 ; ---------------------------------------------------------------------------
.text:08000116
.text:08000116 loc_8000116:                            ; CODE XREF: main+55↑j
.text:08000116                 mov     ecx, [ebp+var_4]
.text:08000119                 leave
.text:0800011A                 lea     esp, [ecx-4]
.text:0800011D                 retn
.text:0800011D ; } // starts at 80000BA
.text:0800011D main            endp
.text:0800011D
.text:0800011D _text           ends
.text:0800011D
.data:0800011E ; ===========================================================================
.data:0800011E
.data:0800011E ; Segment type: Zero-length
.data:0800011E ; Segment permissions: Read/Write
.data:0800011E _data           segment byte public 'DATA' use32
.data:0800011E _data           ends
.data:0800011E
.bss:0800011F ; ===========================================================================
.bss:0800011F
.bss:0800011F ; Segment type: Zero-length
.bss:0800011F ; Segment permissions: Read/Write
.bss:0800011F _bss            segment byte public 'BSS' use32
.bss:0800011F _bss            ends
.bss:0800011F
.rodata:08000120 ; ===========================================================================
.rodata:08000120
.rodata:08000120 ; Segment type: Pure data
.rodata:08000120 ; Segment permissions: Read
.rodata:08000120 _rodata         segment dword public 'CONST' use32
.rodata:08000120                 assume cs:_rodata
.rodata:08000120                 ;org 8000120h
.rodata:08000120 aTest00191C     db 'test-0019-1.c',0    ; DATA XREF: reach_error+1A↑o
.rodata:0800012E a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:08000130 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:08000130                                         ; DATA XREF: reach_error+11↑o
.rodata:08000130 _rodata         ends
.rodata:08000130
.text.__x86.get_pc_thunk.ax:0800013C ; ===========================================================================
.text.__x86.get_pc_thunk.ax:0800013C
.text.__x86.get_pc_thunk.ax:0800013C ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:0800013C ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:0800013C _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:0800013C                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:0800013C                 ;org 800013Ch
.text.__x86.get_pc_thunk.ax:0800013C                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:0800013C
.text.__x86.get_pc_thunk.ax:0800013C ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:0800013C
.text.__x86.get_pc_thunk.ax:0800013C
.text.__x86.get_pc_thunk.ax:0800013C                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:0800013C __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text.__x86.get_pc_thunk.ax:0800013C                                         ; main+11↑p
.text.__x86.get_pc_thunk.ax:0800013C                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.ax:0800013C ; __unwind {
.text.__x86.get_pc_thunk.ax:0800013C                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:0800013F                 retn
.text.__x86.get_pc_thunk.ax:0800013F ; } // starts at 800013C
.text.__x86.get_pc_thunk.ax:0800013F __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:0800013F
.text.__x86.get_pc_thunk.ax:0800013F _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:0800013F
.text.__x86.get_pc_thunk.bx:08000140 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:08000140
.text.__x86.get_pc_thunk.bx:08000140 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:08000140 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:08000140 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:08000140                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000140                 ;org 8000140h
.text.__x86.get_pc_thunk.bx:08000140                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:08000140
.text.__x86.get_pc_thunk.bx:08000140 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:08000140
.text.__x86.get_pc_thunk.bx:08000140
.text.__x86.get_pc_thunk.bx:08000140                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000140 __x86_get_pc_thunk_bx proc near         ; CODE XREF: alloc_data+7↑p
.text.__x86.get_pc_thunk.bx:08000140                                         ; free_data+7↑p
.text.__x86.get_pc_thunk.bx:08000140                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.bx:08000140 ; __unwind {
.text.__x86.get_pc_thunk.bx:08000140                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:08000143                 retn
.text.__x86.get_pc_thunk.bx:08000143 ; } // starts at 8000140
.text.__x86.get_pc_thunk.bx:08000143 __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:08000143
.text.__x86.get_pc_thunk.bx:08000143 _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:08000143
.eh_frame:08000144 ; ===========================================================================
.eh_frame:08000144
.eh_frame:08000144 ; Segment type: Pure data
.eh_frame:08000144 ; Segment permissions: Read
.eh_frame:08000144 _eh_frame       segment dword public 'CONST' use32
.eh_frame:08000144                 assume cs:_eh_frame
.eh_frame:08000144                 ;org 8000144h
.eh_frame:08000144                 db  14h
.eh_frame:08000145                 db    0
.eh_frame:08000146                 db    0
.eh_frame:08000147                 db    0
.eh_frame:08000148                 db    0
.eh_frame:08000149                 db    0
.eh_frame:0800014A                 db    0
.eh_frame:0800014B                 db    0
.eh_frame:0800014C                 db    1
.eh_frame:0800014D                 db  7Ah ; z
.eh_frame:0800014E                 db  52h ; R
.eh_frame:0800014F                 db    0
.eh_frame:08000150                 db    1
.eh_frame:08000151                 db  7Ch ; |
.eh_frame:08000152                 db    8
.eh_frame:08000153                 db    1
.eh_frame:08000154                 db  1Bh
.eh_frame:08000155                 db  0Ch
.eh_frame:08000156                 db    4
.eh_frame:08000157                 db    4
.eh_frame:08000158                 db  88h
.eh_frame:08000159                 db    1
.eh_frame:0800015A                 db    0
.eh_frame:0800015B                 db    0
.eh_frame:0800015C                 db  18h
.eh_frame:0800015D                 db    0
.eh_frame:0800015E                 db    0
.eh_frame:0800015F                 db    0
.eh_frame:08000160                 db  1Ch
.eh_frame:08000161                 db    0
.eh_frame:08000162                 db    0
.eh_frame:08000163                 db    0
.eh_frame:08000164                 dd offset reach_error - $
.eh_frame:08000168                 db  2Fh ; /
.eh_frame:08000169                 db    0
.eh_frame:0800016A                 db    0
.eh_frame:0800016B                 db    0
.eh_frame:0800016C                 db    0
.eh_frame:0800016D                 db  41h ; A
.eh_frame:0800016E                 db  0Eh
.eh_frame:0800016F                 db    8
.eh_frame:08000170                 db  85h
.eh_frame:08000171                 db    2
.eh_frame:08000172                 db  42h ; B
.eh_frame:08000173                 db  0Dh
.eh_frame:08000174                 db    5
.eh_frame:08000175                 db  44h ; D
.eh_frame:08000176                 db  83h
.eh_frame:08000177                 db    3
.eh_frame:08000178                 db  20h
.eh_frame:08000179                 db    0
.eh_frame:0800017A                 db    0
.eh_frame:0800017B                 db    0
.eh_frame:0800017C                 db  38h ; 8
.eh_frame:0800017D                 db    0
.eh_frame:0800017E                 db    0
.eh_frame:0800017F                 db    0
.eh_frame:08000180                 dd offset alloc_data - $
.eh_frame:08000184                 db  41h ; A
.eh_frame:08000185                 db    0
.eh_frame:08000186                 db    0
.eh_frame:08000187                 db    0
.eh_frame:08000188                 db    0
.eh_frame:08000189                 db  41h ; A
.eh_frame:0800018A                 db  0Eh
.eh_frame:0800018B                 db    8
.eh_frame:0800018C                 db  85h
.eh_frame:0800018D                 db    2
.eh_frame:0800018E                 db  42h ; B
.eh_frame:0800018F                 db  0Dh
.eh_frame:08000190                 db    5
.eh_frame:08000191                 db  44h ; D
.eh_frame:08000192                 db  83h
.eh_frame:08000193                 db    3
.eh_frame:08000194                 db  79h ; y
.eh_frame:08000195                 db 0C5h
.eh_frame:08000196                 db 0C3h
.eh_frame:08000197                 db  0Ch
.eh_frame:08000198                 db    4
.eh_frame:08000199                 db    4
.eh_frame:0800019A                 db    0
.eh_frame:0800019B                 db    0
.eh_frame:0800019C                 db  20h
.eh_frame:0800019D                 db    0
.eh_frame:0800019E                 db    0
.eh_frame:0800019F                 db    0
.eh_frame:080001A0                 db  5Ch ; \
.eh_frame:080001A1                 db    0
.eh_frame:080001A2                 db    0
.eh_frame:080001A3                 db    0
.eh_frame:080001A4                 dd offset free_data - $
.eh_frame:080001A8                 db  4Ah ; J
.eh_frame:080001A9                 db    0
.eh_frame:080001AA                 db    0
.eh_frame:080001AB                 db    0
.eh_frame:080001AC                 db    0
.eh_frame:080001AD                 db  41h ; A
.eh_frame:080001AE                 db  0Eh
.eh_frame:080001AF                 db    8
.eh_frame:080001B0                 db  85h
.eh_frame:080001B1                 db    2
.eh_frame:080001B2                 db  42h ; B
.eh_frame:080001B3                 db  0Dh
.eh_frame:080001B4                 db    5
.eh_frame:080001B5                 db  44h ; D
.eh_frame:080001B6                 db  83h
.eh_frame:080001B7                 db    3
.eh_frame:080001B8                 db    2
.eh_frame:080001B9                 db  42h ; B
.eh_frame:080001BA                 db 0C5h
.eh_frame:080001BB                 db 0C3h
.eh_frame:080001BC                 db  0Ch
.eh_frame:080001BD                 db    4
.eh_frame:080001BE                 db    4
.eh_frame:080001BF                 db    0
.eh_frame:080001C0                 db  28h ; (
.eh_frame:080001C1                 db    0
.eh_frame:080001C2                 db    0
.eh_frame:080001C3                 db    0
.eh_frame:080001C4                 db  80h
.eh_frame:080001C5                 db    0
.eh_frame:080001C6                 db    0
.eh_frame:080001C7                 db    0
.eh_frame:080001C8                 dd offset main - $
.eh_frame:080001CC                 db  64h ; d
.eh_frame:080001CD                 db    0
.eh_frame:080001CE                 db    0
.eh_frame:080001CF                 db    0
.eh_frame:080001D0                 db    0
.eh_frame:080001D1                 db  44h ; D
.eh_frame:080001D2                 db  0Ch
.eh_frame:080001D3                 db    1
.eh_frame:080001D4                 db    0
.eh_frame:080001D5                 db  49h ; I
.eh_frame:080001D6                 db  10h
.eh_frame:080001D7                 db    5
.eh_frame:080001D8                 db    2
.eh_frame:080001D9                 db  75h ; u
.eh_frame:080001DA                 db    0
.eh_frame:080001DB                 db  41h ; A
.eh_frame:080001DC                 db  0Fh
.eh_frame:080001DD                 db    3
.eh_frame:080001DE                 db  75h ; u
.eh_frame:080001DF                 db  7Ch ; |
.eh_frame:080001E0                 db    6
.eh_frame:080001E1                 db    2
.eh_frame:080001E2                 db  51h ; Q
.eh_frame:080001E3                 db  0Ch
.eh_frame:080001E4                 db    1
.eh_frame:080001E5                 db    0
.eh_frame:080001E6                 db  41h ; A
.eh_frame:080001E7                 db 0C5h
.eh_frame:080001E8                 db  43h ; C
.eh_frame:080001E9                 db  0Ch
.eh_frame:080001EA                 db    4
.eh_frame:080001EB                 db    4
.eh_frame:080001EC                 db  10h
.eh_frame:080001ED                 db    0
.eh_frame:080001EE                 db    0
.eh_frame:080001EF                 db    0
.eh_frame:080001F0                 db 0ACh
.eh_frame:080001F1                 db    0
.eh_frame:080001F2                 db    0
.eh_frame:080001F3                 db    0
.eh_frame:080001F4                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:080001F8                 db    4
.eh_frame:080001F9                 db    0
.eh_frame:080001FA                 db    0
.eh_frame:080001FB                 db    0
.eh_frame:080001FC                 db    0
.eh_frame:080001FD                 db    0
.eh_frame:080001FE                 db    0
.eh_frame:080001FF                 db    0
.eh_frame:08000200                 db  10h
.eh_frame:08000201                 db    0
.eh_frame:08000202                 db    0
.eh_frame:08000203                 db    0
.eh_frame:08000204                 db 0C0h
.eh_frame:08000205                 db    0
.eh_frame:08000206                 db    0
.eh_frame:08000207                 db    0
.eh_frame:08000208                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:0800020C                 db    4
.eh_frame:0800020D                 db    0
.eh_frame:0800020E                 db    0
.eh_frame:0800020F                 db    0
.eh_frame:08000210                 db    0
.eh_frame:08000211                 db    0
.eh_frame:08000212                 db    0
.eh_frame:08000213                 db    0
.eh_frame:08000213 _eh_frame       ends
.eh_frame:08000213
extern:08000214 ; ===========================================================================
extern:08000214
extern:08000214 ; Segment type: Externs
extern:08000214 ; extern
extern:08000214 ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:08000214                 extrn __assert_fail:near
extern:08000214                                         ; CODE XREF: reach_error+2A↑p
extern:08000218 ; void *malloc(size_t size)
extern:08000218                 extrn malloc:near       ; CODE XREF: alloc_data+17↑p
extern:08000218                                         ; alloc_data+2B↑p
extern:0800021C ; void free(void *ptr)
extern:0800021C                 extrn free:near         ; CODE XREF: free_data+2C↑p
extern:0800021C                                         ; free_data+3A↑p
extern:08000220                 extrn __stack_chk_fail_local:near
extern:08000220                                         ; CODE XREF: main+57↑p
extern:08000220
.got:08000224 ; ===========================================================================
.got:08000224
.got:08000224 ; Segment type: Pure data
.got:08000224 ; Segment permissions: Read
.got:08000224 _got            segment dword public 'CONST' use32
.got:08000224                 assume cs:_got
.got:08000224                 ;org 8000224h
.got:08000224 _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: reach_error+C↑o
.got:08000224                                         ; reach_error+11↑o ...
.got:08000224 _got            ends
.got:08000224
.got:08000224
.got:08000224                 end
