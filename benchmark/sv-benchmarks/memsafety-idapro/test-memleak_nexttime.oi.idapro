.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : 46DAE07CEA78C1E6398B853802349E0FEE97B32AB378DB2A27C9E7FEA4353029
.text:08000000 ; Input MD5    : 75F45099E31DC0BFB2A7633CAFA38340
.text:08000000 ; Input CRC32  : 5580B64F
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/test-memleak_nexttime.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : 'test-memleak_nexttime.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: noreturn bp-based frame
.text:08000000
.text:08000000                 public reach_error
.text:08000000 reach_error     proc near               ; DATA XREF: .eh_frame:08000138↓o
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_ax
.text:0800000C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000011                 lea     edx, (__PRETTY_FUNCTION___0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "reach_error"
.text:08000017                 push    edx             ; function
.text:08000018                 push    3               ; line
.text:0800001A                 lea     edx, (aTestMemleakNex - _GLOBAL_OFFSET_TABLE_)[eax] ; "test-memleak_nexttime.c"
.text:08000020                 push    edx             ; file
.text:08000021                 lea     edx, (a0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "0"
.text:08000027                 push    edx             ; assertion
.text:08000028                 mov     ebx, eax
.text:0800002A                 call    __assert_fail   ; PIC mode
.text:0800002A ; } // starts at 8000000
.text:0800002A reach_error     endp
.text:0800002A
.text:0800002F
.text:0800002F ; =============== S U B R O U T I N E =======================================
.text:0800002F
.text:0800002F ; Attributes: bp-based frame
.text:0800002F
.text:0800002F                 public foo
.text:0800002F foo             proc near               ; CODE XREF: main+28↓p
.text:0800002F                                         ; DATA XREF: .eh_frame:08000154↓o
.text:0800002F
.text:0800002F var_10          = dword ptr -10h
.text:0800002F var_C           = dword ptr -0Ch
.text:0800002F var_4           = dword ptr -4
.text:0800002F
.text:0800002F ; __unwind {
.text:0800002F                 push    ebp
.text:08000030                 mov     ebp, esp
.text:08000032                 push    ebx
.text:08000033                 sub     esp, 14h
.text:08000036                 call    __x86_get_pc_thunk_bx
.text:0800003B                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000041                 mov     eax, large gs:14h
.text:08000047                 mov     [ebp+var_C], eax
.text:0800004A                 xor     eax, eax
.text:0800004C                 sub     esp, 0Ch
.text:0800004F                 push    0Ah             ; size
.text:08000051                 call    malloc          ; PIC mode
.text:08000056                 add     esp, 10h
.text:08000059                 mov     [ebp+var_10], eax
.text:0800005C                 mov     eax, [ebp+var_10]
.text:0800005F                 mov     ds:(a - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:08000065                 nop
.text:08000066                 mov     eax, [ebp+var_C]
.text:08000069                 sub     eax, large gs:14h
.text:08000070                 jz      short loc_8000077
.text:08000072                 call    __stack_chk_fail_local
.text:08000077 ; ---------------------------------------------------------------------------
.text:08000077
.text:08000077 loc_8000077:                            ; CODE XREF: foo+41↑j
.text:08000077                 mov     ebx, [ebp+var_4]
.text:0800007A                 leave
.text:0800007B                 retn
.text:0800007B ; } // starts at 800002F
.text:0800007B foo             endp
.text:0800007B
.text:0800007C
.text:0800007C ; =============== S U B R O U T I N E =======================================
.text:0800007C
.text:0800007C ; Attributes: bp-based frame fuzzy-sp
.text:0800007C
.text:0800007C ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:0800007C                 public main
.text:0800007C main            proc near               ; DATA XREF: .eh_frame:08000178↓o
.text:0800007C
.text:0800007C ptr             = dword ptr -10h
.text:0800007C var_C           = dword ptr -0Ch
.text:0800007C argc            = dword ptr  8
.text:0800007C argv            = dword ptr  0Ch
.text:0800007C envp            = dword ptr  10h
.text:0800007C
.text:0800007C ; __unwind {
.text:0800007C                 lea     ecx, [esp+4]
.text:08000080                 and     esp, 0FFFFFFF0h
.text:08000083                 push    dword ptr [ecx-4]
.text:08000086                 push    ebp
.text:08000087                 mov     ebp, esp
.text:08000089                 push    ebx
.text:0800008A                 push    ecx
.text:0800008B                 sub     esp, 10h
.text:0800008E                 call    __x86_get_pc_thunk_bx
.text:08000093                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000099                 mov     eax, large gs:14h
.text:0800009F                 mov     [ebp+var_C], eax
.text:080000A2                 xor     eax, eax
.text:080000A4                 call    foo
.text:080000A9                 mov     eax, ds:(a - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000AF                 mov     [ebp+ptr], eax
.text:080000B2                 mov     eax, [ebp+ptr]
.text:080000B5                 sub     esp, 0Ch
.text:080000B8                 push    eax             ; ptr
.text:080000B9                 call    free            ; PIC mode
.text:080000BE                 add     esp, 10h
.text:080000C1                 mov     eax, 0
.text:080000C6                 mov     edx, [ebp+var_C]
.text:080000C9                 sub     edx, large gs:14h
.text:080000D0                 jz      short loc_80000D7
.text:080000D2                 call    __stack_chk_fail_local
.text:080000D7 ; ---------------------------------------------------------------------------
.text:080000D7
.text:080000D7 loc_80000D7:                            ; CODE XREF: main+54↑j
.text:080000D7                 lea     esp, [ebp-8]
.text:080000DA                 pop     ecx
.text:080000DB                 pop     ebx
.text:080000DC                 pop     ebp
.text:080000DD                 lea     esp, [ecx-4]
.text:080000E0                 retn
.text:080000E0 ; } // starts at 800007C
.text:080000E0 main            endp
.text:080000E0
.text:080000E0 _text           ends
.text:080000E0
.data:080000E1 ; ===========================================================================
.data:080000E1
.data:080000E1 ; Segment type: Zero-length
.data:080000E1 ; Segment permissions: Read/Write
.data:080000E1 _data           segment byte public 'DATA' use32
.data:080000E1 _data           ends
.data:080000E1
.bss:080000E4 ; ===========================================================================
.bss:080000E4
.bss:080000E4 ; Segment type: Uninitialized
.bss:080000E4 ; Segment permissions: Read/Write
.bss:080000E4 _bss            segment dword public 'BSS' use32
.bss:080000E4                 assume cs:_bss
.bss:080000E4                 ;org 80000E4h
.bss:080000E4                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.bss:080000E4                 public a
.bss:080000E4 a               dd ?                    ; DATA XREF: foo+30↑w
.bss:080000E4                                         ; main+2D↑r
.bss:080000E4 _bss            ends
.bss:080000E4
.rodata:080000E8 ; ===========================================================================
.rodata:080000E8
.rodata:080000E8 ; Segment type: Pure data
.rodata:080000E8 ; Segment permissions: Read
.rodata:080000E8 _rodata         segment dword public 'CONST' use32
.rodata:080000E8                 assume cs:_rodata
.rodata:080000E8                 ;org 80000E8h
.rodata:080000E8 aTestMemleakNex db 'test-memleak_nexttime.c',0
.rodata:080000E8                                         ; DATA XREF: reach_error+1A↑o
.rodata:08000100 a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:08000102                 align 4
.rodata:08000104 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:08000104                                         ; DATA XREF: reach_error+11↑o
.rodata:08000104 _rodata         ends
.rodata:08000104
.text.__x86.get_pc_thunk.ax:08000110 ; ===========================================================================
.text.__x86.get_pc_thunk.ax:08000110
.text.__x86.get_pc_thunk.ax:08000110 ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:08000110 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:08000110 _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:08000110                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000110                 ;org 8000110h
.text.__x86.get_pc_thunk.ax:08000110                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:08000110
.text.__x86.get_pc_thunk.ax:08000110 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:08000110
.text.__x86.get_pc_thunk.ax:08000110
.text.__x86.get_pc_thunk.ax:08000110                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000110 __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text.__x86.get_pc_thunk.ax:08000110                                         ; DATA XREF: .eh_frame:080001AC↓o
.text.__x86.get_pc_thunk.ax:08000110 ; __unwind {
.text.__x86.get_pc_thunk.ax:08000110                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:08000113                 retn
.text.__x86.get_pc_thunk.ax:08000113 ; } // starts at 8000110
.text.__x86.get_pc_thunk.ax:08000113 __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:08000113
.text.__x86.get_pc_thunk.ax:08000113 _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:08000113
.text.__x86.get_pc_thunk.bx:08000114 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:08000114
.text.__x86.get_pc_thunk.bx:08000114 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:08000114 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:08000114 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:08000114                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000114                 ;org 8000114h
.text.__x86.get_pc_thunk.bx:08000114                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:08000114
.text.__x86.get_pc_thunk.bx:08000114 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:08000114
.text.__x86.get_pc_thunk.bx:08000114
.text.__x86.get_pc_thunk.bx:08000114                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000114 __x86_get_pc_thunk_bx proc near         ; CODE XREF: foo+7↑p
.text.__x86.get_pc_thunk.bx:08000114                                         ; main+12↑p
.text.__x86.get_pc_thunk.bx:08000114                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.bx:08000114 ; __unwind {
.text.__x86.get_pc_thunk.bx:08000114                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:08000117                 retn
.text.__x86.get_pc_thunk.bx:08000117 ; } // starts at 8000114
.text.__x86.get_pc_thunk.bx:08000117 __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:08000117
.text.__x86.get_pc_thunk.bx:08000117 _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:08000117
.eh_frame:08000118 ; ===========================================================================
.eh_frame:08000118
.eh_frame:08000118 ; Segment type: Pure data
.eh_frame:08000118 ; Segment permissions: Read
.eh_frame:08000118 _eh_frame       segment dword public 'CONST' use32
.eh_frame:08000118                 assume cs:_eh_frame
.eh_frame:08000118                 ;org 8000118h
.eh_frame:08000118                 db  14h
.eh_frame:08000119                 db    0
.eh_frame:0800011A                 db    0
.eh_frame:0800011B                 db    0
.eh_frame:0800011C                 db    0
.eh_frame:0800011D                 db    0
.eh_frame:0800011E                 db    0
.eh_frame:0800011F                 db    0
.eh_frame:08000120                 db    1
.eh_frame:08000121                 db  7Ah ; z
.eh_frame:08000122                 db  52h ; R
.eh_frame:08000123                 db    0
.eh_frame:08000124                 db    1
.eh_frame:08000125                 db  7Ch ; |
.eh_frame:08000126                 db    8
.eh_frame:08000127                 db    1
.eh_frame:08000128                 db  1Bh
.eh_frame:08000129                 db  0Ch
.eh_frame:0800012A                 db    4
.eh_frame:0800012B                 db    4
.eh_frame:0800012C                 db  88h
.eh_frame:0800012D                 db    1
.eh_frame:0800012E                 db    0
.eh_frame:0800012F                 db    0
.eh_frame:08000130                 db  18h
.eh_frame:08000131                 db    0
.eh_frame:08000132                 db    0
.eh_frame:08000133                 db    0
.eh_frame:08000134                 db  1Ch
.eh_frame:08000135                 db    0
.eh_frame:08000136                 db    0
.eh_frame:08000137                 db    0
.eh_frame:08000138                 dd offset reach_error - $
.eh_frame:0800013C                 db  2Fh ; /
.eh_frame:0800013D                 db    0
.eh_frame:0800013E                 db    0
.eh_frame:0800013F                 db    0
.eh_frame:08000140                 db    0
.eh_frame:08000141                 db  41h ; A
.eh_frame:08000142                 db  0Eh
.eh_frame:08000143                 db    8
.eh_frame:08000144                 db  85h
.eh_frame:08000145                 db    2
.eh_frame:08000146                 db  42h ; B
.eh_frame:08000147                 db  0Dh
.eh_frame:08000148                 db    5
.eh_frame:08000149                 db  44h ; D
.eh_frame:0800014A                 db  83h
.eh_frame:0800014B                 db    3
.eh_frame:0800014C                 db  20h
.eh_frame:0800014D                 db    0
.eh_frame:0800014E                 db    0
.eh_frame:0800014F                 db    0
.eh_frame:08000150                 db  38h ; 8
.eh_frame:08000151                 db    0
.eh_frame:08000152                 db    0
.eh_frame:08000153                 db    0
.eh_frame:08000154                 dd offset foo - $
.eh_frame:08000158                 db  4Dh ; M
.eh_frame:08000159                 db    0
.eh_frame:0800015A                 db    0
.eh_frame:0800015B                 db    0
.eh_frame:0800015C                 db    0
.eh_frame:0800015D                 db  41h ; A
.eh_frame:0800015E                 db  0Eh
.eh_frame:0800015F                 db    8
.eh_frame:08000160                 db  85h
.eh_frame:08000161                 db    2
.eh_frame:08000162                 db  42h ; B
.eh_frame:08000163                 db  0Dh
.eh_frame:08000164                 db    5
.eh_frame:08000165                 db  44h ; D
.eh_frame:08000166                 db  83h
.eh_frame:08000167                 db    3
.eh_frame:08000168                 db    2
.eh_frame:08000169                 db  45h ; E
.eh_frame:0800016A                 db 0C5h
.eh_frame:0800016B                 db 0C3h
.eh_frame:0800016C                 db  0Ch
.eh_frame:0800016D                 db    4
.eh_frame:0800016E                 db    4
.eh_frame:0800016F                 db    0
.eh_frame:08000170                 db  30h ; 0
.eh_frame:08000171                 db    0
.eh_frame:08000172                 db    0
.eh_frame:08000173                 db    0
.eh_frame:08000174                 db  5Ch ; \
.eh_frame:08000175                 db    0
.eh_frame:08000176                 db    0
.eh_frame:08000177                 db    0
.eh_frame:08000178                 dd offset main - $
.eh_frame:0800017C                 db  65h ; e
.eh_frame:0800017D                 db    0
.eh_frame:0800017E                 db    0
.eh_frame:0800017F                 db    0
.eh_frame:08000180                 db    0
.eh_frame:08000181                 db  44h ; D
.eh_frame:08000182                 db  0Ch
.eh_frame:08000183                 db    1
.eh_frame:08000184                 db    0
.eh_frame:08000185                 db  49h ; I
.eh_frame:08000186                 db  10h
.eh_frame:08000187                 db    5
.eh_frame:08000188                 db    2
.eh_frame:08000189                 db  75h ; u
.eh_frame:0800018A                 db    0
.eh_frame:0800018B                 db  42h ; B
.eh_frame:0800018C                 db  0Fh
.eh_frame:0800018D                 db    3
.eh_frame:0800018E                 db  75h ; u
.eh_frame:0800018F                 db  78h ; x
.eh_frame:08000190                 db    6
.eh_frame:08000191                 db  10h
.eh_frame:08000192                 db    3
.eh_frame:08000193                 db    2
.eh_frame:08000194                 db  75h ; u
.eh_frame:08000195                 db  7Ch ; |
.eh_frame:08000196                 db    2
.eh_frame:08000197                 db  50h ; P
.eh_frame:08000198                 db 0C1h
.eh_frame:08000199                 db  0Ch
.eh_frame:0800019A                 db    1
.eh_frame:0800019B                 db    0
.eh_frame:0800019C                 db  41h ; A
.eh_frame:0800019D                 db 0C3h
.eh_frame:0800019E                 db  41h ; A
.eh_frame:0800019F                 db 0C5h
.eh_frame:080001A0                 db  43h ; C
.eh_frame:080001A1                 db  0Ch
.eh_frame:080001A2                 db    4
.eh_frame:080001A3                 db    4
.eh_frame:080001A4                 db  10h
.eh_frame:080001A5                 db    0
.eh_frame:080001A6                 db    0
.eh_frame:080001A7                 db    0
.eh_frame:080001A8                 db  90h
.eh_frame:080001A9                 db    0
.eh_frame:080001AA                 db    0
.eh_frame:080001AB                 db    0
.eh_frame:080001AC                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:080001B0                 db    4
.eh_frame:080001B1                 db    0
.eh_frame:080001B2                 db    0
.eh_frame:080001B3                 db    0
.eh_frame:080001B4                 db    0
.eh_frame:080001B5                 db    0
.eh_frame:080001B6                 db    0
.eh_frame:080001B7                 db    0
.eh_frame:080001B8                 db  10h
.eh_frame:080001B9                 db    0
.eh_frame:080001BA                 db    0
.eh_frame:080001BB                 db    0
.eh_frame:080001BC                 db 0A4h
.eh_frame:080001BD                 db    0
.eh_frame:080001BE                 db    0
.eh_frame:080001BF                 db    0
.eh_frame:080001C0                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:080001C4                 db    4
.eh_frame:080001C5                 db    0
.eh_frame:080001C6                 db    0
.eh_frame:080001C7                 db    0
.eh_frame:080001C8                 db    0
.eh_frame:080001C9                 db    0
.eh_frame:080001CA                 db    0
.eh_frame:080001CB                 db    0
.eh_frame:080001CB _eh_frame       ends
.eh_frame:080001CB
extern:080001CC ; ===========================================================================
extern:080001CC
extern:080001CC ; Segment type: Externs
extern:080001CC ; extern
extern:080001CC ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:080001CC                 extrn __assert_fail:near
extern:080001CC                                         ; CODE XREF: reach_error+2A↑p
extern:080001D0 ; void *malloc(size_t size)
extern:080001D0                 extrn malloc:near       ; CODE XREF: foo+22↑p
extern:080001D4                 extrn __stack_chk_fail_local:near
extern:080001D4                                         ; CODE XREF: foo+43↑p
extern:080001D4                                         ; main+56↑p
extern:080001D8 ; void free(void *ptr)
extern:080001D8                 extrn free:near         ; CODE XREF: main+3D↑p
extern:080001D8
.got:080001DC ; ===========================================================================
.got:080001DC
.got:080001DC ; Segment type: Pure data
.got:080001DC ; Segment permissions: Read
.got:080001DC _got            segment dword public 'CONST' use32
.got:080001DC                 assume cs:_got
.got:080001DC                 ;org 80001DCh
.got:080001DC _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: reach_error+C↑o
.got:080001DC                                         ; reach_error+11↑o ...
.got:080001DC _got            ends
.got:080001DC
.got:080001DC
.got:080001DC                 end
