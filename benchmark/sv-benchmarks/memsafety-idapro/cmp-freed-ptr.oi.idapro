.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : CF4665D7A8419C084F6212A94C54EC3C0F558AC56537F04B3CDBCBDEC272A8F4
.text:08000000 ; Input MD5    : F204C5C5C59AC928DEBC483CF868FB03
.text:08000000 ; Input CRC32  : F4263ACB
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/cmp-freed-ptr.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : 'cmp-freed-ptr.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: bp-based frame fuzzy-sp
.text:08000000
.text:08000000 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:08000000                 public main
.text:08000000 main            proc near               ; DATA XREF: .eh_frame:080000C0↓o
.text:08000000
.text:08000000 var_18          = dword ptr -18h
.text:08000000 ptr             = dword ptr -14h
.text:08000000 var_10          = dword ptr -10h
.text:08000000 var_C           = dword ptr -0Ch
.text:08000000 argc            = dword ptr  8
.text:08000000 argv            = dword ptr  0Ch
.text:08000000 envp            = dword ptr  10h
.text:08000000
.text:08000000 ; __unwind {
.text:08000000                 lea     ecx, [esp+4]
.text:08000004                 and     esp, 0FFFFFFF0h
.text:08000007                 push    dword ptr [ecx-4]
.text:0800000A                 push    ebp
.text:0800000B                 mov     ebp, esp
.text:0800000D                 push    ebx
.text:0800000E                 push    ecx
.text:0800000F                 sub     esp, 10h
.text:08000012                 call    __x86_get_pc_thunk_bx
.text:08000017                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800001D                 mov     [ebp+var_18], 0
.text:08000024                 mov     [ebp+ptr], 0
.text:0800002B                 sub     esp, 0Ch
.text:0800002E                 push    4               ; size
.text:08000030                 call    malloc          ; PIC mode
.text:08000035                 add     esp, 10h
.text:08000038                 mov     [ebp+ptr], eax
.text:0800003B                 mov     eax, [ebp+ptr]
.text:0800003E                 mov     [ebp+var_10], eax
.text:08000041                 sub     esp, 0Ch
.text:08000044                 push    [ebp+ptr]       ; ptr
.text:08000047                 call    free            ; PIC mode
.text:0800004C                 add     esp, 10h
.text:0800004F                 sub     esp, 0Ch
.text:08000052                 push    4               ; size
.text:08000054                 call    malloc          ; PIC mode
.text:08000059                 add     esp, 10h
.text:0800005C                 mov     [ebp+var_18], eax
.text:0800005F                 mov     eax, [ebp+var_18]
.text:08000062                 mov     [ebp+var_C], eax
.text:08000065                 mov     eax, [ebp+var_C]
.text:08000068                 cmp     eax, [ebp+var_10]
.text:0800006B                 jnz     short loc_800007B
.text:0800006D                 sub     esp, 0Ch
.text:08000070                 push    [ebp+var_18]    ; ptr
.text:08000073                 call    free            ; PIC mode
.text:08000078                 add     esp, 10h
.text:0800007B
.text:0800007B loc_800007B:                            ; CODE XREF: main+6B↑j
.text:0800007B                 sub     esp, 0Ch
.text:0800007E                 push    [ebp+var_18]    ; ptr
.text:08000081                 call    free            ; PIC mode
.text:08000086                 add     esp, 10h
.text:08000089                 mov     eax, 0
.text:0800008E                 lea     esp, [ebp-8]
.text:08000091                 pop     ecx
.text:08000092                 pop     ebx
.text:08000093                 pop     ebp
.text:08000094                 lea     esp, [ecx-4]
.text:08000097                 retn
.text:08000097 ; } // starts at 8000000
.text:08000097 main            endp
.text:08000097
.text:08000097 _text           ends
.text:08000097
.data:08000098 ; ===========================================================================
.data:08000098
.data:08000098 ; Segment type: Zero-length
.data:08000098 ; Segment permissions: Read/Write
.data:08000098 _data           segment byte public 'DATA' use32
.data:08000098 _data           ends
.data:08000098
.bss:08000099 ; ===========================================================================
.bss:08000099
.bss:08000099 ; Segment type: Zero-length
.bss:08000099 ; Segment permissions: Read/Write
.bss:08000099 _bss            segment byte public 'BSS' use32
.bss:08000099 _bss            ends
.bss:08000099
.text.__x86.get_pc_thunk.bx:0800009A ; ===========================================================================
.text.__x86.get_pc_thunk.bx:0800009A
.text.__x86.get_pc_thunk.bx:0800009A ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:0800009A ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:0800009A _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:0800009A                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:0800009A                 ;org 800009Ah
.text.__x86.get_pc_thunk.bx:0800009A                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:0800009A
.text.__x86.get_pc_thunk.bx:0800009A ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:0800009A
.text.__x86.get_pc_thunk.bx:0800009A
.text.__x86.get_pc_thunk.bx:0800009A                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:0800009A __x86_get_pc_thunk_bx proc near         ; CODE XREF: main+12↑p
.text.__x86.get_pc_thunk.bx:0800009A                                         ; DATA XREF: .eh_frame:080000F4↓o
.text.__x86.get_pc_thunk.bx:0800009A ; __unwind {
.text.__x86.get_pc_thunk.bx:0800009A                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:0800009D                 retn
.text.__x86.get_pc_thunk.bx:0800009D ; } // starts at 800009A
.text.__x86.get_pc_thunk.bx:0800009D __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:0800009D
.text.__x86.get_pc_thunk.bx:0800009D _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:0800009D
.eh_frame:080000A0 ; ===========================================================================
.eh_frame:080000A0
.eh_frame:080000A0 ; Segment type: Pure data
.eh_frame:080000A0 ; Segment permissions: Read
.eh_frame:080000A0 _eh_frame       segment dword public 'CONST' use32
.eh_frame:080000A0                 assume cs:_eh_frame
.eh_frame:080000A0                 ;org 80000A0h
.eh_frame:080000A0                 db  14h
.eh_frame:080000A1                 db    0
.eh_frame:080000A2                 db    0
.eh_frame:080000A3                 db    0
.eh_frame:080000A4                 db    0
.eh_frame:080000A5                 db    0
.eh_frame:080000A6                 db    0
.eh_frame:080000A7                 db    0
.eh_frame:080000A8                 db    1
.eh_frame:080000A9                 db  7Ah ; z
.eh_frame:080000AA                 db  52h ; R
.eh_frame:080000AB                 db    0
.eh_frame:080000AC                 db    1
.eh_frame:080000AD                 db  7Ch ; |
.eh_frame:080000AE                 db    8
.eh_frame:080000AF                 db    1
.eh_frame:080000B0                 db  1Bh
.eh_frame:080000B1                 db  0Ch
.eh_frame:080000B2                 db    4
.eh_frame:080000B3                 db    4
.eh_frame:080000B4                 db  88h
.eh_frame:080000B5                 db    1
.eh_frame:080000B6                 db    0
.eh_frame:080000B7                 db    0
.eh_frame:080000B8                 db  30h ; 0
.eh_frame:080000B9                 db    0
.eh_frame:080000BA                 db    0
.eh_frame:080000BB                 db    0
.eh_frame:080000BC                 db  1Ch
.eh_frame:080000BD                 db    0
.eh_frame:080000BE                 db    0
.eh_frame:080000BF                 db    0
.eh_frame:080000C0                 dd offset main - $
.eh_frame:080000C4                 db  98h
.eh_frame:080000C5                 db    0
.eh_frame:080000C6                 db    0
.eh_frame:080000C7                 db    0
.eh_frame:080000C8                 db    0
.eh_frame:080000C9                 db  44h ; D
.eh_frame:080000CA                 db  0Ch
.eh_frame:080000CB                 db    1
.eh_frame:080000CC                 db    0
.eh_frame:080000CD                 db  49h ; I
.eh_frame:080000CE                 db  10h
.eh_frame:080000CF                 db    5
.eh_frame:080000D0                 db    2
.eh_frame:080000D1                 db  75h ; u
.eh_frame:080000D2                 db    0
.eh_frame:080000D3                 db  42h ; B
.eh_frame:080000D4                 db  0Fh
.eh_frame:080000D5                 db    3
.eh_frame:080000D6                 db  75h ; u
.eh_frame:080000D7                 db  78h ; x
.eh_frame:080000D8                 db    6
.eh_frame:080000D9                 db  10h
.eh_frame:080000DA                 db    3
.eh_frame:080000DB                 db    2
.eh_frame:080000DC                 db  75h ; u
.eh_frame:080000DD                 db  7Ch ; |
.eh_frame:080000DE                 db    2
.eh_frame:080000DF                 db  83h
.eh_frame:080000E0                 db 0C1h
.eh_frame:080000E1                 db  0Ch
.eh_frame:080000E2                 db    1
.eh_frame:080000E3                 db    0
.eh_frame:080000E4                 db  41h ; A
.eh_frame:080000E5                 db 0C3h
.eh_frame:080000E6                 db  41h ; A
.eh_frame:080000E7                 db 0C5h
.eh_frame:080000E8                 db  43h ; C
.eh_frame:080000E9                 db  0Ch
.eh_frame:080000EA                 db    4
.eh_frame:080000EB                 db    4
.eh_frame:080000EC                 db  10h
.eh_frame:080000ED                 db    0
.eh_frame:080000EE                 db    0
.eh_frame:080000EF                 db    0
.eh_frame:080000F0                 db  50h ; P
.eh_frame:080000F1                 db    0
.eh_frame:080000F2                 db    0
.eh_frame:080000F3                 db    0
.eh_frame:080000F4                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:080000F8                 db    4
.eh_frame:080000F9                 db    0
.eh_frame:080000FA                 db    0
.eh_frame:080000FB                 db    0
.eh_frame:080000FC                 db    0
.eh_frame:080000FD                 db    0
.eh_frame:080000FE                 db    0
.eh_frame:080000FF                 db    0
.eh_frame:080000FF _eh_frame       ends
.eh_frame:080000FF
extern:08000100 ; ===========================================================================
extern:08000100
extern:08000100 ; Segment type: Externs
extern:08000100 ; extern
extern:08000100 ; void *malloc(size_t size)
extern:08000100                 extrn malloc:near       ; CODE XREF: main+30↑p
extern:08000100                                         ; main+54↑p
extern:08000104 ; void free(void *ptr)
extern:08000104                 extrn free:near         ; CODE XREF: main+47↑p
extern:08000104                                         ; main+73↑p ...
extern:08000104
.got:08000108 ; ===========================================================================
.got:08000108
.got:08000108 ; Segment type: Pure data
.got:08000108 ; Segment permissions: Read
.got:08000108 _got            segment dword public 'CONST' use32
.got:08000108                 assume cs:_got
.got:08000108                 ;org 8000108h
.got:08000108 _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: main+17↑o
.got:08000108 _got            ends
.got:08000108
.got:08000108
.got:08000108                 end
