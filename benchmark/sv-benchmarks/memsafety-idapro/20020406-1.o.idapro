LOAD:00000000 ;
LOAD:00000000 ; +-------------------------------------------------------------------------+
LOAD:00000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:00000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:00000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:00000000 ; |                              Virginia Tech                              |
LOAD:00000000 ; +-------------------------------------------------------------------------+
LOAD:00000000 ;
LOAD:00000000 ; Input SHA256 : 851EE45776400E5153F590D4064C79EBB36BDEF5A47300FE7A35FAE511D044E7
LOAD:00000000 ; Input MD5    : 842ABA45E9FCBC899BF3129FF742080C
LOAD:00000000 ; Input CRC32  : 8DBDCDBE
LOAD:00000000
LOAD:00000000 ; File Name   : /home/cindy/Documents/Workspace/sv-benchmarks/c/bin/memsafety/20020406-1.o
LOAD:00000000 ; Format      : ELF for Intel 386 (Shared object)
LOAD:00000000 ; Interpreter '/lib/ld-linux.so.2'
LOAD:00000000 ; Needed Library 'libc.so.6'
LOAD:00000000 ;
LOAD:00000000 ; Source File : 'Scrt1.o'
LOAD:00000000 ; Source File : 'crtstuff.c'
LOAD:00000000 ; Source File : '20020406-1.c'
LOAD:00000000 ; Source File : 'crtstuff.c'
LOAD:00000000
LOAD:00000000                 .686p
LOAD:00000000                 .mmx
LOAD:00000000                 .model flat
LOAD:00000000 .intel_syntax noprefix
LOAD:00000000
LOAD:00000000 ; ===========================================================================
LOAD:00000000
LOAD:00000000 ; Segment type: Pure data
LOAD:00000000 ; Segment permissions: Read
LOAD:00000000 LOAD            segment mempage public 'DATA' use32
LOAD:00000000                 assume cs:LOAD
LOAD:00000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000021C↓o
LOAD:00000000                                         ; LOAD:0000022C↓o ...
LOAD:00000000                                         ; File format: \x7FELF
LOAD:00000004                 db 1                    ; File class: 32-bit
LOAD:00000005                 db 1                    ; Data encoding: little-endian
LOAD:00000006                 db 1                    ; File version
LOAD:00000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:00000008                 db 0                    ; ABI Version
LOAD:00000009                 db 7 dup(0)             ; Padding
LOAD:00000010                 dw 3                    ; File type: Shared object
LOAD:00000012                 dw 3                    ; Machine: Intel 386
LOAD:00000014                 dd 1                    ; File version
LOAD:00000018                 dd offset _start        ; Entry point
LOAD:0000001C                 dd 34h                  ; PHT file offset
LOAD:00000020                 dd 37ACh                ; SHT file offset
LOAD:00000024                 dd 0                    ; Processor-specific flags
LOAD:00000028                 dw 34h                  ; ELF header size
LOAD:0000002A                 dw 20h                  ; PHT entry size
LOAD:0000002C                 dw 0Bh                  ; Number of entries in PHT
LOAD:0000002E                 dw 28h                  ; SHT entry size
LOAD:00000030                 dw 1Dh                  ; Number of entries in SHT
LOAD:00000032                 dw 1Ch                  ; SHT entry index for string table
LOAD:00000034 ; ELF32 Program Header
LOAD:00000034 ; PHT Entry 0
LOAD:00000034 dword_34        dd 6                    ; DATA XREF: LOAD:0000003C↓o
LOAD:00000034                                         ; Type: PHDR
LOAD:00000038                 dd 34h                  ; File offset
LOAD:0000003C                 dd offset dword_34      ; Virtual address
LOAD:00000040                 dd 34h                  ; Physical address
LOAD:00000044                 dd 160h                 ; Size in file image
LOAD:00000048                 dd 160h                 ; Size in memory image
LOAD:0000004C                 dd 4                    ; Flags
LOAD:00000050                 dd 4                    ; Alignment
LOAD:00000054 ; PHT Entry 1
LOAD:00000054                 dd 3                    ; Type: INTERP
LOAD:00000058                 dd 194h                 ; File offset
LOAD:0000005C                 dd offset aLibLdLinuxSo2 ; Virtual address
LOAD:00000060                 dd 194h                 ; Physical address
LOAD:00000064                 dd 13h                  ; Size in file image
LOAD:00000068                 dd 13h                  ; Size in memory image
LOAD:0000006C                 dd 4                    ; Flags
LOAD:00000070                 dd 1                    ; Alignment
LOAD:00000074 ; PHT Entry 2
LOAD:00000074                 dd 1                    ; Type: LOAD
LOAD:00000078                 dd 0                    ; File offset
LOAD:0000007C                 dd 0                    ; Virtual address
LOAD:00000080                 dd 0                    ; Physical address
LOAD:00000084                 dd 484h                 ; Size in file image
LOAD:00000088                 dd 484h                 ; Size in memory image
LOAD:0000008C                 dd 4                    ; Flags
LOAD:00000090                 dd 1000h                ; Alignment
LOAD:00000094 ; PHT Entry 3
LOAD:00000094                 dd 1                    ; Type: LOAD
LOAD:00000098                 dd 1000h                ; File offset
LOAD:0000009C                 dd offset _init_proc    ; Virtual address
LOAD:000000A0                 dd 1000h                ; Physical address
LOAD:000000A4                 dd 700h                 ; Size in file image
LOAD:000000A8                 dd 700h                 ; Size in memory image
LOAD:000000AC                 dd 5                    ; Flags
LOAD:000000B0                 dd 1000h                ; Alignment
LOAD:000000B4 ; PHT Entry 4
LOAD:000000B4                 dd 1                    ; Type: LOAD
LOAD:000000B8                 dd 2000h                ; File offset
LOAD:000000BC                 dd offset _fp_hw        ; Virtual address
LOAD:000000C0                 dd 2000h                ; Physical address
LOAD:000000C4                 dd 298h                 ; Size in file image
LOAD:000000C8                 dd 298h                 ; Size in memory image
LOAD:000000CC                 dd 4                    ; Flags
LOAD:000000D0                 dd 1000h                ; Alignment
LOAD:000000D4 ; PHT Entry 5
LOAD:000000D4                 dd 1                    ; Type: LOAD
LOAD:000000D8                 dd 2EC8h                ; File offset
LOAD:000000DC                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:000000E0                 dd 3EC8h                ; Physical address
LOAD:000000E4                 dd 140h                 ; Size in file image
LOAD:000000E8                 dd 144h                 ; Size in memory image
LOAD:000000EC                 dd 6                    ; Flags
LOAD:000000F0                 dd 1000h                ; Alignment
LOAD:000000F4 ; PHT Entry 6
LOAD:000000F4                 dd 2                    ; Type: DYNAMIC
LOAD:000000F8                 dd 2ED0h                ; File offset
LOAD:000000FC                 dd offset _DYNAMIC      ; Virtual address
LOAD:00000100                 dd 3ED0h                ; Physical address
LOAD:00000104                 dd 0F8h                 ; Size in file image
LOAD:00000108                 dd 0F8h                 ; Size in memory image
LOAD:0000010C                 dd 6                    ; Flags
LOAD:00000110                 dd 4                    ; Alignment
LOAD:00000114 ; PHT Entry 7
LOAD:00000114                 dd 4                    ; Type: NOTE
LOAD:00000118                 dd 1A8h                 ; File offset
LOAD:0000011C                 dd offset dword_1A8     ; Virtual address
LOAD:00000120                 dd 1A8h                 ; Physical address
LOAD:00000124                 dd 44h                  ; Size in file image
LOAD:00000128                 dd 44h                  ; Size in memory image
LOAD:0000012C                 dd 4                    ; Flags
LOAD:00000130                 dd 4                    ; Alignment
LOAD:00000134 ; PHT Entry 8
LOAD:00000134                 dd 6474E550h            ; Type: EH_FRAME
LOAD:00000138                 dd 2024h                ; File offset
LOAD:0000013C                 dd offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000140                 dd 2024h                ; Physical address
LOAD:00000144                 dd 84h                  ; Size in file image
LOAD:00000148                 dd 84h                  ; Size in memory image
LOAD:0000014C                 dd 4                    ; Flags
LOAD:00000150                 dd 4                    ; Alignment
LOAD:00000154 ; PHT Entry 9
LOAD:00000154                 dd 6474E551h            ; Type: STACK
LOAD:00000158                 dd 0                    ; File offset
LOAD:0000015C                 dd 0                    ; Virtual address
LOAD:00000160                 dd 0                    ; Physical address
LOAD:00000164                 dd 0                    ; Size in file image
LOAD:00000168                 dd 0                    ; Size in memory image
LOAD:0000016C                 dd 6                    ; Flags
LOAD:00000170                 dd 10h                  ; Alignment
LOAD:00000174 ; PHT Entry 10
LOAD:00000174                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000178                 dd 2EC8h                ; File offset
LOAD:0000017C                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000180                 dd 3EC8h                ; Physical address
LOAD:00000184                 dd 138h                 ; Size in file image
LOAD:00000188                 dd 138h                 ; Size in memory image
LOAD:0000018C                 dd 4                    ; Flags
LOAD:00000190                 dd 1                    ; Alignment
LOAD:00000194 aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0
LOAD:00000194                                         ; DATA XREF: LOAD:0000005C↑o
LOAD:000001A7                 align 4
LOAD:000001A8 ; ELF Note Entry
LOAD:000001A8 dword_1A8       dd 4                    ; DATA XREF: LOAD:0000011C↑o
LOAD:000001A8                                         ; Name Size
LOAD:000001AC                 dd 14h                  ; Desc Size
LOAD:000001B0                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:000001B4 aGnu            db 'GNU',0              ; Name
LOAD:000001B8                 db 1Fh, 50h, 0D6h, 73h, 76h, 74h, 0C5h, 67h, 0E9h, 4Ah ; Desc
LOAD:000001B8                 db 0E0h, 73h, 2 dup(0E9h), 2, 39h, 8Ch, 25h, 0D9h, 0E6h
LOAD:000001CC ; ELF Note Entry
LOAD:000001CC __abi_tag       dd 4                    ; Name Size
LOAD:000001D0                 dd 10h                  ; Desc Size
LOAD:000001D4                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:000001D8 aGnu_0          db 'GNU',0              ; Name
LOAD:000001DC                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:000001EC ; ELF GNU Hash Table
LOAD:000001EC elf_gnu_hash_nbuckets dd 2
LOAD:000001F0 elf_gnu_hash_symbias dd 0Bh
LOAD:000001F4 elf_gnu_hash_bitmask_nwords dd 1
LOAD:000001F8 elf_gnu_hash_shift dd 5
LOAD:000001FC elf_gnu_hash_indexes dd 20002000h
LOAD:00000200 elf_gnu_hash_bucket dd 0, 0Bh
LOAD:00000208 elf_gnu_hash_chain dd 0C0E34BADh
LOAD:0000020C ; ELF Symbol Table
LOAD:0000020C                 Elf32_Sym <0>
LOAD:0000021C                 Elf32_Sym <offset aLibcStartMain - offset unk_2CC, offset dword_0, 0, \ ; "__libc_start_main"
LOAD:0000021C                            12h, 0, 0>
LOAD:0000022C                 Elf32_Sym <offset aItmDeregistert - offset unk_2CC, offset dword_0, 0,\ ; "_ITM_deregisterTMCloneTable"
LOAD:0000022C                            20h, 0, 0>
LOAD:0000023C                 Elf32_Sym <offset aStackChkFail - offset unk_2CC, offset dword_0, 0, \ ; "__stack_chk_fail"
LOAD:0000023C                            12h, 0, 0>
LOAD:0000024C                 Elf32_Sym <offset aCxaFinalize - offset unk_2CC, offset dword_0, 0, \ ; "__cxa_finalize"
LOAD:0000024C                            22h, 0, 0>
LOAD:0000025C                 Elf32_Sym <offset aMalloc - offset unk_2CC, offset dword_0, 0, 12h, 0,\ ; "malloc"
LOAD:0000025C                            0>
LOAD:0000026C                 Elf32_Sym <offset aGmonStart - offset unk_2CC, offset dword_0, 0, 20h,\ ; "__gmon_start__"
LOAD:0000026C                            0, 0>
LOAD:0000027C                 Elf32_Sym <offset aMemset - offset unk_2CC, offset dword_0, 0, 12h, 0,\ ; "memset"
LOAD:0000027C                            0>
LOAD:0000028C                 Elf32_Sym <offset aItmRegistertmc - offset unk_2CC, offset dword_0, 0,\ ; "_ITM_registerTMCloneTable"
LOAD:0000028C                            20h, 0, 0>
LOAD:0000029C                 Elf32_Sym <offset aAbort - offset unk_2CC, offset dword_0, 0, 12h, 0, \ ; "abort"
LOAD:0000029C                            0>
LOAD:000002AC                 Elf32_Sym <offset aAssertFail - offset unk_2CC, offset dword_0, 0, \ ; "__assert_fail"
LOAD:000002AC                            12h, 0, 0>
LOAD:000002BC                 Elf32_Sym <offset aIoStdinUsed - offset unk_2CC, \ ; "_IO_stdin_used"
LOAD:000002BC                            offset _IO_stdin_used, 4, 11h, 0, 10h>
LOAD:000002CC ; ELF String Table
LOAD:000002CC unk_2CC         db    0                 ; DATA XREF: LOAD:0000021C↑o
LOAD:000002CC                                         ; LOAD:0000022C↑o ...
LOAD:000002CD aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:000002BC↑o
LOAD:000002DC aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:000002AC↑o
LOAD:000002EA aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000024C↑o
LOAD:000002F9 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000025C↑o
LOAD:00000300 aLibcStartMain  db '__libc_start_main',0
LOAD:00000300                                         ; DATA XREF: LOAD:0000021C↑o
LOAD:00000312 aAbort          db 'abort',0            ; DATA XREF: LOAD:0000029C↑o
LOAD:00000318 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000027C↑o
LOAD:0000031F aStackChkFail   db '__stack_chk_fail',0 ; DATA XREF: LOAD:0000023C↑o
LOAD:00000330 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:000003C4↓o
LOAD:0000033A aGlibc20        db 'GLIBC_2.0',0        ; DATA XREF: LOAD:000003D4↓o
LOAD:00000344 aGlibc213       db 'GLIBC_2.1.3',0      ; DATA XREF: LOAD:000003E4↓o
LOAD:00000350 aGlibc24        db 'GLIBC_2.4',0        ; DATA XREF: LOAD:000003F4↓o
LOAD:0000035A aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:00000404↓o
LOAD:00000365 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000365                                         ; DATA XREF: LOAD:0000022C↑o
LOAD:00000381 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000026C↑o
LOAD:00000390 aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:00000390                                         ; DATA XREF: LOAD:0000028C↑o
LOAD:000003AA ; ELF GNU Symbol Version Table
LOAD:000003AA                 dw 0
LOAD:000003AC                 dw 2                    ; __libc_start_main@@GLIBC_2.34
LOAD:000003AE                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:000003B0                 dw 3                    ; __stack_chk_fail@@GLIBC_2.4
LOAD:000003B2                 dw 4                    ; __cxa_finalize@@GLIBC_2.1.3
LOAD:000003B4                 dw 5                    ; malloc@@GLIBC_2.0
LOAD:000003B6                 dw 1                    ; global symbol: __gmon_start__
LOAD:000003B8                 dw 5                    ; memset@@GLIBC_2.0
LOAD:000003BA                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:000003BC                 dw 5                    ; abort@@GLIBC_2.0
LOAD:000003BE                 dw 5                    ; __assert_fail@@GLIBC_2.0
LOAD:000003C0                 dw 1                    ; global symbol: _IO_stdin_used
LOAD:000003C2                 dw 0
LOAD:000003C4 ; ELF GNU Symbol Version Requirements
LOAD:000003C4                 Elf32_Verneed <1, 4, offset aLibcSo6 - offset unk_2CC, 10h, 0> ; "libc.so.6"
LOAD:000003D4                 Elf32_Vernaux <0D696910h, 0, 5, offset aGlibc20 - offset unk_2CC, 10h> ; "GLIBC_2.0"
LOAD:000003E4                 Elf32_Vernaux <9691F73h, 0, 4, offset aGlibc213 - offset unk_2CC, 10h> ; "GLIBC_2.1.3"
LOAD:000003F4                 Elf32_Vernaux <0D696914h, 0, 3, offset aGlibc24 - offset unk_2CC, 10h> ; "GLIBC_2.4"
LOAD:00000404                 Elf32_Vernaux <69691B4h, 0, 2, offset aGlibc234 - offset unk_2CC, 0> ; "GLIBC_2.34"
LOAD:00000414 ; ELF REL Relocation Table
LOAD:00000414                 Elf32_Rel <3EC8h, 8>    ; R_386_RELATIVE
LOAD:0000041C                 Elf32_Rel <3ECCh, 8>    ; R_386_RELATIVE
LOAD:00000424                 Elf32_Rel <3FF8h, 8>    ; R_386_RELATIVE
LOAD:0000042C                 Elf32_Rel <4004h, 8>    ; R_386_RELATIVE
LOAD:00000434                 Elf32_Rel <3FECh, 206h> ; R_386_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:0000043C                 Elf32_Rel <3FF0h, 406h> ; R_386_GLOB_DAT __cxa_finalize
LOAD:00000444                 Elf32_Rel <3FF4h, 606h> ; R_386_GLOB_DAT __gmon_start__
LOAD:0000044C                 Elf32_Rel <3FFCh, 806h> ; R_386_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000454 ; ELF JMPREL Relocation Table
LOAD:00000454                 Elf32_Rel <3FD4h, 107h> ; R_386_JMP_SLOT __libc_start_main
LOAD:0000045C                 Elf32_Rel <3FD8h, 307h> ; R_386_JMP_SLOT __stack_chk_fail
LOAD:00000464                 Elf32_Rel <3FDCh, 507h> ; R_386_JMP_SLOT malloc
LOAD:0000046C                 Elf32_Rel <3FE0h, 707h> ; R_386_JMP_SLOT memset
LOAD:00000474                 Elf32_Rel <3FE4h, 907h> ; R_386_JMP_SLOT abort
LOAD:0000047C                 Elf32_Rel <3FE8h, 0A07h> ; R_386_JMP_SLOT __assert_fail
LOAD:0000047C LOAD            ends
LOAD:0000047C
.init:00001000 ; ===========================================================================
.init:00001000
.init:00001000 ; Segment type: Pure code
.init:00001000 ; Segment permissions: Read/Execute
.init:00001000 _init           segment dword public 'CODE' use32
.init:00001000                 assume cs:_init
.init:00001000                 ;org 1000h
.init:00001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00001000
.init:00001000 ; =============== S U B R O U T I N E =======================================
.init:00001000
.init:00001000
.init:00001000                 public _init_proc
.init:00001000 _init_proc      proc near               ; DATA XREF: LOAD:0000009C↑o
.init:00001000                 endbr32                 ; _init
.init:00001004                 push    ebx
.init:00001005                 sub     esp, 8
.init:00001008                 call    __x86_get_pc_thunk_bx
.init:0000100D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.init:00001013                 mov     eax, ds:(__gmon_start___ptr - 3FC8h)[ebx]
.init:00001019                 test    eax, eax
.init:0000101B                 jz      short loc_101F
.init:0000101D                 call    eax
.init:0000101F
.init:0000101F loc_101F:                               ; CODE XREF: _init_proc+1B↑j
.init:0000101F                 add     esp, 8
.init:00001022                 pop     ebx
.init:00001023                 retn
.init:00001023 _init_proc      endp
.init:00001023
.init:00001023 _init           ends
.init:00001023
LOAD:00001024 ; ===========================================================================
LOAD:00001024
LOAD:00001024 ; Segment type: Pure code
LOAD:00001024 ; Segment permissions: Read/Execute
LOAD:00001024 LOAD            segment mempage public 'CODE' use32
LOAD:00001024                 assume cs:LOAD
LOAD:00001024                 ;org 1024h
LOAD:00001024                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00001024                 align 10h
LOAD:00001024 LOAD            ends
LOAD:00001024
.plt:00001030 ; ===========================================================================
.plt:00001030
.plt:00001030 ; Segment type: Pure code
.plt:00001030 ; Segment permissions: Read/Execute
.plt:00001030 _plt            segment para public 'CODE' use32
.plt:00001030                 assume cs:_plt
.plt:00001030                 ;org 1030h
.plt:00001030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00001030
.plt:00001030 ; =============== S U B R O U T I N E =======================================
.plt:00001030
.plt:00001030
.plt:00001030 sub_1030        proc near               ; CODE XREF: .plt:0000104B↓j
.plt:00001030                                         ; .plt:0000105B↓j ...
.plt:00001030 ; __unwind {
.plt:00001030                 push    dword ptr [ebx+4]
.plt:00001036                 jmp     dword ptr [ebx+8]
.plt:00001036 sub_1030        endp
.plt:00001036
.plt:00001036 ; ---------------------------------------------------------------------------
.plt:0000103C                 align 10h
.plt:00001040
.plt:00001040 ; =============== S U B R O U T I N E =======================================
.plt:00001040
.plt:00001040 ; Attributes: thunk
.plt:00001040
.plt:00001040 ; int __cdecl __libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
.plt:00001040 ___libc_start_main proc near            ; CODE XREF: _start+26↓p
.plt:00001040
.plt:00001040 main            = dword ptr  4
.plt:00001040 argc            = dword ptr  8
.plt:00001040 ubp_av          = dword ptr  0Ch
.plt:00001040 init            = dword ptr  10h
.plt:00001040 fini            = dword ptr  14h
.plt:00001040 rtld_fini       = dword ptr  18h
.plt:00001040 stack_end       = dword ptr  1Ch
.plt:00001040
.plt:00001040                 jmp     ds:__libc_start_main_ptr ; PIC mode
.plt:00001040 ___libc_start_main endp
.plt:00001040
.plt:00001046 ; ---------------------------------------------------------------------------
.plt:00001046                 push    0
.plt:0000104B                 jmp     sub_1030
.plt:00001050
.plt:00001050 ; =============== S U B R O U T I N E =======================================
.plt:00001050
.plt:00001050 ; Attributes: noreturn thunk
.plt:00001050
.plt:00001050 ___stack_chk_fail proc near             ; CODE XREF: __stack_chk_fail_local+13↓p
.plt:00001050                 jmp     ds:__stack_chk_fail_ptr ; PIC mode
.plt:00001050 ___stack_chk_fail endp
.plt:00001050
.plt:00001056 ; ---------------------------------------------------------------------------
.plt:00001056                 push    8
.plt:0000105B                 jmp     sub_1030
.plt:00001060
.plt:00001060 ; =============== S U B R O U T I N E =======================================
.plt:00001060
.plt:00001060 ; Attributes: thunk
.plt:00001060
.plt:00001060 ; void *malloc(size_t size)
.plt:00001060 _malloc         proc near               ; CODE XREF: DUPFFnew+17↓p
.plt:00001060                                         ; DUPFFnew+3F↓p
.plt:00001060
.plt:00001060 size            = dword ptr  4
.plt:00001060
.plt:00001060                 jmp     ds:malloc_ptr   ; PIC mode
.plt:00001060 _malloc         endp
.plt:00001060
.plt:00001066 ; ---------------------------------------------------------------------------
.plt:00001066                 push    10h
.plt:0000106B                 jmp     sub_1030
.plt:00001070
.plt:00001070 ; =============== S U B R O U T I N E =======================================
.plt:00001070
.plt:00001070 ; Attributes: thunk
.plt:00001070
.plt:00001070 ; void *memset(void *s, int c, size_t n)
.plt:00001070 _memset         proc near               ; CODE XREF: DUPFFnew+69↓p
.plt:00001070
.plt:00001070 s               = dword ptr  4
.plt:00001070 c               = dword ptr  8
.plt:00001070 n               = dword ptr  0Ch
.plt:00001070
.plt:00001070                 jmp     ds:memset_ptr   ; PIC mode
.plt:00001070 _memset         endp
.plt:00001070
.plt:00001076 ; ---------------------------------------------------------------------------
.plt:00001076                 push    18h
.plt:0000107B                 jmp     sub_1030
.plt:00001080
.plt:00001080 ; =============== S U B R O U T I N E =======================================
.plt:00001080
.plt:00001080 ; Attributes: noreturn thunk
.plt:00001080
.plt:00001080 ; void abort(void)
.plt:00001080 _abort          proc near               ; CODE XREF: DUPFFexgcd:loc_136E↓p
.plt:00001080                 jmp     ds:abort_ptr    ; PIC mode
.plt:00001080 _abort          endp
.plt:00001080
.plt:00001086 ; ---------------------------------------------------------------------------
.plt:00001086                 push    20h ; ' '
.plt:0000108B                 jmp     sub_1030
.plt:00001090
.plt:00001090 ; =============== S U B R O U T I N E =======================================
.plt:00001090
.plt:00001090 ; Attributes: noreturn thunk
.plt:00001090
.plt:00001090 ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00001090 ___assert_fail  proc near               ; CODE XREF: reach_error+2A↓p
.plt:00001090
.plt:00001090 assertion       = dword ptr  4
.plt:00001090 file            = dword ptr  8
.plt:00001090 line            = dword ptr  0Ch
.plt:00001090 function        = dword ptr  10h
.plt:00001090
.plt:00001090                 jmp     ds:__assert_fail_ptr ; PIC mode
.plt:00001090 ___assert_fail  endp
.plt:00001090
.plt:00001096 ; ---------------------------------------------------------------------------
.plt:00001096                 push    28h ; '('
.plt:0000109B                 jmp     sub_1030
.plt:0000109B ; } // starts at 1030
.plt:0000109B _plt            ends
.plt:0000109B
.plt.got:000010A0 ; ===========================================================================
.plt.got:000010A0
.plt.got:000010A0 ; Segment type: Pure code
.plt.got:000010A0 ; Segment permissions: Read/Execute
.plt.got:000010A0 _plt_got        segment qword public 'CODE' use32
.plt.got:000010A0                 assume cs:_plt_got
.plt.got:000010A0                 ;org 10A0h
.plt.got:000010A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:000010A0
.plt.got:000010A0 ; =============== S U B R O U T I N E =======================================
.plt.got:000010A0
.plt.got:000010A0 ; Attributes: thunk
.plt.got:000010A0
.plt.got:000010A0 ; int __cdecl __cxa_finalize(void *)
.plt.got:000010A0 ___cxa_finalize proc near               ; CODE XREF: __do_global_dtors_aux+32↓p
.plt.got:000010A0 ; __unwind {
.plt.got:000010A0                 jmp     ds:__cxa_finalize_ptr ; PIC mode
.plt.got:000010A0 ___cxa_finalize endp
.plt.got:000010A0
.plt.got:000010A0 ; ---------------------------------------------------------------------------
.plt.got:000010A6                 align 4
.plt.got:000010A6 ; } // starts at 10A0
.plt.got:000010A6 _plt_got        ends
.plt.got:000010A6
LOAD:000010A8 ; ===========================================================================
LOAD:000010A8
LOAD:000010A8 ; Segment type: Pure code
LOAD:000010A8 ; Segment permissions: Read/Execute
LOAD:000010A8 LOAD            segment mempage public 'CODE' use32
LOAD:000010A8                 assume cs:LOAD
LOAD:000010A8                 ;org 10A8h
LOAD:000010A8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:000010A8                 align 10h
LOAD:000010A8 LOAD            ends
LOAD:000010A8
.text:000010B0 ; ===========================================================================
.text:000010B0
.text:000010B0 ; Segment type: Pure code
.text:000010B0 ; Segment permissions: Read/Execute
.text:000010B0 _text           segment para public 'CODE' use32
.text:000010B0                 assume cs:_text
.text:000010B0                 ;org 10B0h
.text:000010B0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:000010B0
.text:000010B0 ; =============== S U B R O U T I N E =======================================
.text:000010B0
.text:000010B0 ; Attributes: noreturn fuzzy-sp
.text:000010B0
.text:000010B0                 public _start
.text:000010B0 _start          proc near               ; DATA XREF: LOAD:00000018↑o
.text:000010B0 ; __unwind {
.text:000010B0                 endbr32
.text:000010B4                 xor     ebp, ebp
.text:000010B6                 pop     esi
.text:000010B7                 mov     ecx, esp
.text:000010B9                 and     esp, 0FFFFFFF0h
.text:000010BC                 push    eax
.text:000010BD                 push    esp             ; stack_end
.text:000010BE                 push    edx             ; rtld_fini
.text:000010BF                 call    sub_10DC
.text:000010C4                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000010CA                 push    0               ; fini
.text:000010CC                 push    0               ; init
.text:000010CE                 push    ecx             ; ubp_av
.text:000010CF                 push    esi             ; argc
.text:000010D0                 push    ds:(main_ptr - 3FC8h)[ebx] ; main
.text:000010D6                 call    ___libc_start_main
.text:000010DB                 hlt
.text:000010DB _start          endp
.text:000010DB
.text:000010DC
.text:000010DC ; =============== S U B R O U T I N E =======================================
.text:000010DC
.text:000010DC
.text:000010DC sub_10DC        proc near               ; CODE XREF: _start+F↑p
.text:000010DC                 mov     ebx, [esp+0]
.text:000010DF                 retn
.text:000010DF ; } // starts at 10B0
.text:000010DF sub_10DC        endp
.text:000010DF
.text:000010E0
.text:000010E0 ; =============== S U B R O U T I N E =======================================
.text:000010E0
.text:000010E0
.text:000010E0                 public __x86_get_pc_thunk_bx
.text:000010E0 __x86_get_pc_thunk_bx proc near         ; CODE XREF: _init_proc+8↑p
.text:000010E0                                         ; __do_global_dtors_aux+8↓p ...
.text:000010E0                 mov     ebx, [esp+0]
.text:000010E3                 retn
.text:000010E3 __x86_get_pc_thunk_bx endp
.text:000010E3
.text:000010E3 ; ---------------------------------------------------------------------------
.text:000010E4                 align 10h
.text:000010F0
.text:000010F0 ; =============== S U B R O U T I N E =======================================
.text:000010F0
.text:000010F0
.text:000010F0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_11BA↓p
.text:000010F0                 call    __x86_get_pc_thunk_dx
.text:000010F5                 add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000010FB                 lea     ecx, (__bss_start - 3FC8h)[edx]
.text:00001101                 lea     eax, (__bss_start - 3FC8h)[edx]
.text:00001107                 cmp     eax, ecx
.text:00001109                 jz      short locret_1128
.text:0000110B                 mov     eax, ds:(_ITM_deregisterTMCloneTable_ptr - 3FC8h)[edx]
.text:00001111                 test    eax, eax
.text:00001113                 jz      short locret_1128
.text:00001115                 push    ebp
.text:00001116                 mov     ebp, esp
.text:00001118                 sub     esp, 14h
.text:0000111B                 push    ecx
.text:0000111C                 call    eax
.text:0000111E                 add     esp, 10h
.text:00001121                 leave
.text:00001122                 retn
.text:00001122 ; ---------------------------------------------------------------------------
.text:00001123                 align 8
.text:00001128
.text:00001128 locret_1128:                            ; CODE XREF: deregister_tm_clones+19↑j
.text:00001128                                         ; deregister_tm_clones+23↑j
.text:00001128                 retn
.text:00001128 deregister_tm_clones endp
.text:00001128
.text:00001128 ; ---------------------------------------------------------------------------
.text:00001129                 align 10h
.text:00001130
.text:00001130 ; =============== S U B R O U T I N E =======================================
.text:00001130
.text:00001130
.text:00001130 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:00001130                 call    __x86_get_pc_thunk_dx
.text:00001135                 add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0000113B                 push    ebp
.text:0000113C                 mov     ebp, esp
.text:0000113E                 push    ebx
.text:0000113F                 lea     ecx, (__bss_start - 3FC8h)[edx]
.text:00001145                 lea     eax, (__bss_start - 3FC8h)[edx]
.text:0000114B                 sub     esp, 4
.text:0000114E                 sub     eax, ecx
.text:00001150                 mov     ebx, eax
.text:00001152                 shr     eax, 1Fh
.text:00001155                 sar     ebx, 2
.text:00001158                 add     eax, ebx
.text:0000115A                 sar     eax, 1
.text:0000115C                 jz      short loc_1172
.text:0000115E                 mov     edx, ds:(_ITM_registerTMCloneTable_ptr - 3FC8h)[edx]
.text:00001164                 test    edx, edx
.text:00001166                 jz      short loc_1172
.text:00001168                 sub     esp, 8
.text:0000116B                 push    eax
.text:0000116C                 push    ecx
.text:0000116D                 call    edx
.text:0000116F                 add     esp, 10h
.text:00001172
.text:00001172 loc_1172:                               ; CODE XREF: register_tm_clones+2C↑j
.text:00001172                                         ; register_tm_clones+36↑j
.text:00001172                 mov     ebx, [ebp-4]
.text:00001175                 leave
.text:00001176                 retn
.text:00001176 register_tm_clones endp
.text:00001176
.text:00001176 ; ---------------------------------------------------------------------------
.text:00001177                 align 10h
.text:00001180
.text:00001180 ; =============== S U B R O U T I N E =======================================
.text:00001180
.text:00001180 ; Attributes: bp-based frame
.text:00001180
.text:00001180 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00001180
.text:00001180 var_4           = dword ptr -4
.text:00001180
.text:00001180                 endbr32
.text:00001184                 push    ebp
.text:00001185                 mov     ebp, esp
.text:00001187                 push    ebx
.text:00001188                 call    __x86_get_pc_thunk_bx
.text:0000118D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001193                 sub     esp, 4
.text:00001196                 cmp     ds:(__bss_start - 3FC8h)[ebx], 0
.text:0000119D                 jnz     short loc_11C6
.text:0000119F                 mov     eax, ds:(__cxa_finalize_ptr - 3FC8h)[ebx]
.text:000011A5                 test    eax, eax
.text:000011A7                 jz      short loc_11BA
.text:000011A9                 sub     esp, 0Ch
.text:000011AC                 push    (__dso_handle - 3FC8h)[ebx] ; void *
.text:000011B2                 call    ___cxa_finalize
.text:000011B7                 add     esp, 10h
.text:000011BA
.text:000011BA loc_11BA:                               ; CODE XREF: __do_global_dtors_aux+27↑j
.text:000011BA                 call    deregister_tm_clones
.text:000011BF                 mov     ds:(__bss_start - 3FC8h)[ebx], 1
.text:000011C6
.text:000011C6 loc_11C6:                               ; CODE XREF: __do_global_dtors_aux+1D↑j
.text:000011C6                 mov     ebx, [ebp+var_4]
.text:000011C9                 leave
.text:000011CA                 retn
.text:000011CA __do_global_dtors_aux endp
.text:000011CA
.text:000011CA ; ---------------------------------------------------------------------------
.text:000011CB                 align 10h
.text:000011D0
.text:000011D0 ; =============== S U B R O U T I N E =======================================
.text:000011D0
.text:000011D0
.text:000011D0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:000011D0                 endbr32
.text:000011D4                 jmp     register_tm_clones
.text:000011D4 frame_dummy     endp
.text:000011D4
.text:000011D9
.text:000011D9 ; =============== S U B R O U T I N E =======================================
.text:000011D9
.text:000011D9
.text:000011D9                 public __x86_get_pc_thunk_dx
.text:000011D9 __x86_get_pc_thunk_dx proc near         ; CODE XREF: deregister_tm_clones↑p
.text:000011D9                                         ; register_tm_clones↑p
.text:000011D9                 mov     edx, [esp+0]
.text:000011DC                 retn
.text:000011DC __x86_get_pc_thunk_dx endp
.text:000011DC
.text:000011DD
.text:000011DD ; =============== S U B R O U T I N E =======================================
.text:000011DD
.text:000011DD ; Attributes: noreturn bp-based frame
.text:000011DD
.text:000011DD                 public reach_error
.text:000011DD reach_error     proc near
.text:000011DD ; __unwind {
.text:000011DD                 push    ebp
.text:000011DE                 mov     ebp, esp
.text:000011E0                 push    ebx
.text:000011E1                 sub     esp, 4
.text:000011E4                 call    __x86_get_pc_thunk_ax
.text:000011E9                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000011EE                 lea     edx, (__PRETTY_FUNCTION___0 - 3FC8h)[eax] ; "reach_error"
.text:000011F4                 push    edx             ; function
.text:000011F5                 push    3               ; line
.text:000011F7                 lea     edx, (a200204061C - 3FC8h)[eax] ; "20020406-1.c"
.text:000011FD                 push    edx             ; file
.text:000011FE                 lea     edx, (a0 - 3FC8h)[eax] ; "0"
.text:00001204                 push    edx             ; assertion
.text:00001205                 mov     ebx, eax
.text:00001207                 call    ___assert_fail
.text:00001207 ; } // starts at 11DD
.text:00001207 reach_error     endp
.text:00001207
.text:0000120C
.text:0000120C ; =============== S U B R O U T I N E =======================================
.text:0000120C
.text:0000120C ; Attributes: bp-based frame
.text:0000120C
.text:0000120C                 public FFmul
.text:0000120C FFmul           proc near               ; CODE XREF: DUPFFexgcd+188↓p
.text:0000120C                                         ; DUPFFexgcd+1C5↓p
.text:0000120C
.text:0000120C arg_0           = dword ptr  8
.text:0000120C
.text:0000120C ; __unwind {
.text:0000120C                 push    ebp
.text:0000120D                 mov     ebp, esp
.text:0000120F                 call    __x86_get_pc_thunk_ax
.text:00001214                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001219                 mov     eax, [ebp+arg_0]
.text:0000121C                 pop     ebp
.text:0000121D                 retn
.text:0000121D ; } // starts at 120C
.text:0000121D FFmul           endp
.text:0000121D
.text:0000121E
.text:0000121E ; =============== S U B R O U T I N E =======================================
.text:0000121E
.text:0000121E ; Attributes: bp-based frame
.text:0000121E
.text:0000121E                 public DUPFFdeg
.text:0000121E DUPFFdeg        proc near               ; CODE XREF: DUPFFexgcd+16↓p
.text:0000121E                                         ; DUPFFexgcd+23↓p ...
.text:0000121E
.text:0000121E arg_0           = dword ptr  8
.text:0000121E
.text:0000121E ; __unwind {
.text:0000121E                 push    ebp
.text:0000121F                 mov     ebp, esp
.text:00001221                 call    __x86_get_pc_thunk_ax
.text:00001226                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0000122B                 mov     eax, [ebp+arg_0]
.text:0000122E                 mov     eax, [eax+4]
.text:00001231                 pop     ebp
.text:00001232                 retn
.text:00001232 ; } // starts at 121E
.text:00001232 DUPFFdeg        endp
.text:00001232
.text:00001233
.text:00001233 ; =============== S U B R O U T I N E =======================================
.text:00001233
.text:00001233 ; Attributes: bp-based frame
.text:00001233
.text:00001233                 public DUPFFnew
.text:00001233 DUPFFnew        proc near               ; CODE XREF: DUPFFexgcd+F2↓p
.text:00001233                                         ; DUPFFexgcd+119↓p ...
.text:00001233
.text:00001233 var_C           = dword ptr -0Ch
.text:00001233 var_4           = dword ptr -4
.text:00001233 arg_0           = dword ptr  8
.text:00001233
.text:00001233 ; __unwind {
.text:00001233                 push    ebp
.text:00001234                 mov     ebp, esp
.text:00001236                 push    ebx
.text:00001237                 sub     esp, 14h
.text:0000123A                 call    __x86_get_pc_thunk_bx
.text:0000123F                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001245                 sub     esp, 0Ch
.text:00001248                 push    0Ch             ; size
.text:0000124A                 call    _malloc
.text:0000124F                 add     esp, 10h
.text:00001252                 mov     [ebp+var_C], eax
.text:00001255                 mov     eax, [ebp+var_C]
.text:00001258                 mov     dword ptr [eax+8], 0
.text:0000125F                 cmp     [ebp+arg_0], 0
.text:00001263                 js      short loc_12A4
.text:00001265                 mov     eax, [ebp+arg_0]
.text:00001268                 add     eax, 1
.text:0000126B                 shl     eax, 2
.text:0000126E                 sub     esp, 0Ch
.text:00001271                 push    eax             ; size
.text:00001272                 call    _malloc
.text:00001277                 add     esp, 10h
.text:0000127A                 mov     edx, eax
.text:0000127C                 mov     eax, [ebp+var_C]
.text:0000127F                 mov     [eax+8], edx
.text:00001282                 mov     eax, [ebp+arg_0]
.text:00001285                 add     eax, 1
.text:00001288                 lea     edx, ds:0[eax*4]
.text:0000128F                 mov     eax, [ebp+var_C]
.text:00001292                 mov     eax, [eax+8]
.text:00001295                 sub     esp, 4
.text:00001298                 push    edx             ; n
.text:00001299                 push    0               ; c
.text:0000129B                 push    eax             ; s
.text:0000129C                 call    _memset
.text:000012A1                 add     esp, 10h
.text:000012A4
.text:000012A4 loc_12A4:                               ; CODE XREF: DUPFFnew+30↑j
.text:000012A4                 mov     eax, [ebp+var_C]
.text:000012A7                 mov     edx, [ebp+arg_0]
.text:000012AA                 mov     [eax], edx
.text:000012AC                 mov     eax, [ebp+var_C]
.text:000012AF                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text:000012B6                 mov     eax, [ebp+var_C]
.text:000012B9                 mov     ebx, [ebp+var_4]
.text:000012BC                 leave
.text:000012BD                 retn
.text:000012BD ; } // starts at 1233
.text:000012BD DUPFFnew        endp
.text:000012BD
.text:000012BE
.text:000012BE ; =============== S U B R O U T I N E =======================================
.text:000012BE
.text:000012BE ; Attributes: bp-based frame
.text:000012BE
.text:000012BE                 public DUPFFfree
.text:000012BE DUPFFfree       proc near               ; CODE XREF: DUPFFexgcd+2D5↓p
.text:000012BE                                         ; DUPFFexgcd+2E3↓p ...
.text:000012BE ; __unwind {
.text:000012BE                 push    ebp
.text:000012BF                 mov     ebp, esp
.text:000012C1                 call    __x86_get_pc_thunk_ax
.text:000012C6                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000012CB                 nop
.text:000012CC                 pop     ebp
.text:000012CD                 retn
.text:000012CD ; } // starts at 12BE
.text:000012CD DUPFFfree       endp
.text:000012CD
.text:000012CE
.text:000012CE ; =============== S U B R O U T I N E =======================================
.text:000012CE
.text:000012CE ; Attributes: bp-based frame
.text:000012CE
.text:000012CE                 public DUPFFswap
.text:000012CE DUPFFswap       proc near               ; CODE XREF: DUPFFexgcd+24A↓p
.text:000012CE                                         ; DUPFFexgcd+25B↓p ...
.text:000012CE ; __unwind {
.text:000012CE                 push    ebp
.text:000012CF                 mov     ebp, esp
.text:000012D1                 call    __x86_get_pc_thunk_ax
.text:000012D6                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000012DB                 nop
.text:000012DC                 pop     ebp
.text:000012DD                 retn
.text:000012DD ; } // starts at 12CE
.text:000012DD DUPFFswap       endp
.text:000012DD
.text:000012DE
.text:000012DE ; =============== S U B R O U T I N E =======================================
.text:000012DE
.text:000012DE ; Attributes: bp-based frame
.text:000012DE
.text:000012DE                 public DUPFFcopy
.text:000012DE DUPFFcopy       proc near               ; CODE XREF: DUPFFexgcd+D0↓p
.text:000012DE                                         ; DUPFFexgcd+E1↓p
.text:000012DE
.text:000012DE arg_0           = dword ptr  8
.text:000012DE
.text:000012DE ; __unwind {
.text:000012DE                 push    ebp
.text:000012DF                 mov     ebp, esp
.text:000012E1                 call    __x86_get_pc_thunk_ax
.text:000012E6                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000012EB                 mov     eax, [ebp+arg_0]
.text:000012EE                 pop     ebp
.text:000012EF                 retn
.text:000012EF ; } // starts at 12DE
.text:000012EF DUPFFcopy       endp
.text:000012EF
.text:000012F0
.text:000012F0 ; =============== S U B R O U T I N E =======================================
.text:000012F0
.text:000012F0 ; Attributes: bp-based frame
.text:000012F0
.text:000012F0                 public DUPFFshift_add
.text:000012F0 DUPFFshift_add  proc near               ; CODE XREF: DUPFFexgcd+1E6↓p
.text:000012F0                                         ; DUPFFexgcd+204↓p ...
.text:000012F0 ; __unwind {
.text:000012F0                 push    ebp
.text:000012F1                 mov     ebp, esp
.text:000012F3                 call    __x86_get_pc_thunk_ax
.text:000012F8                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000012FD                 nop
.text:000012FE                 pop     ebp
.text:000012FF                 retn
.text:000012FF ; } // starts at 12F0
.text:000012FF DUPFFshift_add  endp
.text:000012FF
.text:00001300
.text:00001300 ; =============== S U B R O U T I N E =======================================
.text:00001300
.text:00001300 ; Attributes: bp-based frame
.text:00001300
.text:00001300                 public DUPFFexgcd
.text:00001300 DUPFFexgcd      proc near               ; CODE XREF: DUPFFexgcd+3B↓p
.text:00001300                                         ; main+86↓p
.text:00001300
.text:00001300 var_40          = dword ptr -40h
.text:00001300 var_3C          = dword ptr -3Ch
.text:00001300 var_38          = dword ptr -38h
.text:00001300 var_34          = dword ptr -34h
.text:00001300 var_30          = dword ptr -30h
.text:00001300 var_2C          = dword ptr -2Ch
.text:00001300 var_28          = dword ptr -28h
.text:00001300 var_24          = dword ptr -24h
.text:00001300 var_20          = dword ptr -20h
.text:00001300 var_1C          = dword ptr -1Ch
.text:00001300 var_18          = dword ptr -18h
.text:00001300 var_14          = dword ptr -14h
.text:00001300 var_10          = dword ptr -10h
.text:00001300 var_C           = dword ptr -0Ch
.text:00001300 arg_0           = dword ptr  8
.text:00001300 arg_4           = dword ptr  0Ch
.text:00001300 arg_8           = dword ptr  10h
.text:00001300 arg_C           = dword ptr  14h
.text:00001300
.text:00001300 ; __unwind {
.text:00001300                 push    ebp
.text:00001301                 mov     ebp, esp
.text:00001303                 push    esi
.text:00001304                 push    ebx
.text:00001305                 sub     esp, 40h
.text:00001308                 call    __x86_get_pc_thunk_bx
.text:0000130D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001313                 push    [ebp+arg_8]
.text:00001316                 call    DUPFFdeg
.text:0000131B                 add     esp, 4
.text:0000131E                 mov     esi, eax
.text:00001320                 push    [ebp+arg_C]
.text:00001323                 call    DUPFFdeg
.text:00001328                 add     esp, 4
.text:0000132B                 cmp     esi, eax
.text:0000132D                 jge     short loc_1348
.text:0000132F                 push    [ebp+arg_8]
.text:00001332                 push    [ebp+arg_C]
.text:00001335                 push    [ebp+arg_0]
.text:00001338                 push    [ebp+arg_4]
.text:0000133B                 call    DUPFFexgcd
.text:00001340                 add     esp, 10h
.text:00001343                 jmp     loc_160C
.text:00001348 ; ---------------------------------------------------------------------------
.text:00001348
.text:00001348 loc_1348:                               ; CODE XREF: DUPFFexgcd+2D↑j
.text:00001348                 sub     esp, 0Ch
.text:0000134B                 push    [ebp+arg_8]
.text:0000134E                 call    DUPFFdeg
.text:00001353                 add     esp, 10h
.text:00001356                 cmp     eax, 2
.text:00001359                 jnz     short loc_136E
.text:0000135B                 sub     esp, 0Ch
.text:0000135E                 push    [ebp+arg_C]
.text:00001361                 call    DUPFFdeg
.text:00001366                 add     esp, 10h
.text:00001369                 cmp     eax, 1
.text:0000136C                 jz      short loc_1373
.text:0000136E
.text:0000136E loc_136E:                               ; CODE XREF: DUPFFexgcd+59↑j
.text:0000136E                 call    _abort
.text:00001373 ; ---------------------------------------------------------------------------
.text:00001373
.text:00001373 loc_1373:                               ; CODE XREF: DUPFFexgcd+6C↑j
.text:00001373                 mov     eax, [ebp+arg_8]
.text:00001376                 mov     eax, [eax+8]
.text:00001379                 mov     eax, [eax]
.text:0000137B                 test    eax, eax
.text:0000137D                 jnz     short loc_1387
.text:0000137F                 mov     eax, [ebp+arg_8]
.text:00001382                 jmp     loc_160C
.text:00001387 ; ---------------------------------------------------------------------------
.text:00001387
.text:00001387 loc_1387:                               ; CODE XREF: DUPFFexgcd+7D↑j
.text:00001387                 mov     [ebp+var_38], 2
.text:0000138E                 sub     esp, 0Ch
.text:00001391                 push    [ebp+arg_8]
.text:00001394                 call    DUPFFdeg
.text:00001399                 add     esp, 10h
.text:0000139C                 mov     [ebp+var_40], eax
.text:0000139F                 cmp     [ebp+var_40], 0
.text:000013A3                 jns     short loc_13AC
.text:000013A5                 mov     [ebp+var_40], 0
.text:000013AC
.text:000013AC loc_13AC:                               ; CODE XREF: DUPFFexgcd+A3↑j
.text:000013AC                 sub     esp, 0Ch
.text:000013AF                 push    [ebp+arg_C]
.text:000013B2                 call    DUPFFdeg
.text:000013B7                 add     esp, 10h
.text:000013BA                 mov     [ebp+var_3C], eax
.text:000013BD                 cmp     [ebp+var_3C], 0
.text:000013C1                 jns     short loc_13CA
.text:000013C3                 mov     [ebp+var_3C], 0
.text:000013CA
.text:000013CA loc_13CA:                               ; CODE XREF: DUPFFexgcd+C1↑j
.text:000013CA                 sub     esp, 0Ch
.text:000013CD                 push    [ebp+arg_8]
.text:000013D0                 call    DUPFFcopy
.text:000013D5                 add     esp, 10h
.text:000013D8                 mov     [ebp+var_34], eax
.text:000013DB                 sub     esp, 0Ch
.text:000013DE                 push    [ebp+arg_C]
.text:000013E1                 call    DUPFFcopy
.text:000013E6                 add     esp, 10h
.text:000013E9                 mov     [ebp+var_30], eax
.text:000013EC                 sub     esp, 0Ch
.text:000013EF                 push    [ebp+var_3C]
.text:000013F2                 call    DUPFFnew
.text:000013F7                 add     esp, 10h
.text:000013FA                 mov     [ebp+var_2C], eax
.text:000013FD                 mov     eax, [ebp+var_2C]
.text:00001400                 mov     eax, [eax+8]
.text:00001403                 mov     dword ptr [eax], 1
.text:00001409                 mov     eax, [ebp+var_2C]
.text:0000140C                 mov     dword ptr [eax+4], 0
.text:00001413                 sub     esp, 0Ch
.text:00001416                 push    [ebp+var_40]
.text:00001419                 call    DUPFFnew
.text:0000141E                 add     esp, 10h
.text:00001421                 mov     [ebp+var_28], eax
.text:00001424                 sub     esp, 0Ch
.text:00001427                 push    [ebp+var_3C]
.text:0000142A                 call    DUPFFnew
.text:0000142F                 add     esp, 10h
.text:00001432                 mov     [ebp+var_24], eax
.text:00001435                 sub     esp, 0Ch
.text:00001438                 push    [ebp+var_40]
.text:0000143B                 call    DUPFFnew
.text:00001440                 add     esp, 10h
.text:00001443                 mov     [ebp+var_20], eax
.text:00001446                 mov     eax, [ebp+var_20]
.text:00001449                 mov     eax, [eax+8]
.text:0000144C                 mov     dword ptr [eax], 1
.text:00001452                 mov     eax, [ebp+var_20]
.text:00001455                 mov     dword ptr [eax+4], 0
.text:0000145C                 jmp     loc_1574
.text:00001461 ; ---------------------------------------------------------------------------
.text:00001461
.text:00001461 loc_1461:                               ; CODE XREF: DUPFFexgcd+284↓j
.text:00001461                 sub     esp, 0Ch
.text:00001464                 push    [ebp+var_30]
.text:00001467                 call    DUPFFdeg
.text:0000146C                 add     esp, 10h
.text:0000146F                 mov     [ebp+var_1C], eax
.text:00001472                 mov     eax, [ebp+var_30]
.text:00001475                 mov     edx, [eax+8]
.text:00001478                 mov     eax, [ebp+var_1C]
.text:0000147B                 shl     eax, 2
.text:0000147E                 add     eax, edx
.text:00001480                 mov     eax, [eax]
.text:00001482                 sub     esp, 8
.text:00001485                 push    eax
.text:00001486                 push    1
.text:00001488                 call    FFmul
.text:0000148D                 add     esp, 10h
.text:00001490                 mov     [ebp+var_18], eax
.text:00001493                 jmp     loc_152A
.text:00001498 ; ---------------------------------------------------------------------------
.text:00001498
.text:00001498 loc_1498:                               ; CODE XREF: DUPFFexgcd+23B↓j
.text:00001498                 sub     esp, 0Ch
.text:0000149B                 push    [ebp+var_34]
.text:0000149E                 call    DUPFFdeg
.text:000014A3                 add     esp, 10h
.text:000014A6                 mov     [ebp+var_14], eax
.text:000014A9                 mov     eax, [ebp+var_34]
.text:000014AC                 mov     edx, [eax+8]
.text:000014AF                 mov     eax, [ebp+var_14]
.text:000014B2                 shl     eax, 2
.text:000014B5                 add     eax, edx
.text:000014B7                 mov     eax, [eax]
.text:000014B9                 mov     [ebp+var_10], eax
.text:000014BC                 sub     esp, 8
.text:000014BF                 push    [ebp+var_18]
.text:000014C2                 push    [ebp+var_10]
.text:000014C5                 call    FFmul
.text:000014CA                 add     esp, 10h
.text:000014CD                 mov     [ebp+var_C], eax
.text:000014D0                 mov     eax, [ebp+var_38]
.text:000014D3                 sub     eax, [ebp+var_C]
.text:000014D6                 mov     edx, eax
.text:000014D8                 mov     eax, [ebp+var_14]
.text:000014DB                 sub     eax, [ebp+var_1C]
.text:000014DE                 push    edx
.text:000014DF                 push    eax
.text:000014E0                 push    [ebp+var_30]
.text:000014E3                 push    [ebp+var_34]
.text:000014E6                 call    DUPFFshift_add
.text:000014EB                 add     esp, 10h
.text:000014EE                 mov     eax, [ebp+var_38]
.text:000014F1                 sub     eax, [ebp+var_C]
.text:000014F4                 mov     edx, eax
.text:000014F6                 mov     eax, [ebp+var_14]
.text:000014F9                 sub     eax, [ebp+var_1C]
.text:000014FC                 push    edx
.text:000014FD                 push    eax
.text:000014FE                 push    [ebp+var_24]
.text:00001501                 push    [ebp+var_2C]
.text:00001504                 call    DUPFFshift_add
.text:00001509                 add     esp, 10h
.text:0000150C                 mov     eax, [ebp+var_38]
.text:0000150F                 sub     eax, [ebp+var_C]
.text:00001512                 mov     edx, eax
.text:00001514                 mov     eax, [ebp+var_14]
.text:00001517                 sub     eax, [ebp+var_1C]
.text:0000151A                 push    edx
.text:0000151B                 push    eax
.text:0000151C                 push    [ebp+var_20]
.text:0000151F                 push    [ebp+var_28]
.text:00001522                 call    DUPFFshift_add
.text:00001527                 add     esp, 10h
.text:0000152A
.text:0000152A loc_152A:                               ; CODE XREF: DUPFFexgcd+193↑j
.text:0000152A                 sub     esp, 0Ch
.text:0000152D                 push    [ebp+var_34]
.text:00001530                 call    DUPFFdeg
.text:00001535                 add     esp, 10h
.text:00001538                 cmp     [ebp+var_1C], eax
.text:0000153B                 jle     loc_1498
.text:00001541                 sub     esp, 8
.text:00001544                 push    [ebp+var_30]
.text:00001547                 push    [ebp+var_34]
.text:0000154A                 call    DUPFFswap
.text:0000154F                 add     esp, 10h
.text:00001552                 sub     esp, 8
.text:00001555                 push    [ebp+var_24]
.text:00001558                 push    [ebp+var_2C]
.text:0000155B                 call    DUPFFswap
.text:00001560                 add     esp, 10h
.text:00001563                 sub     esp, 8
.text:00001566                 push    [ebp+var_20]
.text:00001569                 push    [ebp+var_28]
.text:0000156C                 call    DUPFFswap
.text:00001571                 add     esp, 10h
.text:00001574
.text:00001574 loc_1574:                               ; CODE XREF: DUPFFexgcd+15C↑j
.text:00001574                 sub     esp, 0Ch
.text:00001577                 push    [ebp+var_30]
.text:0000157A                 call    DUPFFdeg
.text:0000157F                 add     esp, 10h
.text:00001582                 test    eax, eax
.text:00001584                 jg      loc_1461
.text:0000158A                 sub     esp, 0Ch
.text:0000158D                 push    [ebp+var_30]
.text:00001590                 call    DUPFFdeg
.text:00001595                 add     esp, 10h
.text:00001598                 test    eax, eax
.text:0000159A                 jnz     short loc_15CF
.text:0000159C                 sub     esp, 8
.text:0000159F                 push    [ebp+var_30]
.text:000015A2                 push    [ebp+var_34]
.text:000015A5                 call    DUPFFswap
.text:000015AA                 add     esp, 10h
.text:000015AD                 sub     esp, 8
.text:000015B0                 push    [ebp+var_24]
.text:000015B3                 push    [ebp+var_2C]
.text:000015B6                 call    DUPFFswap
.text:000015BB                 add     esp, 10h
.text:000015BE                 sub     esp, 8
.text:000015C1                 push    [ebp+var_20]
.text:000015C4                 push    [ebp+var_28]
.text:000015C7                 call    DUPFFswap
.text:000015CC                 add     esp, 10h
.text:000015CF
.text:000015CF loc_15CF:                               ; CODE XREF: DUPFFexgcd+29A↑j
.text:000015CF                 sub     esp, 0Ch
.text:000015D2                 push    [ebp+var_24]
.text:000015D5                 call    DUPFFfree
.text:000015DA                 add     esp, 10h
.text:000015DD                 sub     esp, 0Ch
.text:000015E0                 push    [ebp+var_20]
.text:000015E3                 call    DUPFFfree
.text:000015E8                 add     esp, 10h
.text:000015EB                 sub     esp, 0Ch
.text:000015EE                 push    [ebp+var_30]
.text:000015F1                 call    DUPFFfree
.text:000015F6                 add     esp, 10h
.text:000015F9                 mov     eax, [ebp+arg_0]
.text:000015FC                 mov     edx, [ebp+var_2C]
.text:000015FF                 mov     [eax], edx
.text:00001601                 mov     eax, [ebp+arg_4]
.text:00001604                 mov     edx, [ebp+var_28]
.text:00001607                 mov     [eax], edx
.text:00001609                 mov     eax, [ebp+var_34]
.text:0000160C
.text:0000160C loc_160C:                               ; CODE XREF: DUPFFexgcd+43↑j
.text:0000160C                                         ; DUPFFexgcd+82↑j
.text:0000160C                 lea     esp, [ebp-8]
.text:0000160F                 pop     ebx
.text:00001610                 pop     esi
.text:00001611                 pop     ebp
.text:00001612                 retn
.text:00001612 ; } // starts at 1300
.text:00001612 DUPFFexgcd      endp
.text:00001612
.text:00001613
.text:00001613 ; =============== S U B R O U T I N E =======================================
.text:00001613
.text:00001613 ; Attributes: bp-based frame fuzzy-sp
.text:00001613
.text:00001613 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:00001613                 public main
.text:00001613 main            proc near               ; DATA XREF: .got:main_ptr↓o
.text:00001613
.text:00001613 var_20          = byte ptr -20h
.text:00001613 var_1C          = byte ptr -1Ch
.text:00001613 var_18          = dword ptr -18h
.text:00001613 var_14          = dword ptr -14h
.text:00001613 var_10          = dword ptr -10h
.text:00001613 var_C           = dword ptr -0Ch
.text:00001613 var_4           = dword ptr -4
.text:00001613 argc            = dword ptr  8
.text:00001613 argv            = dword ptr  0Ch
.text:00001613 envp            = dword ptr  10h
.text:00001613
.text:00001613 ; __unwind {
.text:00001613                 lea     ecx, [esp+4]
.text:00001617                 and     esp, 0FFFFFFF0h
.text:0000161A                 push    dword ptr [ecx-4]
.text:0000161D                 push    ebp
.text:0000161E                 mov     ebp, esp
.text:00001620                 push    ecx
.text:00001621                 sub     esp, 24h
.text:00001624                 call    __x86_get_pc_thunk_ax
.text:00001629                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0000162E                 mov     eax, large gs:14h
.text:00001634                 mov     [ebp+var_C], eax
.text:00001637                 xor     eax, eax
.text:00001639                 sub     esp, 0Ch
.text:0000163C                 push    1
.text:0000163E                 call    DUPFFnew
.text:00001643                 add     esp, 10h
.text:00001646                 mov     [ebp+var_18], eax
.text:00001649                 mov     eax, [ebp+var_18]
.text:0000164C                 mov     eax, [eax+8]
.text:0000164F                 add     eax, 4
.text:00001652                 mov     ds:(_GLOBAL_OFFSET_TABLE_ - 3FC8h)[eax], 1
.text:00001658                 mov     eax, [ebp+var_18]
.text:0000165B                 mov     dword ptr [eax+4], 1
.text:00001662                 sub     esp, 0Ch
.text:00001665                 push    2
.text:00001667                 call    DUPFFnew
.text:0000166C                 add     esp, 10h
.text:0000166F                 mov     [ebp+var_14], eax
.text:00001672                 mov     eax, [ebp+var_14]
.text:00001675                 mov     eax, [eax+8]
.text:00001678                 add     eax, 8
.text:0000167B                 mov     ds:(_GLOBAL_OFFSET_TABLE_ - 3FC8h)[eax], 1
.text:00001681                 mov     eax, [ebp+var_14]
.text:00001684                 mov     dword ptr [eax+4], 2
.text:0000168B                 push    [ebp+var_14]
.text:0000168E                 push    [ebp+var_18]
.text:00001691                 lea     eax, [ebp+var_1C]
.text:00001694                 push    eax
.text:00001695                 lea     eax, [ebp+var_20]
.text:00001698                 push    eax
.text:00001699                 call    DUPFFexgcd
.text:0000169E                 add     esp, 10h
.text:000016A1                 mov     [ebp+var_10], eax
.text:000016A4                 mov     eax, 0
.text:000016A9                 mov     edx, [ebp+var_C]
.text:000016AC                 sub     edx, large gs:14h
.text:000016B3                 jz      short loc_16BA
.text:000016B5                 call    __stack_chk_fail_local
.text:000016BA ; ---------------------------------------------------------------------------
.text:000016BA
.text:000016BA loc_16BA:                               ; CODE XREF: main+A0↑j
.text:000016BA                 mov     ecx, [ebp+var_4]
.text:000016BD                 leave
.text:000016BE                 lea     esp, [ecx-4]
.text:000016C1                 retn
.text:000016C1 ; } // starts at 1613
.text:000016C1 main            endp
.text:000016C1
.text:000016C2
.text:000016C2 ; =============== S U B R O U T I N E =======================================
.text:000016C2
.text:000016C2
.text:000016C2                 public __x86_get_pc_thunk_ax
.text:000016C2 __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text:000016C2                                         ; FFmul+3↑p ...
.text:000016C2 ; __unwind {
.text:000016C2                 mov     eax, [esp+0]
.text:000016C5                 retn
.text:000016C5 ; } // starts at 16C2
.text:000016C5 __x86_get_pc_thunk_ax endp
.text:000016C5
.text:000016C5 ; ---------------------------------------------------------------------------
.text:000016C6                 align 10h
.text:000016D0
.text:000016D0 ; =============== S U B R O U T I N E =======================================
.text:000016D0
.text:000016D0 ; Attributes: noreturn
.text:000016D0
.text:000016D0                 public __stack_chk_fail_local
.text:000016D0 __stack_chk_fail_local proc near        ; CODE XREF: main+A2↑p
.text:000016D0 ; __unwind {
.text:000016D0                 endbr32
.text:000016D4                 push    ebx
.text:000016D5                 call    __x86_get_pc_thunk_bx
.text:000016DA                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000016E0                 sub     esp, 8
.text:000016E3                 call    ___stack_chk_fail
.text:000016E3 ; } // starts at 16D0
.text:000016E3 __stack_chk_fail_local endp
.text:000016E3
.text:000016E3 _text           ends
.text:000016E3
.fini:000016E8 ; ===========================================================================
.fini:000016E8
.fini:000016E8 ; Segment type: Pure code
.fini:000016E8 ; Segment permissions: Read/Execute
.fini:000016E8 _fini           segment dword public 'CODE' use32
.fini:000016E8                 assume cs:_fini
.fini:000016E8                 ;org 16E8h
.fini:000016E8                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000016E8
.fini:000016E8 ; =============== S U B R O U T I N E =======================================
.fini:000016E8
.fini:000016E8
.fini:000016E8                 public _term_proc
.fini:000016E8 _term_proc      proc near
.fini:000016E8                 endbr32                 ; _fini
.fini:000016EC                 push    ebx
.fini:000016ED                 sub     esp, 8
.fini:000016F0                 call    __x86_get_pc_thunk_bx
.fini:000016F5                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.fini:000016FB                 add     esp, 8
.fini:000016FE                 pop     ebx
.fini:000016FF                 retn
.fini:000016FF _term_proc      endp
.fini:000016FF
.fini:000016FF _fini           ends
.fini:000016FF
.rodata:00002000 ; ===========================================================================
.rodata:00002000
.rodata:00002000 ; Segment type: Pure data
.rodata:00002000 ; Segment permissions: Read
.rodata:00002000 _rodata         segment dword public 'CONST' use32
.rodata:00002000                 assume cs:_rodata
.rodata:00002000                 ;org 2000h
.rodata:00002000                 public _fp_hw
.rodata:00002000 _fp_hw          db    3                 ; DATA XREF: LOAD:000000BC↑o
.rodata:00002001                 db    0
.rodata:00002002                 db    0
.rodata:00002003                 db    0
.rodata:00002004                 public _IO_stdin_used
.rodata:00002004 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:000002BC↑o
.rodata:00002005                 db    0
.rodata:00002006                 db    2
.rodata:00002007                 db    0
.rodata:00002008 a200204061C     db '20020406-1.c',0     ; DATA XREF: reach_error+1A↑o
.rodata:00002015 a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:00002017                 align 4
.rodata:00002018 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:00002018                                         ; DATA XREF: reach_error+11↑o
.rodata:00002018 _rodata         ends
.rodata:00002018
.eh_frame_hdr:00002024 ; ===========================================================================
.eh_frame_hdr:00002024
.eh_frame_hdr:00002024 ; Segment type: Pure data
.eh_frame_hdr:00002024 ; Segment permissions: Read
.eh_frame_hdr:00002024 _eh_frame_hdr   segment dword public 'CONST' use32
.eh_frame_hdr:00002024                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00002024                 ;org 2024h
.eh_frame_hdr:00002024 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000013C↑o
.eh_frame_hdr:00002025                 db  1Bh
.eh_frame_hdr:00002026                 db    3
.eh_frame_hdr:00002027                 db  3Bh ; ;
.eh_frame_hdr:00002028                 db  80h
.eh_frame_hdr:00002029                 db    0
.eh_frame_hdr:0000202A                 db    0
.eh_frame_hdr:0000202B                 db    0
.eh_frame_hdr:0000202C                 db  0Fh
.eh_frame_hdr:0000202D                 db    0
.eh_frame_hdr:0000202E                 db    0
.eh_frame_hdr:0000202F                 db    0
.eh_frame_hdr:00002030                 db  0Ch
.eh_frame_hdr:00002031                 db 0F0h
.eh_frame_hdr:00002032                 db 0FFh
.eh_frame_hdr:00002033                 db 0FFh
.eh_frame_hdr:00002034                 db 0B0h
.eh_frame_hdr:00002035                 db    0
.eh_frame_hdr:00002036                 db    0
.eh_frame_hdr:00002037                 db    0
.eh_frame_hdr:00002038                 db  7Ch ; |
.eh_frame_hdr:00002039                 db 0F0h
.eh_frame_hdr:0000203A                 db 0FFh
.eh_frame_hdr:0000203B                 db 0FFh
.eh_frame_hdr:0000203C                 db 0D4h
.eh_frame_hdr:0000203D                 db    0
.eh_frame_hdr:0000203E                 db    0
.eh_frame_hdr:0000203F                 db    0
.eh_frame_hdr:00002040                 db  8Ch
.eh_frame_hdr:00002041                 db 0F0h
.eh_frame_hdr:00002042                 db 0FFh
.eh_frame_hdr:00002043                 db 0FFh
.eh_frame_hdr:00002044                 db  9Ch
.eh_frame_hdr:00002045                 db    0
.eh_frame_hdr:00002046                 db    0
.eh_frame_hdr:00002047                 db    0
.eh_frame_hdr:00002048                 db 0B9h
.eh_frame_hdr:00002049                 db 0F1h
.eh_frame_hdr:0000204A                 db 0FFh
.eh_frame_hdr:0000204B                 db 0FFh
.eh_frame_hdr:0000204C                 db 0E8h
.eh_frame_hdr:0000204D                 db    0
.eh_frame_hdr:0000204E                 db    0
.eh_frame_hdr:0000204F                 db    0
.eh_frame_hdr:00002050                 db 0E8h
.eh_frame_hdr:00002051                 db 0F1h
.eh_frame_hdr:00002052                 db 0FFh
.eh_frame_hdr:00002053                 db 0FFh
.eh_frame_hdr:00002054                 db    4
.eh_frame_hdr:00002055                 db    1
.eh_frame_hdr:00002056                 db    0
.eh_frame_hdr:00002057                 db    0
.eh_frame_hdr:00002058                 db 0FAh
.eh_frame_hdr:00002059                 db 0F1h
.eh_frame_hdr:0000205A                 db 0FFh
.eh_frame_hdr:0000205B                 db 0FFh
.eh_frame_hdr:0000205C                 db  24h ; $
.eh_frame_hdr:0000205D                 db    1
.eh_frame_hdr:0000205E                 db    0
.eh_frame_hdr:0000205F                 db    0
.eh_frame_hdr:00002060                 db  0Fh
.eh_frame_hdr:00002061                 db 0F2h
.eh_frame_hdr:00002062                 db 0FFh
.eh_frame_hdr:00002063                 db 0FFh
.eh_frame_hdr:00002064                 db  44h ; D
.eh_frame_hdr:00002065                 db    1
.eh_frame_hdr:00002066                 db    0
.eh_frame_hdr:00002067                 db    0
.eh_frame_hdr:00002068                 db  9Ah
.eh_frame_hdr:00002069                 db 0F2h
.eh_frame_hdr:0000206A                 db 0FFh
.eh_frame_hdr:0000206B                 db 0FFh
.eh_frame_hdr:0000206C                 db  68h ; h
.eh_frame_hdr:0000206D                 db    1
.eh_frame_hdr:0000206E                 db    0
.eh_frame_hdr:0000206F                 db    0
.eh_frame_hdr:00002070                 db 0AAh
.eh_frame_hdr:00002071                 db 0F2h
.eh_frame_hdr:00002072                 db 0FFh
.eh_frame_hdr:00002073                 db 0FFh
.eh_frame_hdr:00002074                 db  88h
.eh_frame_hdr:00002075                 db    1
.eh_frame_hdr:00002076                 db    0
.eh_frame_hdr:00002077                 db    0
.eh_frame_hdr:00002078                 db 0BAh
.eh_frame_hdr:00002079                 db 0F2h
.eh_frame_hdr:0000207A                 db 0FFh
.eh_frame_hdr:0000207B                 db 0FFh
.eh_frame_hdr:0000207C                 db 0A8h
.eh_frame_hdr:0000207D                 db    1
.eh_frame_hdr:0000207E                 db    0
.eh_frame_hdr:0000207F                 db    0
.eh_frame_hdr:00002080                 db 0CCh
.eh_frame_hdr:00002081                 db 0F2h
.eh_frame_hdr:00002082                 db 0FFh
.eh_frame_hdr:00002083                 db 0FFh
.eh_frame_hdr:00002084                 db 0C8h
.eh_frame_hdr:00002085                 db    1
.eh_frame_hdr:00002086                 db    0
.eh_frame_hdr:00002087                 db    0
.eh_frame_hdr:00002088                 db 0DCh
.eh_frame_hdr:00002089                 db 0F2h
.eh_frame_hdr:0000208A                 db 0FFh
.eh_frame_hdr:0000208B                 db 0FFh
.eh_frame_hdr:0000208C                 db 0E8h
.eh_frame_hdr:0000208D                 db    1
.eh_frame_hdr:0000208E                 db    0
.eh_frame_hdr:0000208F                 db    0
.eh_frame_hdr:00002090                 db 0EFh
.eh_frame_hdr:00002091                 db 0F5h
.eh_frame_hdr:00002092                 db 0FFh
.eh_frame_hdr:00002093                 db 0FFh
.eh_frame_hdr:00002094                 db  14h
.eh_frame_hdr:00002095                 db    2
.eh_frame_hdr:00002096                 db    0
.eh_frame_hdr:00002097                 db    0
.eh_frame_hdr:00002098                 db  9Eh
.eh_frame_hdr:00002099                 db 0F6h
.eh_frame_hdr:0000209A                 db 0FFh
.eh_frame_hdr:0000209B                 db 0FFh
.eh_frame_hdr:0000209C                 db  40h ; @
.eh_frame_hdr:0000209D                 db    2
.eh_frame_hdr:0000209E                 db    0
.eh_frame_hdr:0000209F                 db    0
.eh_frame_hdr:000020A0                 db 0ACh
.eh_frame_hdr:000020A1                 db 0F6h
.eh_frame_hdr:000020A2                 db 0FFh
.eh_frame_hdr:000020A3                 db 0FFh
.eh_frame_hdr:000020A4                 db  54h ; T
.eh_frame_hdr:000020A5                 db    2
.eh_frame_hdr:000020A6                 db    0
.eh_frame_hdr:000020A7                 db    0
.eh_frame_hdr:000020A7 _eh_frame_hdr   ends
.eh_frame_hdr:000020A7
.eh_frame:000020A8 ; ===========================================================================
.eh_frame:000020A8
.eh_frame:000020A8 ; Segment type: Pure data
.eh_frame:000020A8 ; Segment permissions: Read
.eh_frame:000020A8 _eh_frame       segment dword public 'CONST' use32
.eh_frame:000020A8                 assume cs:_eh_frame
.eh_frame:000020A8                 ;org 20A8h
.eh_frame:000020A8                 db  14h
.eh_frame:000020A9                 db    0
.eh_frame:000020AA                 db    0
.eh_frame:000020AB                 db    0
.eh_frame:000020AC                 db    0
.eh_frame:000020AD                 db    0
.eh_frame:000020AE                 db    0
.eh_frame:000020AF                 db    0
.eh_frame:000020B0                 db    1
.eh_frame:000020B1                 db  7Ah ; z
.eh_frame:000020B2                 db  52h ; R
.eh_frame:000020B3                 db    0
.eh_frame:000020B4                 db    1
.eh_frame:000020B5                 db  7Ch ; |
.eh_frame:000020B6                 db    8
.eh_frame:000020B7                 db    1
.eh_frame:000020B8                 db  1Bh
.eh_frame:000020B9                 db  0Ch
.eh_frame:000020BA                 db    4
.eh_frame:000020BB                 db    4
.eh_frame:000020BC                 db  88h
.eh_frame:000020BD                 db    1
.eh_frame:000020BE                 db    0
.eh_frame:000020BF                 db    0
.eh_frame:000020C0                 db  10h
.eh_frame:000020C1                 db    0
.eh_frame:000020C2                 db    0
.eh_frame:000020C3                 db    0
.eh_frame:000020C4                 db  1Ch
.eh_frame:000020C5                 db    0
.eh_frame:000020C6                 db    0
.eh_frame:000020C7                 db    0
.eh_frame:000020C8                 db 0E8h
.eh_frame:000020C9                 db 0EFh
.eh_frame:000020CA                 db 0FFh
.eh_frame:000020CB                 db 0FFh
.eh_frame:000020CC                 db  30h ; 0
.eh_frame:000020CD                 db    0
.eh_frame:000020CE                 db    0
.eh_frame:000020CF                 db    0
.eh_frame:000020D0                 db    0
.eh_frame:000020D1                 db  44h ; D
.eh_frame:000020D2                 db    7
.eh_frame:000020D3                 db    8
.eh_frame:000020D4                 db  20h
.eh_frame:000020D5                 db    0
.eh_frame:000020D6                 db    0
.eh_frame:000020D7                 db    0
.eh_frame:000020D8                 db  30h ; 0
.eh_frame:000020D9                 db    0
.eh_frame:000020DA                 db    0
.eh_frame:000020DB                 db    0
.eh_frame:000020DC                 db  54h ; T
.eh_frame:000020DD                 db 0EFh
.eh_frame:000020DE                 db 0FFh
.eh_frame:000020DF                 db 0FFh
.eh_frame:000020E0                 db  70h ; p
.eh_frame:000020E1                 db    0
.eh_frame:000020E2                 db    0
.eh_frame:000020E3                 db    0
.eh_frame:000020E4                 db    0
.eh_frame:000020E5                 db  0Eh
.eh_frame:000020E6                 db    8
.eh_frame:000020E7                 db  46h ; F
.eh_frame:000020E8                 db  0Eh
.eh_frame:000020E9                 db  0Ch
.eh_frame:000020EA                 db  4Ah ; J
.eh_frame:000020EB                 db  0Fh
.eh_frame:000020EC                 db  0Bh
.eh_frame:000020ED                 db  74h ; t
.eh_frame:000020EE                 db    4
.eh_frame:000020EF                 db  78h ; x
.eh_frame:000020F0                 db    0
.eh_frame:000020F1                 db  3Fh ; ?
.eh_frame:000020F2                 db  1Ah
.eh_frame:000020F3                 db  3Bh ; ;
.eh_frame:000020F4                 db  2Ah ; *
.eh_frame:000020F5                 db  32h ; 2
.eh_frame:000020F6                 db  24h ; $
.eh_frame:000020F7                 db  22h ; "
.eh_frame:000020F8                 db  10h
.eh_frame:000020F9                 db    0
.eh_frame:000020FA                 db    0
.eh_frame:000020FB                 db    0
.eh_frame:000020FC                 db  54h ; T
.eh_frame:000020FD                 db    0
.eh_frame:000020FE                 db    0
.eh_frame:000020FF                 db    0
.eh_frame:00002100                 db 0A0h
.eh_frame:00002101                 db 0EFh
.eh_frame:00002102                 db 0FFh
.eh_frame:00002103                 db 0FFh
.eh_frame:00002104                 db    8
.eh_frame:00002105                 db    0
.eh_frame:00002106                 db    0
.eh_frame:00002107                 db    0
.eh_frame:00002108                 db    0
.eh_frame:00002109                 db    0
.eh_frame:0000210A                 db    0
.eh_frame:0000210B                 db    0
.eh_frame:0000210C                 db  18h
.eh_frame:0000210D                 db    0
.eh_frame:0000210E                 db    0
.eh_frame:0000210F                 db    0
.eh_frame:00002110                 db  68h ; h
.eh_frame:00002111                 db    0
.eh_frame:00002112                 db    0
.eh_frame:00002113                 db    0
.eh_frame:00002114                 db 0C9h
.eh_frame:00002115                 db 0F0h
.eh_frame:00002116                 db 0FFh
.eh_frame:00002117                 db 0FFh
.eh_frame:00002118                 db  2Fh ; /
.eh_frame:00002119                 db    0
.eh_frame:0000211A                 db    0
.eh_frame:0000211B                 db    0
.eh_frame:0000211C                 db    0
.eh_frame:0000211D                 db  41h ; A
.eh_frame:0000211E                 db  0Eh
.eh_frame:0000211F                 db    8
.eh_frame:00002120                 db  85h
.eh_frame:00002121                 db    2
.eh_frame:00002122                 db  42h ; B
.eh_frame:00002123                 db  0Dh
.eh_frame:00002124                 db    5
.eh_frame:00002125                 db  44h ; D
.eh_frame:00002126                 db  83h
.eh_frame:00002127                 db    3
.eh_frame:00002128                 db  1Ch
.eh_frame:00002129                 db    0
.eh_frame:0000212A                 db    0
.eh_frame:0000212B                 db    0
.eh_frame:0000212C                 db  84h
.eh_frame:0000212D                 db    0
.eh_frame:0000212E                 db    0
.eh_frame:0000212F                 db    0
.eh_frame:00002130                 db 0DCh
.eh_frame:00002131                 db 0F0h
.eh_frame:00002132                 db 0FFh
.eh_frame:00002133                 db 0FFh
.eh_frame:00002134                 db  12h
.eh_frame:00002135                 db    0
.eh_frame:00002136                 db    0
.eh_frame:00002137                 db    0
.eh_frame:00002138                 db    0
.eh_frame:00002139                 db  41h ; A
.eh_frame:0000213A                 db  0Eh
.eh_frame:0000213B                 db    8
.eh_frame:0000213C                 db  85h
.eh_frame:0000213D                 db    2
.eh_frame:0000213E                 db  42h ; B
.eh_frame:0000213F                 db  0Dh
.eh_frame:00002140                 db    5
.eh_frame:00002141                 db  4Eh ; N
.eh_frame:00002142                 db 0C5h
.eh_frame:00002143                 db  0Ch
.eh_frame:00002144                 db    4
.eh_frame:00002145                 db    4
.eh_frame:00002146                 db    0
.eh_frame:00002147                 db    0
.eh_frame:00002148                 db  1Ch
.eh_frame:00002149                 db    0
.eh_frame:0000214A                 db    0
.eh_frame:0000214B                 db    0
.eh_frame:0000214C                 db 0A4h
.eh_frame:0000214D                 db    0
.eh_frame:0000214E                 db    0
.eh_frame:0000214F                 db    0
.eh_frame:00002150                 db 0CEh
.eh_frame:00002151                 db 0F0h
.eh_frame:00002152                 db 0FFh
.eh_frame:00002153                 db 0FFh
.eh_frame:00002154                 db  15h
.eh_frame:00002155                 db    0
.eh_frame:00002156                 db    0
.eh_frame:00002157                 db    0
.eh_frame:00002158                 db    0
.eh_frame:00002159                 db  41h ; A
.eh_frame:0000215A                 db  0Eh
.eh_frame:0000215B                 db    8
.eh_frame:0000215C                 db  85h
.eh_frame:0000215D                 db    2
.eh_frame:0000215E                 db  42h ; B
.eh_frame:0000215F                 db  0Dh
.eh_frame:00002160                 db    5
.eh_frame:00002161                 db  51h ; Q
.eh_frame:00002162                 db 0C5h
.eh_frame:00002163                 db  0Ch
.eh_frame:00002164                 db    4
.eh_frame:00002165                 db    4
.eh_frame:00002166                 db    0
.eh_frame:00002167                 db    0
.eh_frame:00002168                 db  20h
.eh_frame:00002169                 db    0
.eh_frame:0000216A                 db    0
.eh_frame:0000216B                 db    0
.eh_frame:0000216C                 db 0C4h
.eh_frame:0000216D                 db    0
.eh_frame:0000216E                 db    0
.eh_frame:0000216F                 db    0
.eh_frame:00002170                 db 0C3h
.eh_frame:00002171                 db 0F0h
.eh_frame:00002172                 db 0FFh
.eh_frame:00002173                 db 0FFh
.eh_frame:00002174                 db  8Bh
.eh_frame:00002175                 db    0
.eh_frame:00002176                 db    0
.eh_frame:00002177                 db    0
.eh_frame:00002178                 db    0
.eh_frame:00002179                 db  41h ; A
.eh_frame:0000217A                 db  0Eh
.eh_frame:0000217B                 db    8
.eh_frame:0000217C                 db  85h
.eh_frame:0000217D                 db    2
.eh_frame:0000217E                 db  42h ; B
.eh_frame:0000217F                 db  0Dh
.eh_frame:00002180                 db    5
.eh_frame:00002181                 db  44h ; D
.eh_frame:00002182                 db  83h
.eh_frame:00002183                 db    3
.eh_frame:00002184                 db    2
.eh_frame:00002185                 db  83h
.eh_frame:00002186                 db 0C5h
.eh_frame:00002187                 db 0C3h
.eh_frame:00002188                 db  0Ch
.eh_frame:00002189                 db    4
.eh_frame:0000218A                 db    4
.eh_frame:0000218B                 db    0
.eh_frame:0000218C                 db  1Ch
.eh_frame:0000218D                 db    0
.eh_frame:0000218E                 db    0
.eh_frame:0000218F                 db    0
.eh_frame:00002190                 db 0E8h
.eh_frame:00002191                 db    0
.eh_frame:00002192                 db    0
.eh_frame:00002193                 db    0
.eh_frame:00002194                 db  2Ah ; *
.eh_frame:00002195                 db 0F1h
.eh_frame:00002196                 db 0FFh
.eh_frame:00002197                 db 0FFh
.eh_frame:00002198                 db  10h
.eh_frame:00002199                 db    0
.eh_frame:0000219A                 db    0
.eh_frame:0000219B                 db    0
.eh_frame:0000219C                 db    0
.eh_frame:0000219D                 db  41h ; A
.eh_frame:0000219E                 db  0Eh
.eh_frame:0000219F                 db    8
.eh_frame:000021A0                 db  85h
.eh_frame:000021A1                 db    2
.eh_frame:000021A2                 db  42h ; B
.eh_frame:000021A3                 db  0Dh
.eh_frame:000021A4                 db    5
.eh_frame:000021A5                 db  4Ch ; L
.eh_frame:000021A6                 db 0C5h
.eh_frame:000021A7                 db  0Ch
.eh_frame:000021A8                 db    4
.eh_frame:000021A9                 db    4
.eh_frame:000021AA                 db    0
.eh_frame:000021AB                 db    0
.eh_frame:000021AC                 db  1Ch
.eh_frame:000021AD                 db    0
.eh_frame:000021AE                 db    0
.eh_frame:000021AF                 db    0
.eh_frame:000021B0                 db    8
.eh_frame:000021B1                 db    1
.eh_frame:000021B2                 db    0
.eh_frame:000021B3                 db    0
.eh_frame:000021B4                 db  1Ah
.eh_frame:000021B5                 db 0F1h
.eh_frame:000021B6                 db 0FFh
.eh_frame:000021B7                 db 0FFh
.eh_frame:000021B8                 db  10h
.eh_frame:000021B9                 db    0
.eh_frame:000021BA                 db    0
.eh_frame:000021BB                 db    0
.eh_frame:000021BC                 db    0
.eh_frame:000021BD                 db  41h ; A
.eh_frame:000021BE                 db  0Eh
.eh_frame:000021BF                 db    8
.eh_frame:000021C0                 db  85h
.eh_frame:000021C1                 db    2
.eh_frame:000021C2                 db  42h ; B
.eh_frame:000021C3                 db  0Dh
.eh_frame:000021C4                 db    5
.eh_frame:000021C5                 db  4Ch ; L
.eh_frame:000021C6                 db 0C5h
.eh_frame:000021C7                 db  0Ch
.eh_frame:000021C8                 db    4
.eh_frame:000021C9                 db    4
.eh_frame:000021CA                 db    0
.eh_frame:000021CB                 db    0
.eh_frame:000021CC                 db  1Ch
.eh_frame:000021CD                 db    0
.eh_frame:000021CE                 db    0
.eh_frame:000021CF                 db    0
.eh_frame:000021D0                 db  28h ; (
.eh_frame:000021D1                 db    1
.eh_frame:000021D2                 db    0
.eh_frame:000021D3                 db    0
.eh_frame:000021D4                 db  0Ah
.eh_frame:000021D5                 db 0F1h
.eh_frame:000021D6                 db 0FFh
.eh_frame:000021D7                 db 0FFh
.eh_frame:000021D8                 db  12h
.eh_frame:000021D9                 db    0
.eh_frame:000021DA                 db    0
.eh_frame:000021DB                 db    0
.eh_frame:000021DC                 db    0
.eh_frame:000021DD                 db  41h ; A
.eh_frame:000021DE                 db  0Eh
.eh_frame:000021DF                 db    8
.eh_frame:000021E0                 db  85h
.eh_frame:000021E1                 db    2
.eh_frame:000021E2                 db  42h ; B
.eh_frame:000021E3                 db  0Dh
.eh_frame:000021E4                 db    5
.eh_frame:000021E5                 db  4Eh ; N
.eh_frame:000021E6                 db 0C5h
.eh_frame:000021E7                 db  0Ch
.eh_frame:000021E8                 db    4
.eh_frame:000021E9                 db    4
.eh_frame:000021EA                 db    0
.eh_frame:000021EB                 db    0
.eh_frame:000021EC                 db  1Ch
.eh_frame:000021ED                 db    0
.eh_frame:000021EE                 db    0
.eh_frame:000021EF                 db    0
.eh_frame:000021F0                 db  48h ; H
.eh_frame:000021F1                 db    1
.eh_frame:000021F2                 db    0
.eh_frame:000021F3                 db    0
.eh_frame:000021F4                 db 0FCh
.eh_frame:000021F5                 db 0F0h
.eh_frame:000021F6                 db 0FFh
.eh_frame:000021F7                 db 0FFh
.eh_frame:000021F8                 db  10h
.eh_frame:000021F9                 db    0
.eh_frame:000021FA                 db    0
.eh_frame:000021FB                 db    0
.eh_frame:000021FC                 db    0
.eh_frame:000021FD                 db  41h ; A
.eh_frame:000021FE                 db  0Eh
.eh_frame:000021FF                 db    8
.eh_frame:00002200                 db  85h
.eh_frame:00002201                 db    2
.eh_frame:00002202                 db  42h ; B
.eh_frame:00002203                 db  0Dh
.eh_frame:00002204                 db    5
.eh_frame:00002205                 db  4Ch ; L
.eh_frame:00002206                 db 0C5h
.eh_frame:00002207                 db  0Ch
.eh_frame:00002208                 db    4
.eh_frame:00002209                 db    4
.eh_frame:0000220A                 db    0
.eh_frame:0000220B                 db    0
.eh_frame:0000220C                 db  28h ; (
.eh_frame:0000220D                 db    0
.eh_frame:0000220E                 db    0
.eh_frame:0000220F                 db    0
.eh_frame:00002210                 db  68h ; h
.eh_frame:00002211                 db    1
.eh_frame:00002212                 db    0
.eh_frame:00002213                 db    0
.eh_frame:00002214                 db 0ECh
.eh_frame:00002215                 db 0F0h
.eh_frame:00002216                 db 0FFh
.eh_frame:00002217                 db 0FFh
.eh_frame:00002218                 db  13h
.eh_frame:00002219                 db    3
.eh_frame:0000221A                 db    0
.eh_frame:0000221B                 db    0
.eh_frame:0000221C                 db    0
.eh_frame:0000221D                 db  41h ; A
.eh_frame:0000221E                 db  0Eh
.eh_frame:0000221F                 db    8
.eh_frame:00002220                 db  85h
.eh_frame:00002221                 db    2
.eh_frame:00002222                 db  42h ; B
.eh_frame:00002223                 db  0Dh
.eh_frame:00002224                 db    5
.eh_frame:00002225                 db  45h ; E
.eh_frame:00002226                 db  86h
.eh_frame:00002227                 db    3
.eh_frame:00002228                 db  83h
.eh_frame:00002229                 db    4
.eh_frame:0000222A                 db    3
.eh_frame:0000222B                 db    8
.eh_frame:0000222C                 db    3
.eh_frame:0000222D                 db 0C3h
.eh_frame:0000222E                 db  41h ; A
.eh_frame:0000222F                 db 0C6h
.eh_frame:00002230                 db  41h ; A
.eh_frame:00002231                 db 0C5h
.eh_frame:00002232                 db  0Ch
.eh_frame:00002233                 db    4
.eh_frame:00002234                 db    4
.eh_frame:00002235                 db    0
.eh_frame:00002236                 db    0
.eh_frame:00002237                 db    0
.eh_frame:00002238                 db  28h ; (
.eh_frame:00002239                 db    0
.eh_frame:0000223A                 db    0
.eh_frame:0000223B                 db    0
.eh_frame:0000223C                 db  94h
.eh_frame:0000223D                 db    1
.eh_frame:0000223E                 db    0
.eh_frame:0000223F                 db    0
.eh_frame:00002240                 db 0D3h
.eh_frame:00002241                 db 0F3h
.eh_frame:00002242                 db 0FFh
.eh_frame:00002243                 db 0FFh
.eh_frame:00002244                 db 0AFh
.eh_frame:00002245                 db    0
.eh_frame:00002246                 db    0
.eh_frame:00002247                 db    0
.eh_frame:00002248                 db    0
.eh_frame:00002249                 db  44h ; D
.eh_frame:0000224A                 db  0Ch
.eh_frame:0000224B                 db    1
.eh_frame:0000224C                 db    0
.eh_frame:0000224D                 db  49h ; I
.eh_frame:0000224E                 db  10h
.eh_frame:0000224F                 db    5
.eh_frame:00002250                 db    2
.eh_frame:00002251                 db  75h ; u
.eh_frame:00002252                 db    0
.eh_frame:00002253                 db  41h ; A
.eh_frame:00002254                 db  0Fh
.eh_frame:00002255                 db    3
.eh_frame:00002256                 db  75h ; u
.eh_frame:00002257                 db  7Ch ; |
.eh_frame:00002258                 db    6
.eh_frame:00002259                 db    2
.eh_frame:0000225A                 db  9Ch
.eh_frame:0000225B                 db  0Ch
.eh_frame:0000225C                 db    1
.eh_frame:0000225D                 db    0
.eh_frame:0000225E                 db  41h ; A
.eh_frame:0000225F                 db 0C5h
.eh_frame:00002260                 db  43h ; C
.eh_frame:00002261                 db  0Ch
.eh_frame:00002262                 db    4
.eh_frame:00002263                 db    4
.eh_frame:00002264                 db  10h
.eh_frame:00002265                 db    0
.eh_frame:00002266                 db    0
.eh_frame:00002267                 db    0
.eh_frame:00002268                 db 0C0h
.eh_frame:00002269                 db    1
.eh_frame:0000226A                 db    0
.eh_frame:0000226B                 db    0
.eh_frame:0000226C                 db  56h ; V
.eh_frame:0000226D                 db 0F4h
.eh_frame:0000226E                 db 0FFh
.eh_frame:0000226F                 db 0FFh
.eh_frame:00002270                 db    4
.eh_frame:00002271                 db    0
.eh_frame:00002272                 db    0
.eh_frame:00002273                 db    0
.eh_frame:00002274                 db    0
.eh_frame:00002275                 db    0
.eh_frame:00002276                 db    0
.eh_frame:00002277                 db    0
.eh_frame:00002278                 db  18h
.eh_frame:00002279                 db    0
.eh_frame:0000227A                 db    0
.eh_frame:0000227B                 db    0
.eh_frame:0000227C                 db 0D4h
.eh_frame:0000227D                 db    1
.eh_frame:0000227E                 db    0
.eh_frame:0000227F                 db    0
.eh_frame:00002280                 db  50h ; P
.eh_frame:00002281                 db 0F4h
.eh_frame:00002282                 db 0FFh
.eh_frame:00002283                 db 0FFh
.eh_frame:00002284                 db  18h
.eh_frame:00002285                 db    0
.eh_frame:00002286                 db    0
.eh_frame:00002287                 db    0
.eh_frame:00002288                 db    0
.eh_frame:00002289                 db  45h ; E
.eh_frame:0000228A                 db  0Eh
.eh_frame:0000228B                 db    8
.eh_frame:0000228C                 db  83h
.eh_frame:0000228D                 db    2
.eh_frame:0000228E                 db  4Eh ; N
.eh_frame:0000228F                 db  0Eh
.eh_frame:00002290                 db  10h
.eh_frame:00002291                 db    0
.eh_frame:00002292                 db    0
.eh_frame:00002293                 db    0
.eh_frame:00002294 __FRAME_END__   db    0
.eh_frame:00002295                 db    0
.eh_frame:00002296                 db    0
.eh_frame:00002297                 db    0
.eh_frame:00002297 _eh_frame       ends
.eh_frame:00002297
.init_array:00003EC8 ; ELF Initialization Function Table
.init_array:00003EC8 ; ===========================================================================
.init_array:00003EC8
.init_array:00003EC8 ; Segment type: Pure data
.init_array:00003EC8 ; Segment permissions: Read/Write
.init_array:00003EC8 _init_array     segment dword public 'DATA' use32
.init_array:00003EC8                 assume cs:_init_array
.init_array:00003EC8                 ;org 3EC8h
.init_array:00003EC8 __frame_dummy_init_array_entry dd offset frame_dummy
.init_array:00003EC8                                         ; DATA XREF: LOAD:000000DC↑o
.init_array:00003EC8                                         ; LOAD:0000017C↑o
.init_array:00003EC8 _init_array     ends
.init_array:00003EC8
.fini_array:00003ECC ; ELF Termination Function Table
.fini_array:00003ECC ; ===========================================================================
.fini_array:00003ECC
.fini_array:00003ECC ; Segment type: Pure data
.fini_array:00003ECC ; Segment permissions: Read/Write
.fini_array:00003ECC _fini_array     segment dword public 'DATA' use32
.fini_array:00003ECC                 assume cs:_fini_array
.fini_array:00003ECC                 ;org 3ECCh
.fini_array:00003ECC __do_global_dtors_aux_fini_array_entry dd offset __do_global_dtors_aux
.fini_array:00003ECC _fini_array     ends
.fini_array:00003ECC
LOAD:00003ED0 ; ELF Dynamic Information
LOAD:00003ED0 ; ===========================================================================
LOAD:00003ED0
LOAD:00003ED0 ; Segment type: Pure data
LOAD:00003ED0 ; Segment permissions: Read/Write
LOAD:00003ED0 LOAD            segment mempage public 'DATA' use32
LOAD:00003ED0                 assume cs:LOAD
LOAD:00003ED0                 ;org 3ED0h
LOAD:00003ED0 _DYNAMIC        Elf32_Dyn <1, <64h>>    ; DATA XREF: LOAD:000000FC↑o
LOAD:00003ED0                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:00003ED0                                         ; DT_NEEDED libc.so.6
LOAD:00003ED8                 Elf32_Dyn <0Ch, <1000h>> ; DT_INIT
LOAD:00003EE0                 Elf32_Dyn <0Dh, <16E8h>> ; DT_FINI
LOAD:00003EE8                 Elf32_Dyn <19h, <3EC8h>> ; DT_INIT_ARRAY
LOAD:00003EF0                 Elf32_Dyn <1Bh, <4>>    ; DT_INIT_ARRAYSZ
LOAD:00003EF8                 Elf32_Dyn <1Ah, <3ECCh>> ; DT_FINI_ARRAY
LOAD:00003F00                 Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
LOAD:00003F08                 Elf32_Dyn <6FFFFEF5h, <1ECh>> ; DT_GNU_HASH
LOAD:00003F10                 Elf32_Dyn <5, <2CCh>>   ; DT_STRTAB
LOAD:00003F18                 Elf32_Dyn <6, <20Ch>>   ; DT_SYMTAB
LOAD:00003F20                 Elf32_Dyn <0Ah, <0DEh>> ; DT_STRSZ
LOAD:00003F28                 Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
LOAD:00003F30                 Elf32_Dyn <15h, <0>>    ; DT_DEBUG
LOAD:00003F38                 Elf32_Dyn <3, <3FC8h>>  ; DT_PLTGOT
LOAD:00003F40                 Elf32_Dyn <2, <30h>>    ; DT_PLTRELSZ
LOAD:00003F48                 Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
LOAD:00003F50                 Elf32_Dyn <17h, <454h>> ; DT_JMPREL
LOAD:00003F58                 Elf32_Dyn <11h, <414h>> ; DT_REL
LOAD:00003F60                 Elf32_Dyn <12h, <40h>>  ; DT_RELSZ
LOAD:00003F68                 Elf32_Dyn <13h, <8>>    ; DT_RELENT
LOAD:00003F70                 Elf32_Dyn <1Eh, <8>>    ; DT_FLAGS
LOAD:00003F78                 Elf32_Dyn <6FFFFFFBh, <8000001h>> ; DT_FLAGS_1
LOAD:00003F80                 Elf32_Dyn <6FFFFFFEh, <3C4h>> ; DT_VERNEED
LOAD:00003F88                 Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
LOAD:00003F90                 Elf32_Dyn <6FFFFFF0h, <3AAh>> ; DT_VERSYM
LOAD:00003F98                 Elf32_Dyn <6FFFFFFAh, <4>> ; DT_RELCOUNT
LOAD:00003FA0                 Elf32_Dyn <0>           ; DT_NULL
LOAD:00003FA8                 db    0
LOAD:00003FA9                 db    0
LOAD:00003FAA                 db    0
LOAD:00003FAB                 db    0
LOAD:00003FAC                 db    0
LOAD:00003FAD                 db    0
LOAD:00003FAE                 db    0
LOAD:00003FAF                 db    0
LOAD:00003FB0                 db    0
LOAD:00003FB1                 db    0
LOAD:00003FB2                 db    0
LOAD:00003FB3                 db    0
LOAD:00003FB4                 db    0
LOAD:00003FB5                 db    0
LOAD:00003FB6                 db    0
LOAD:00003FB7                 db    0
LOAD:00003FB8                 db    0
LOAD:00003FB9                 db    0
LOAD:00003FBA                 db    0
LOAD:00003FBB                 db    0
LOAD:00003FBC                 db    0
LOAD:00003FBD                 db    0
LOAD:00003FBE                 db    0
LOAD:00003FBF                 db    0
LOAD:00003FC0                 db    0
LOAD:00003FC1                 db    0
LOAD:00003FC2                 db    0
LOAD:00003FC3                 db    0
LOAD:00003FC4                 db    0
LOAD:00003FC5                 db    0
LOAD:00003FC6                 db    0
LOAD:00003FC7                 db    0
LOAD:00003FC7 LOAD            ends
LOAD:00003FC7
.got:00003FC8 ; ===========================================================================
.got:00003FC8
.got:00003FC8 ; Segment type: Pure data
.got:00003FC8 ; Segment permissions: Read/Write
.got:00003FC8 _got            segment dword public 'DATA' use32
.got:00003FC8                 assume cs:_got
.got:00003FC8                 ;org 3FC8h
.got:00003FC8 _GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC
.got:00003FC8                                         ; DATA XREF: _init_proc+D↑o
.got:00003FC8                                         ; _start+14↑o ...
.got:00003FCC                 dd 0
.got:00003FD0                 dd 0
.got:00003FD4 __libc_start_main_ptr dd offset __libc_start_main
.got:00003FD4                                         ; DATA XREF: ___libc_start_main↑r
.got:00003FD8 __stack_chk_fail_ptr dd offset __stack_chk_fail
.got:00003FD8                                         ; DATA XREF: ___stack_chk_fail↑r
.got:00003FDC malloc_ptr      dd offset malloc        ; DATA XREF: _malloc↑r
.got:00003FE0 memset_ptr      dd offset memset        ; DATA XREF: _memset↑r
.got:00003FE4 abort_ptr       dd offset abort         ; DATA XREF: _abort↑r
.got:00003FE8 __assert_fail_ptr dd offset __assert_fail
.got:00003FE8                                         ; DATA XREF: ___assert_fail↑r
.got:00003FEC _ITM_deregisterTMCloneTable_ptr dd offset _ITM_deregisterTMCloneTable
.got:00003FEC                                         ; DATA XREF: deregister_tm_clones+1B↑r
.got:00003FF0 __cxa_finalize_ptr dd offset __cxa_finalize
.got:00003FF0                                         ; DATA XREF: ___cxa_finalize↑r
.got:00003FF0                                         ; __do_global_dtors_aux+1F↑r
.got:00003FF4 __gmon_start___ptr dd offset __gmon_start__
.got:00003FF4                                         ; DATA XREF: _init_proc+13↑r
.got:00003FF8 main_ptr        dd offset main          ; DATA XREF: _start+20↑r
.got:00003FFC _ITM_registerTMCloneTable_ptr dd offset _ITM_registerTMCloneTable
.got:00003FFC                                         ; DATA XREF: register_tm_clones+2E↑r
.got:00003FFC _got            ends
.got:00003FFC
.data:00004000 ; ===========================================================================
.data:00004000
.data:00004000 ; Segment type: Pure data
.data:00004000 ; Segment permissions: Read/Write
.data:00004000 _data           segment dword public 'DATA' use32
.data:00004000                 assume cs:_data
.data:00004000                 ;org 4000h
.data:00004000                 public __data_start ; weak
.data:00004000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:00004000                                         ; data_start
.data:00004001                 db    0
.data:00004002                 db    0
.data:00004003                 db    0
.data:00004004                 public __dso_handle
.data:00004004 __dso_handle    dd offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+2C↑r
.data:00004004                                         ; .data:__dso_handle↓o
.data:00004004 _data           ends
.data:00004004
.bss:00004008 ; ===========================================================================
.bss:00004008
.bss:00004008 ; Segment type: Uninitialized
.bss:00004008 ; Segment permissions: Read/Write
.bss:00004008 _bss            segment byte public 'BSS' use32
.bss:00004008                 assume cs:_bss
.bss:00004008                 ;org 4008h
.bss:00004008                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00004008                 public __bss_start
.bss:00004008 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones+B↑o
.bss:00004008                                         ; deregister_tm_clones+11↑o ...
.bss:00004008                                         ; Alternative name is '__TMC_END__'
.bss:00004008                                         ; completed.0
.bss:00004008                                         ; _edata
.bss:00004009                 align 4
.bss:00004009 _bss            ends
.bss:00004009
.prgend:0000400C ; ===========================================================================
.prgend:0000400C
.prgend:0000400C ; Segment type: Zero-length
.prgend:0000400C _prgend         segment byte public '' use32
.prgend:0000400C _end            label byte
.prgend:0000400C _prgend         ends
.prgend:0000400C
extern:00004010 ; ===========================================================================
extern:00004010
extern:00004010 ; Segment type: Externs
extern:00004010 ; extern
extern:00004010 ; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00004010                 extrn __libc_start_main:near
extern:00004010                                         ; CODE XREF: ___libc_start_main↑j
extern:00004010                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00004014                 extrn __stack_chk_fail:near
extern:00004014                                         ; CODE XREF: ___stack_chk_fail↑j
extern:00004014                                         ; DATA XREF: .got:__stack_chk_fail_ptr↑o
extern:00004018 ; int __cdecl _cxa_finalize(void *)
extern:00004018                 extrn __cxa_finalize:near ; weak
extern:00004018                                         ; CODE XREF: ___cxa_finalize↑j
extern:00004018                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:0000401C ; void *malloc(size_t size)
extern:0000401C                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:0000401C                                         ; DATA XREF: .got:malloc_ptr↑o
extern:00004020 ; void *memset(void *s, int c, size_t n)
extern:00004020                 extrn memset:near       ; CODE XREF: _memset↑j
extern:00004020                                         ; DATA XREF: .got:memset_ptr↑o
extern:00004024 ; void abort(void)
extern:00004024                 extrn abort:near        ; CODE XREF: _abort↑j
extern:00004024                                         ; DATA XREF: .got:abort_ptr↑o
extern:00004028 ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00004028                 extrn __assert_fail:near
extern:00004028                                         ; CODE XREF: ___assert_fail↑j
extern:00004028                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:0000402C                 extrn _ITM_deregisterTMCloneTable ; weak
extern:0000402C                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00004030                 extrn __gmon_start__ ; weak
extern:00004030                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:00004034                 extrn _ITM_registerTMCloneTable ; weak
extern:00004034                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:00004034
extern:00004034
extern:00004034                 end _start
