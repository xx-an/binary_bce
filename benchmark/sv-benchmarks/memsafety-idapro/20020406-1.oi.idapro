.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : 9E81DF40A1D4A7C2FABBC4F6F8BE35F4BD4051A5BAD02E0566556758858C815E
.text:08000000 ; Input MD5    : 863A986B981FCFFE2C54F044AF08D191
.text:08000000 ; Input CRC32  : 0DB50CC3
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/20020406-1.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : '20020406-1.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: noreturn bp-based frame
.text:08000000
.text:08000000                 public reach_error
.text:08000000 reach_error     proc near               ; DATA XREF: .eh_frame:0800052C↓o
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_ax
.text:0800000C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000011                 lea     edx, (__PRETTY_FUNCTION___0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "reach_error"
.text:08000017                 push    edx             ; function
.text:08000018                 push    3               ; line
.text:0800001A                 lea     edx, (a200204061C - _GLOBAL_OFFSET_TABLE_)[eax] ; "20020406-1.c"
.text:08000020                 push    edx             ; file
.text:08000021                 lea     edx, (a0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "0"
.text:08000027                 push    edx             ; assertion
.text:08000028                 mov     ebx, eax
.text:0800002A                 call    __assert_fail   ; PIC mode
.text:0800002A ; } // starts at 8000000
.text:0800002A reach_error     endp
.text:0800002A
.text:0800002F
.text:0800002F ; =============== S U B R O U T I N E =======================================
.text:0800002F
.text:0800002F ; Attributes: bp-based frame
.text:0800002F
.text:0800002F                 public FFmul
.text:0800002F FFmul           proc near               ; CODE XREF: DUPFFexgcd+188↓p
.text:0800002F                                         ; DUPFFexgcd+1C5↓p
.text:0800002F                                         ; DATA XREF: ...
.text:0800002F
.text:0800002F arg_0           = dword ptr  8
.text:0800002F
.text:0800002F ; __unwind {
.text:0800002F                 push    ebp
.text:08000030                 mov     ebp, esp
.text:08000032                 call    __x86_get_pc_thunk_ax
.text:08000037                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800003C                 mov     eax, [ebp+arg_0]
.text:0800003F                 pop     ebp
.text:08000040                 retn
.text:08000040 ; } // starts at 800002F
.text:08000040 FFmul           endp
.text:08000040
.text:08000041
.text:08000041 ; =============== S U B R O U T I N E =======================================
.text:08000041
.text:08000041 ; Attributes: bp-based frame
.text:08000041
.text:08000041                 public DUPFFdeg
.text:08000041 DUPFFdeg        proc near               ; CODE XREF: DUPFFexgcd+16↓p
.text:08000041                                         ; DUPFFexgcd+23↓p ...
.text:08000041
.text:08000041 arg_0           = dword ptr  8
.text:08000041
.text:08000041 ; __unwind {
.text:08000041                 push    ebp
.text:08000042                 mov     ebp, esp
.text:08000044                 call    __x86_get_pc_thunk_ax
.text:08000049                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800004E                 mov     eax, [ebp+arg_0]
.text:08000051                 mov     eax, [eax+4]
.text:08000054                 pop     ebp
.text:08000055                 retn
.text:08000055 ; } // starts at 8000041
.text:08000055 DUPFFdeg        endp
.text:08000055
.text:08000056
.text:08000056 ; =============== S U B R O U T I N E =======================================
.text:08000056
.text:08000056 ; Attributes: bp-based frame
.text:08000056
.text:08000056                 public DUPFFnew
.text:08000056 DUPFFnew        proc near               ; CODE XREF: DUPFFexgcd+F2↓p
.text:08000056                                         ; DUPFFexgcd+119↓p ...
.text:08000056
.text:08000056 var_C           = dword ptr -0Ch
.text:08000056 var_4           = dword ptr -4
.text:08000056 arg_0           = dword ptr  8
.text:08000056
.text:08000056 ; __unwind {
.text:08000056                 push    ebp
.text:08000057                 mov     ebp, esp
.text:08000059                 push    ebx
.text:0800005A                 sub     esp, 14h
.text:0800005D                 call    __x86_get_pc_thunk_bx
.text:08000062                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000068                 sub     esp, 0Ch
.text:0800006B                 push    0Ch             ; size
.text:0800006D                 call    malloc          ; PIC mode
.text:08000072                 add     esp, 10h
.text:08000075                 mov     [ebp+var_C], eax
.text:08000078                 mov     eax, [ebp+var_C]
.text:0800007B                 mov     dword ptr [eax+8], 0
.text:08000082                 cmp     [ebp+arg_0], 0
.text:08000086                 js      short loc_80000C7
.text:08000088                 mov     eax, [ebp+arg_0]
.text:0800008B                 add     eax, 1
.text:0800008E                 shl     eax, 2
.text:08000091                 sub     esp, 0Ch
.text:08000094                 push    eax             ; size
.text:08000095                 call    malloc          ; PIC mode
.text:0800009A                 add     esp, 10h
.text:0800009D                 mov     edx, eax
.text:0800009F                 mov     eax, [ebp+var_C]
.text:080000A2                 mov     [eax+8], edx
.text:080000A5                 mov     eax, [ebp+arg_0]
.text:080000A8                 add     eax, 1
.text:080000AB                 lea     edx, ds:0[eax*4]
.text:080000B2                 mov     eax, [ebp+var_C]
.text:080000B5                 mov     eax, [eax+8]
.text:080000B8                 sub     esp, 4
.text:080000BB                 push    edx             ; n
.text:080000BC                 push    0               ; c
.text:080000BE                 push    eax             ; s
.text:080000BF                 call    memset          ; PIC mode
.text:080000C4                 add     esp, 10h
.text:080000C7
.text:080000C7 loc_80000C7:                            ; CODE XREF: DUPFFnew+30↑j
.text:080000C7                 mov     eax, [ebp+var_C]
.text:080000CA                 mov     edx, [ebp+arg_0]
.text:080000CD                 mov     [eax], edx
.text:080000CF                 mov     eax, [ebp+var_C]
.text:080000D2                 mov     dword ptr [eax+4], 0FFFFFFFFh
.text:080000D9                 mov     eax, [ebp+var_C]
.text:080000DC                 mov     ebx, [ebp+var_4]
.text:080000DF                 leave
.text:080000E0                 retn
.text:080000E0 ; } // starts at 8000056
.text:080000E0 DUPFFnew        endp
.text:080000E0
.text:080000E1
.text:080000E1 ; =============== S U B R O U T I N E =======================================
.text:080000E1
.text:080000E1 ; Attributes: bp-based frame
.text:080000E1
.text:080000E1                 public DUPFFfree
.text:080000E1 DUPFFfree       proc near               ; CODE XREF: DUPFFexgcd+2D5↓p
.text:080000E1                                         ; DUPFFexgcd+2E3↓p ...
.text:080000E1 ; __unwind {
.text:080000E1                 push    ebp
.text:080000E2                 mov     ebp, esp
.text:080000E4                 call    __x86_get_pc_thunk_ax
.text:080000E9                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000EE                 nop
.text:080000EF                 pop     ebp
.text:080000F0                 retn
.text:080000F0 ; } // starts at 80000E1
.text:080000F0 DUPFFfree       endp
.text:080000F0
.text:080000F1
.text:080000F1 ; =============== S U B R O U T I N E =======================================
.text:080000F1
.text:080000F1 ; Attributes: bp-based frame
.text:080000F1
.text:080000F1                 public DUPFFswap
.text:080000F1 DUPFFswap       proc near               ; CODE XREF: DUPFFexgcd+24A↓p
.text:080000F1                                         ; DUPFFexgcd+25B↓p ...
.text:080000F1 ; __unwind {
.text:080000F1                 push    ebp
.text:080000F2                 mov     ebp, esp
.text:080000F4                 call    __x86_get_pc_thunk_ax
.text:080000F9                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000FE                 nop
.text:080000FF                 pop     ebp
.text:08000100                 retn
.text:08000100 ; } // starts at 80000F1
.text:08000100 DUPFFswap       endp
.text:08000100
.text:08000101
.text:08000101 ; =============== S U B R O U T I N E =======================================
.text:08000101
.text:08000101 ; Attributes: bp-based frame
.text:08000101
.text:08000101                 public DUPFFcopy
.text:08000101 DUPFFcopy       proc near               ; CODE XREF: DUPFFexgcd+D0↓p
.text:08000101                                         ; DUPFFexgcd+E1↓p
.text:08000101                                         ; DATA XREF: ...
.text:08000101
.text:08000101 arg_0           = dword ptr  8
.text:08000101
.text:08000101 ; __unwind {
.text:08000101                 push    ebp
.text:08000102                 mov     ebp, esp
.text:08000104                 call    __x86_get_pc_thunk_ax
.text:08000109                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800010E                 mov     eax, [ebp+arg_0]
.text:08000111                 pop     ebp
.text:08000112                 retn
.text:08000112 ; } // starts at 8000101
.text:08000112 DUPFFcopy       endp
.text:08000112
.text:08000113
.text:08000113 ; =============== S U B R O U T I N E =======================================
.text:08000113
.text:08000113 ; Attributes: bp-based frame
.text:08000113
.text:08000113                 public DUPFFshift_add
.text:08000113 DUPFFshift_add  proc near               ; CODE XREF: DUPFFexgcd+1E6↓p
.text:08000113                                         ; DUPFFexgcd+204↓p ...
.text:08000113 ; __unwind {
.text:08000113                 push    ebp
.text:08000114                 mov     ebp, esp
.text:08000116                 call    __x86_get_pc_thunk_ax
.text:0800011B                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000120                 nop
.text:08000121                 pop     ebp
.text:08000122                 retn
.text:08000122 ; } // starts at 8000113
.text:08000122 DUPFFshift_add  endp
.text:08000122
.text:08000123
.text:08000123 ; =============== S U B R O U T I N E =======================================
.text:08000123
.text:08000123 ; Attributes: bp-based frame
.text:08000123
.text:08000123                 public DUPFFexgcd
.text:08000123 DUPFFexgcd      proc near               ; CODE XREF: DUPFFexgcd+3B↓p
.text:08000123                                         ; main+86↓p
.text:08000123                                         ; DATA XREF: ...
.text:08000123
.text:08000123 var_40          = dword ptr -40h
.text:08000123 var_3C          = dword ptr -3Ch
.text:08000123 var_38          = dword ptr -38h
.text:08000123 var_34          = dword ptr -34h
.text:08000123 var_30          = dword ptr -30h
.text:08000123 var_2C          = dword ptr -2Ch
.text:08000123 var_28          = dword ptr -28h
.text:08000123 var_24          = dword ptr -24h
.text:08000123 var_20          = dword ptr -20h
.text:08000123 var_1C          = dword ptr -1Ch
.text:08000123 var_18          = dword ptr -18h
.text:08000123 var_14          = dword ptr -14h
.text:08000123 var_10          = dword ptr -10h
.text:08000123 var_C           = dword ptr -0Ch
.text:08000123 arg_0           = dword ptr  8
.text:08000123 arg_4           = dword ptr  0Ch
.text:08000123 arg_8           = dword ptr  10h
.text:08000123 arg_C           = dword ptr  14h
.text:08000123
.text:08000123 ; __unwind {
.text:08000123                 push    ebp
.text:08000124                 mov     ebp, esp
.text:08000126                 push    esi
.text:08000127                 push    ebx
.text:08000128                 sub     esp, 40h
.text:0800012B                 call    __x86_get_pc_thunk_bx
.text:08000130                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000136                 push    [ebp+arg_8]
.text:08000139                 call    DUPFFdeg
.text:0800013E                 add     esp, 4
.text:08000141                 mov     esi, eax
.text:08000143                 push    [ebp+arg_C]
.text:08000146                 call    DUPFFdeg
.text:0800014B                 add     esp, 4
.text:0800014E                 cmp     esi, eax
.text:08000150                 jge     short loc_800016B
.text:08000152                 push    [ebp+arg_8]
.text:08000155                 push    [ebp+arg_C]
.text:08000158                 push    [ebp+arg_0]
.text:0800015B                 push    [ebp+arg_4]
.text:0800015E                 call    DUPFFexgcd
.text:08000163                 add     esp, 10h
.text:08000166                 jmp     loc_800042F
.text:0800016B ; ---------------------------------------------------------------------------
.text:0800016B
.text:0800016B loc_800016B:                            ; CODE XREF: DUPFFexgcd+2D↑j
.text:0800016B                 sub     esp, 0Ch
.text:0800016E                 push    [ebp+arg_8]
.text:08000171                 call    DUPFFdeg
.text:08000176                 add     esp, 10h
.text:08000179                 cmp     eax, 2
.text:0800017C                 jnz     short loc_8000191
.text:0800017E                 sub     esp, 0Ch
.text:08000181                 push    [ebp+arg_C]
.text:08000184                 call    DUPFFdeg
.text:08000189                 add     esp, 10h
.text:0800018C                 cmp     eax, 1
.text:0800018F                 jz      short loc_8000196
.text:08000191
.text:08000191 loc_8000191:                            ; CODE XREF: DUPFFexgcd+59↑j
.text:08000191                 call    abort           ; PIC mode
.text:08000196 ; ---------------------------------------------------------------------------
.text:08000196
.text:08000196 loc_8000196:                            ; CODE XREF: DUPFFexgcd+6C↑j
.text:08000196                 mov     eax, [ebp+arg_8]
.text:08000199                 mov     eax, [eax+8]
.text:0800019C                 mov     eax, [eax]
.text:0800019E                 test    eax, eax
.text:080001A0                 jnz     short loc_80001AA
.text:080001A2                 mov     eax, [ebp+arg_8]
.text:080001A5                 jmp     loc_800042F
.text:080001AA ; ---------------------------------------------------------------------------
.text:080001AA
.text:080001AA loc_80001AA:                            ; CODE XREF: DUPFFexgcd+7D↑j
.text:080001AA                 mov     [ebp+var_38], 2
.text:080001B1                 sub     esp, 0Ch
.text:080001B4                 push    [ebp+arg_8]
.text:080001B7                 call    DUPFFdeg
.text:080001BC                 add     esp, 10h
.text:080001BF                 mov     [ebp+var_40], eax
.text:080001C2                 cmp     [ebp+var_40], 0
.text:080001C6                 jns     short loc_80001CF
.text:080001C8                 mov     [ebp+var_40], 0
.text:080001CF
.text:080001CF loc_80001CF:                            ; CODE XREF: DUPFFexgcd+A3↑j
.text:080001CF                 sub     esp, 0Ch
.text:080001D2                 push    [ebp+arg_C]
.text:080001D5                 call    DUPFFdeg
.text:080001DA                 add     esp, 10h
.text:080001DD                 mov     [ebp+var_3C], eax
.text:080001E0                 cmp     [ebp+var_3C], 0
.text:080001E4                 jns     short loc_80001ED
.text:080001E6                 mov     [ebp+var_3C], 0
.text:080001ED
.text:080001ED loc_80001ED:                            ; CODE XREF: DUPFFexgcd+C1↑j
.text:080001ED                 sub     esp, 0Ch
.text:080001F0                 push    [ebp+arg_8]
.text:080001F3                 call    DUPFFcopy
.text:080001F8                 add     esp, 10h
.text:080001FB                 mov     [ebp+var_34], eax
.text:080001FE                 sub     esp, 0Ch
.text:08000201                 push    [ebp+arg_C]
.text:08000204                 call    DUPFFcopy
.text:08000209                 add     esp, 10h
.text:0800020C                 mov     [ebp+var_30], eax
.text:0800020F                 sub     esp, 0Ch
.text:08000212                 push    [ebp+var_3C]
.text:08000215                 call    DUPFFnew
.text:0800021A                 add     esp, 10h
.text:0800021D                 mov     [ebp+var_2C], eax
.text:08000220                 mov     eax, [ebp+var_2C]
.text:08000223                 mov     eax, [eax+8]
.text:08000226                 mov     dword ptr [eax], 1
.text:0800022C                 mov     eax, [ebp+var_2C]
.text:0800022F                 mov     dword ptr [eax+4], 0
.text:08000236                 sub     esp, 0Ch
.text:08000239                 push    [ebp+var_40]
.text:0800023C                 call    DUPFFnew
.text:08000241                 add     esp, 10h
.text:08000244                 mov     [ebp+var_28], eax
.text:08000247                 sub     esp, 0Ch
.text:0800024A                 push    [ebp+var_3C]
.text:0800024D                 call    DUPFFnew
.text:08000252                 add     esp, 10h
.text:08000255                 mov     [ebp+var_24], eax
.text:08000258                 sub     esp, 0Ch
.text:0800025B                 push    [ebp+var_40]
.text:0800025E                 call    DUPFFnew
.text:08000263                 add     esp, 10h
.text:08000266                 mov     [ebp+var_20], eax
.text:08000269                 mov     eax, [ebp+var_20]
.text:0800026C                 mov     eax, [eax+8]
.text:0800026F                 mov     dword ptr [eax], 1
.text:08000275                 mov     eax, [ebp+var_20]
.text:08000278                 mov     dword ptr [eax+4], 0
.text:0800027F                 jmp     loc_8000397
.text:08000284 ; ---------------------------------------------------------------------------
.text:08000284
.text:08000284 loc_8000284:                            ; CODE XREF: DUPFFexgcd+284↓j
.text:08000284                 sub     esp, 0Ch
.text:08000287                 push    [ebp+var_30]
.text:0800028A                 call    DUPFFdeg
.text:0800028F                 add     esp, 10h
.text:08000292                 mov     [ebp+var_1C], eax
.text:08000295                 mov     eax, [ebp+var_30]
.text:08000298                 mov     edx, [eax+8]
.text:0800029B                 mov     eax, [ebp+var_1C]
.text:0800029E                 shl     eax, 2
.text:080002A1                 add     eax, edx
.text:080002A3                 mov     eax, [eax]
.text:080002A5                 sub     esp, 8
.text:080002A8                 push    eax
.text:080002A9                 push    1
.text:080002AB                 call    FFmul
.text:080002B0                 add     esp, 10h
.text:080002B3                 mov     [ebp+var_18], eax
.text:080002B6                 jmp     loc_800034D
.text:080002BB ; ---------------------------------------------------------------------------
.text:080002BB
.text:080002BB loc_80002BB:                            ; CODE XREF: DUPFFexgcd+23B↓j
.text:080002BB                 sub     esp, 0Ch
.text:080002BE                 push    [ebp+var_34]
.text:080002C1                 call    DUPFFdeg
.text:080002C6                 add     esp, 10h
.text:080002C9                 mov     [ebp+var_14], eax
.text:080002CC                 mov     eax, [ebp+var_34]
.text:080002CF                 mov     edx, [eax+8]
.text:080002D2                 mov     eax, [ebp+var_14]
.text:080002D5                 shl     eax, 2
.text:080002D8                 add     eax, edx
.text:080002DA                 mov     eax, [eax]
.text:080002DC                 mov     [ebp+var_10], eax
.text:080002DF                 sub     esp, 8
.text:080002E2                 push    [ebp+var_18]
.text:080002E5                 push    [ebp+var_10]
.text:080002E8                 call    FFmul
.text:080002ED                 add     esp, 10h
.text:080002F0                 mov     [ebp+var_C], eax
.text:080002F3                 mov     eax, [ebp+var_38]
.text:080002F6                 sub     eax, [ebp+var_C]
.text:080002F9                 mov     edx, eax
.text:080002FB                 mov     eax, [ebp+var_14]
.text:080002FE                 sub     eax, [ebp+var_1C]
.text:08000301                 push    edx
.text:08000302                 push    eax
.text:08000303                 push    [ebp+var_30]
.text:08000306                 push    [ebp+var_34]
.text:08000309                 call    DUPFFshift_add
.text:0800030E                 add     esp, 10h
.text:08000311                 mov     eax, [ebp+var_38]
.text:08000314                 sub     eax, [ebp+var_C]
.text:08000317                 mov     edx, eax
.text:08000319                 mov     eax, [ebp+var_14]
.text:0800031C                 sub     eax, [ebp+var_1C]
.text:0800031F                 push    edx
.text:08000320                 push    eax
.text:08000321                 push    [ebp+var_24]
.text:08000324                 push    [ebp+var_2C]
.text:08000327                 call    DUPFFshift_add
.text:0800032C                 add     esp, 10h
.text:0800032F                 mov     eax, [ebp+var_38]
.text:08000332                 sub     eax, [ebp+var_C]
.text:08000335                 mov     edx, eax
.text:08000337                 mov     eax, [ebp+var_14]
.text:0800033A                 sub     eax, [ebp+var_1C]
.text:0800033D                 push    edx
.text:0800033E                 push    eax
.text:0800033F                 push    [ebp+var_20]
.text:08000342                 push    [ebp+var_28]
.text:08000345                 call    DUPFFshift_add
.text:0800034A                 add     esp, 10h
.text:0800034D
.text:0800034D loc_800034D:                            ; CODE XREF: DUPFFexgcd+193↑j
.text:0800034D                 sub     esp, 0Ch
.text:08000350                 push    [ebp+var_34]
.text:08000353                 call    DUPFFdeg
.text:08000358                 add     esp, 10h
.text:0800035B                 cmp     [ebp+var_1C], eax
.text:0800035E                 jle     loc_80002BB
.text:08000364                 sub     esp, 8
.text:08000367                 push    [ebp+var_30]
.text:0800036A                 push    [ebp+var_34]
.text:0800036D                 call    DUPFFswap
.text:08000372                 add     esp, 10h
.text:08000375                 sub     esp, 8
.text:08000378                 push    [ebp+var_24]
.text:0800037B                 push    [ebp+var_2C]
.text:0800037E                 call    DUPFFswap
.text:08000383                 add     esp, 10h
.text:08000386                 sub     esp, 8
.text:08000389                 push    [ebp+var_20]
.text:0800038C                 push    [ebp+var_28]
.text:0800038F                 call    DUPFFswap
.text:08000394                 add     esp, 10h
.text:08000397
.text:08000397 loc_8000397:                            ; CODE XREF: DUPFFexgcd+15C↑j
.text:08000397                 sub     esp, 0Ch
.text:0800039A                 push    [ebp+var_30]
.text:0800039D                 call    DUPFFdeg
.text:080003A2                 add     esp, 10h
.text:080003A5                 test    eax, eax
.text:080003A7                 jg      loc_8000284
.text:080003AD                 sub     esp, 0Ch
.text:080003B0                 push    [ebp+var_30]
.text:080003B3                 call    DUPFFdeg
.text:080003B8                 add     esp, 10h
.text:080003BB                 test    eax, eax
.text:080003BD                 jnz     short loc_80003F2
.text:080003BF                 sub     esp, 8
.text:080003C2                 push    [ebp+var_30]
.text:080003C5                 push    [ebp+var_34]
.text:080003C8                 call    DUPFFswap
.text:080003CD                 add     esp, 10h
.text:080003D0                 sub     esp, 8
.text:080003D3                 push    [ebp+var_24]
.text:080003D6                 push    [ebp+var_2C]
.text:080003D9                 call    DUPFFswap
.text:080003DE                 add     esp, 10h
.text:080003E1                 sub     esp, 8
.text:080003E4                 push    [ebp+var_20]
.text:080003E7                 push    [ebp+var_28]
.text:080003EA                 call    DUPFFswap
.text:080003EF                 add     esp, 10h
.text:080003F2
.text:080003F2 loc_80003F2:                            ; CODE XREF: DUPFFexgcd+29A↑j
.text:080003F2                 sub     esp, 0Ch
.text:080003F5                 push    [ebp+var_24]
.text:080003F8                 call    DUPFFfree
.text:080003FD                 add     esp, 10h
.text:08000400                 sub     esp, 0Ch
.text:08000403                 push    [ebp+var_20]
.text:08000406                 call    DUPFFfree
.text:0800040B                 add     esp, 10h
.text:0800040E                 sub     esp, 0Ch
.text:08000411                 push    [ebp+var_30]
.text:08000414                 call    DUPFFfree
.text:08000419                 add     esp, 10h
.text:0800041C                 mov     eax, [ebp+arg_0]
.text:0800041F                 mov     edx, [ebp+var_2C]
.text:08000422                 mov     [eax], edx
.text:08000424                 mov     eax, [ebp+arg_4]
.text:08000427                 mov     edx, [ebp+var_28]
.text:0800042A                 mov     [eax], edx
.text:0800042C                 mov     eax, [ebp+var_34]
.text:0800042F
.text:0800042F loc_800042F:                            ; CODE XREF: DUPFFexgcd+43↑j
.text:0800042F                                         ; DUPFFexgcd+82↑j
.text:0800042F                 lea     esp, [ebp-8]
.text:08000432                 pop     ebx
.text:08000433                 pop     esi
.text:08000434                 pop     ebp
.text:08000435                 retn
.text:08000435 ; } // starts at 8000123
.text:08000435 DUPFFexgcd      endp
.text:08000435
.text:08000436
.text:08000436 ; =============== S U B R O U T I N E =======================================
.text:08000436
.text:08000436 ; Attributes: bp-based frame fuzzy-sp
.text:08000436
.text:08000436 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:08000436                 public main
.text:08000436 main            proc near               ; DATA XREF: .eh_frame:08000658↓o
.text:08000436
.text:08000436 var_20          = byte ptr -20h
.text:08000436 var_1C          = byte ptr -1Ch
.text:08000436 var_18          = dword ptr -18h
.text:08000436 var_14          = dword ptr -14h
.text:08000436 var_10          = dword ptr -10h
.text:08000436 var_C           = dword ptr -0Ch
.text:08000436 var_4           = dword ptr -4
.text:08000436 argc            = dword ptr  8
.text:08000436 argv            = dword ptr  0Ch
.text:08000436 envp            = dword ptr  10h
.text:08000436
.text:08000436 ; __unwind {
.text:08000436                 lea     ecx, [esp+4]
.text:0800043A                 and     esp, 0FFFFFFF0h
.text:0800043D                 push    dword ptr [ecx-4]
.text:08000440                 push    ebp
.text:08000441                 mov     ebp, esp
.text:08000443                 push    ecx
.text:08000444                 sub     esp, 24h
.text:08000447                 call    __x86_get_pc_thunk_ax
.text:0800044C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000451                 mov     eax, large gs:14h
.text:08000457                 mov     [ebp+var_C], eax
.text:0800045A                 xor     eax, eax
.text:0800045C                 sub     esp, 0Ch
.text:0800045F                 push    1
.text:08000461                 call    DUPFFnew
.text:08000466                 add     esp, 10h
.text:08000469                 mov     [ebp+var_18], eax
.text:0800046C                 mov     eax, [ebp+var_18]
.text:0800046F                 mov     eax, [eax+8]
.text:08000472                 add     eax, 4
.text:08000475                 mov     ds:(_GLOBAL_OFFSET_TABLE_ - 80006B8h)[eax], 1
.text:0800047B                 mov     eax, [ebp+var_18]
.text:0800047E                 mov     dword ptr [eax+4], 1
.text:08000485                 sub     esp, 0Ch
.text:08000488                 push    2
.text:0800048A                 call    DUPFFnew
.text:0800048F                 add     esp, 10h
.text:08000492                 mov     [ebp+var_14], eax
.text:08000495                 mov     eax, [ebp+var_14]
.text:08000498                 mov     eax, [eax+8]
.text:0800049B                 add     eax, 8
.text:0800049E                 mov     ds:(_GLOBAL_OFFSET_TABLE_ - 80006B8h)[eax], 1
.text:080004A4                 mov     eax, [ebp+var_14]
.text:080004A7                 mov     dword ptr [eax+4], 2
.text:080004AE                 push    [ebp+var_14]
.text:080004B1                 push    [ebp+var_18]
.text:080004B4                 lea     eax, [ebp+var_1C]
.text:080004B7                 push    eax
.text:080004B8                 lea     eax, [ebp+var_20]
.text:080004BB                 push    eax
.text:080004BC                 call    DUPFFexgcd
.text:080004C1                 add     esp, 10h
.text:080004C4                 mov     [ebp+var_10], eax
.text:080004C7                 mov     eax, 0
.text:080004CC                 mov     edx, [ebp+var_C]
.text:080004CF                 sub     edx, large gs:14h
.text:080004D6                 jz      short loc_80004DD
.text:080004D8                 call    __stack_chk_fail_local
.text:080004DD ; ---------------------------------------------------------------------------
.text:080004DD
.text:080004DD loc_80004DD:                            ; CODE XREF: main+A0↑j
.text:080004DD                 mov     ecx, [ebp+var_4]
.text:080004E0                 leave
.text:080004E1                 lea     esp, [ecx-4]
.text:080004E4                 retn
.text:080004E4 ; } // starts at 8000436
.text:080004E4 main            endp
.text:080004E4
.text:080004E4 _text           ends
.text:080004E4
.data:080004E5 ; ===========================================================================
.data:080004E5
.data:080004E5 ; Segment type: Zero-length
.data:080004E5 ; Segment permissions: Read/Write
.data:080004E5 _data           segment byte public 'DATA' use32
.data:080004E5 _data           ends
.data:080004E5
.bss:080004E6 ; ===========================================================================
.bss:080004E6
.bss:080004E6 ; Segment type: Zero-length
.bss:080004E6 ; Segment permissions: Read/Write
.bss:080004E6 _bss            segment byte public 'BSS' use32
.bss:080004E6 _bss            ends
.bss:080004E6
.rodata:080004E8 ; ===========================================================================
.rodata:080004E8
.rodata:080004E8 ; Segment type: Pure data
.rodata:080004E8 ; Segment permissions: Read
.rodata:080004E8 _rodata         segment dword public 'CONST' use32
.rodata:080004E8                 assume cs:_rodata
.rodata:080004E8                 ;org 80004E8h
.rodata:080004E8 a200204061C     db '20020406-1.c',0     ; DATA XREF: reach_error+1A↑o
.rodata:080004F5 a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:080004F7                 align 4
.rodata:080004F8 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:080004F8                                         ; DATA XREF: reach_error+11↑o
.rodata:080004F8 _rodata         ends
.rodata:080004F8
.text.__x86.get_pc_thunk.ax:08000504 ; ===========================================================================
.text.__x86.get_pc_thunk.ax:08000504
.text.__x86.get_pc_thunk.ax:08000504 ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:08000504 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:08000504 _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:08000504                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000504                 ;org 8000504h
.text.__x86.get_pc_thunk.ax:08000504                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:08000504
.text.__x86.get_pc_thunk.ax:08000504 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:08000504
.text.__x86.get_pc_thunk.ax:08000504
.text.__x86.get_pc_thunk.ax:08000504                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000504 __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text.__x86.get_pc_thunk.ax:08000504                                         ; FFmul+3↑p ...
.text.__x86.get_pc_thunk.ax:08000504 ; __unwind {
.text.__x86.get_pc_thunk.ax:08000504                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:08000507                 retn
.text.__x86.get_pc_thunk.ax:08000507 ; } // starts at 8000504
.text.__x86.get_pc_thunk.ax:08000507 __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:08000507
.text.__x86.get_pc_thunk.ax:08000507 _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:08000507
.text.__x86.get_pc_thunk.bx:08000508 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:08000508
.text.__x86.get_pc_thunk.bx:08000508 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:08000508 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:08000508 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:08000508                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000508                 ;org 8000508h
.text.__x86.get_pc_thunk.bx:08000508                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:08000508
.text.__x86.get_pc_thunk.bx:08000508 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:08000508
.text.__x86.get_pc_thunk.bx:08000508
.text.__x86.get_pc_thunk.bx:08000508                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000508 __x86_get_pc_thunk_bx proc near         ; CODE XREF: DUPFFnew+7↑p
.text.__x86.get_pc_thunk.bx:08000508                                         ; DUPFFexgcd+8↑p
.text.__x86.get_pc_thunk.bx:08000508                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.bx:08000508 ; __unwind {
.text.__x86.get_pc_thunk.bx:08000508                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:0800050B                 retn
.text.__x86.get_pc_thunk.bx:0800050B ; } // starts at 8000508
.text.__x86.get_pc_thunk.bx:0800050B __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:0800050B
.text.__x86.get_pc_thunk.bx:0800050B _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:0800050B
.eh_frame:0800050C ; ===========================================================================
.eh_frame:0800050C
.eh_frame:0800050C ; Segment type: Pure data
.eh_frame:0800050C ; Segment permissions: Read
.eh_frame:0800050C _eh_frame       segment dword public 'CONST' use32
.eh_frame:0800050C                 assume cs:_eh_frame
.eh_frame:0800050C                 ;org 800050Ch
.eh_frame:0800050C                 db  14h
.eh_frame:0800050D                 db    0
.eh_frame:0800050E                 db    0
.eh_frame:0800050F                 db    0
.eh_frame:08000510                 db    0
.eh_frame:08000511                 db    0
.eh_frame:08000512                 db    0
.eh_frame:08000513                 db    0
.eh_frame:08000514                 db    1
.eh_frame:08000515                 db  7Ah ; z
.eh_frame:08000516                 db  52h ; R
.eh_frame:08000517                 db    0
.eh_frame:08000518                 db    1
.eh_frame:08000519                 db  7Ch ; |
.eh_frame:0800051A                 db    8
.eh_frame:0800051B                 db    1
.eh_frame:0800051C                 db  1Bh
.eh_frame:0800051D                 db  0Ch
.eh_frame:0800051E                 db    4
.eh_frame:0800051F                 db    4
.eh_frame:08000520                 db  88h
.eh_frame:08000521                 db    1
.eh_frame:08000522                 db    0
.eh_frame:08000523                 db    0
.eh_frame:08000524                 db  18h
.eh_frame:08000525                 db    0
.eh_frame:08000526                 db    0
.eh_frame:08000527                 db    0
.eh_frame:08000528                 db  1Ch
.eh_frame:08000529                 db    0
.eh_frame:0800052A                 db    0
.eh_frame:0800052B                 db    0
.eh_frame:0800052C                 dd offset reach_error - $
.eh_frame:08000530                 db  2Fh ; /
.eh_frame:08000531                 db    0
.eh_frame:08000532                 db    0
.eh_frame:08000533                 db    0
.eh_frame:08000534                 db    0
.eh_frame:08000535                 db  41h ; A
.eh_frame:08000536                 db  0Eh
.eh_frame:08000537                 db    8
.eh_frame:08000538                 db  85h
.eh_frame:08000539                 db    2
.eh_frame:0800053A                 db  42h ; B
.eh_frame:0800053B                 db  0Dh
.eh_frame:0800053C                 db    5
.eh_frame:0800053D                 db  44h ; D
.eh_frame:0800053E                 db  83h
.eh_frame:0800053F                 db    3
.eh_frame:08000540                 db  1Ch
.eh_frame:08000541                 db    0
.eh_frame:08000542                 db    0
.eh_frame:08000543                 db    0
.eh_frame:08000544                 db  38h ; 8
.eh_frame:08000545                 db    0
.eh_frame:08000546                 db    0
.eh_frame:08000547                 db    0
.eh_frame:08000548                 dd offset FFmul - $
.eh_frame:0800054C                 db  12h
.eh_frame:0800054D                 db    0
.eh_frame:0800054E                 db    0
.eh_frame:0800054F                 db    0
.eh_frame:08000550                 db    0
.eh_frame:08000551                 db  41h ; A
.eh_frame:08000552                 db  0Eh
.eh_frame:08000553                 db    8
.eh_frame:08000554                 db  85h
.eh_frame:08000555                 db    2
.eh_frame:08000556                 db  42h ; B
.eh_frame:08000557                 db  0Dh
.eh_frame:08000558                 db    5
.eh_frame:08000559                 db  4Eh ; N
.eh_frame:0800055A                 db 0C5h
.eh_frame:0800055B                 db  0Ch
.eh_frame:0800055C                 db    4
.eh_frame:0800055D                 db    4
.eh_frame:0800055E                 db    0
.eh_frame:0800055F                 db    0
.eh_frame:08000560                 db  1Ch
.eh_frame:08000561                 db    0
.eh_frame:08000562                 db    0
.eh_frame:08000563                 db    0
.eh_frame:08000564                 db  58h ; X
.eh_frame:08000565                 db    0
.eh_frame:08000566                 db    0
.eh_frame:08000567                 db    0
.eh_frame:08000568                 dd offset DUPFFdeg - $
.eh_frame:0800056C                 db  15h
.eh_frame:0800056D                 db    0
.eh_frame:0800056E                 db    0
.eh_frame:0800056F                 db    0
.eh_frame:08000570                 db    0
.eh_frame:08000571                 db  41h ; A
.eh_frame:08000572                 db  0Eh
.eh_frame:08000573                 db    8
.eh_frame:08000574                 db  85h
.eh_frame:08000575                 db    2
.eh_frame:08000576                 db  42h ; B
.eh_frame:08000577                 db  0Dh
.eh_frame:08000578                 db    5
.eh_frame:08000579                 db  51h ; Q
.eh_frame:0800057A                 db 0C5h
.eh_frame:0800057B                 db  0Ch
.eh_frame:0800057C                 db    4
.eh_frame:0800057D                 db    4
.eh_frame:0800057E                 db    0
.eh_frame:0800057F                 db    0
.eh_frame:08000580                 db  20h
.eh_frame:08000581                 db    0
.eh_frame:08000582                 db    0
.eh_frame:08000583                 db    0
.eh_frame:08000584                 db  78h ; x
.eh_frame:08000585                 db    0
.eh_frame:08000586                 db    0
.eh_frame:08000587                 db    0
.eh_frame:08000588                 dd offset DUPFFnew - $
.eh_frame:0800058C                 db  8Bh
.eh_frame:0800058D                 db    0
.eh_frame:0800058E                 db    0
.eh_frame:0800058F                 db    0
.eh_frame:08000590                 db    0
.eh_frame:08000591                 db  41h ; A
.eh_frame:08000592                 db  0Eh
.eh_frame:08000593                 db    8
.eh_frame:08000594                 db  85h
.eh_frame:08000595                 db    2
.eh_frame:08000596                 db  42h ; B
.eh_frame:08000597                 db  0Dh
.eh_frame:08000598                 db    5
.eh_frame:08000599                 db  44h ; D
.eh_frame:0800059A                 db  83h
.eh_frame:0800059B                 db    3
.eh_frame:0800059C                 db    2
.eh_frame:0800059D                 db  83h
.eh_frame:0800059E                 db 0C5h
.eh_frame:0800059F                 db 0C3h
.eh_frame:080005A0                 db  0Ch
.eh_frame:080005A1                 db    4
.eh_frame:080005A2                 db    4
.eh_frame:080005A3                 db    0
.eh_frame:080005A4                 db  1Ch
.eh_frame:080005A5                 db    0
.eh_frame:080005A6                 db    0
.eh_frame:080005A7                 db    0
.eh_frame:080005A8                 db  9Ch
.eh_frame:080005A9                 db    0
.eh_frame:080005AA                 db    0
.eh_frame:080005AB                 db    0
.eh_frame:080005AC                 dd offset DUPFFfree - $
.eh_frame:080005B0                 db  10h
.eh_frame:080005B1                 db    0
.eh_frame:080005B2                 db    0
.eh_frame:080005B3                 db    0
.eh_frame:080005B4                 db    0
.eh_frame:080005B5                 db  41h ; A
.eh_frame:080005B6                 db  0Eh
.eh_frame:080005B7                 db    8
.eh_frame:080005B8                 db  85h
.eh_frame:080005B9                 db    2
.eh_frame:080005BA                 db  42h ; B
.eh_frame:080005BB                 db  0Dh
.eh_frame:080005BC                 db    5
.eh_frame:080005BD                 db  4Ch ; L
.eh_frame:080005BE                 db 0C5h
.eh_frame:080005BF                 db  0Ch
.eh_frame:080005C0                 db    4
.eh_frame:080005C1                 db    4
.eh_frame:080005C2                 db    0
.eh_frame:080005C3                 db    0
.eh_frame:080005C4                 db  1Ch
.eh_frame:080005C5                 db    0
.eh_frame:080005C6                 db    0
.eh_frame:080005C7                 db    0
.eh_frame:080005C8                 db 0BCh
.eh_frame:080005C9                 db    0
.eh_frame:080005CA                 db    0
.eh_frame:080005CB                 db    0
.eh_frame:080005CC                 dd offset DUPFFswap - $
.eh_frame:080005D0                 db  10h
.eh_frame:080005D1                 db    0
.eh_frame:080005D2                 db    0
.eh_frame:080005D3                 db    0
.eh_frame:080005D4                 db    0
.eh_frame:080005D5                 db  41h ; A
.eh_frame:080005D6                 db  0Eh
.eh_frame:080005D7                 db    8
.eh_frame:080005D8                 db  85h
.eh_frame:080005D9                 db    2
.eh_frame:080005DA                 db  42h ; B
.eh_frame:080005DB                 db  0Dh
.eh_frame:080005DC                 db    5
.eh_frame:080005DD                 db  4Ch ; L
.eh_frame:080005DE                 db 0C5h
.eh_frame:080005DF                 db  0Ch
.eh_frame:080005E0                 db    4
.eh_frame:080005E1                 db    4
.eh_frame:080005E2                 db    0
.eh_frame:080005E3                 db    0
.eh_frame:080005E4                 db  1Ch
.eh_frame:080005E5                 db    0
.eh_frame:080005E6                 db    0
.eh_frame:080005E7                 db    0
.eh_frame:080005E8                 db 0DCh
.eh_frame:080005E9                 db    0
.eh_frame:080005EA                 db    0
.eh_frame:080005EB                 db    0
.eh_frame:080005EC                 dd offset DUPFFcopy - $
.eh_frame:080005F0                 db  12h
.eh_frame:080005F1                 db    0
.eh_frame:080005F2                 db    0
.eh_frame:080005F3                 db    0
.eh_frame:080005F4                 db    0
.eh_frame:080005F5                 db  41h ; A
.eh_frame:080005F6                 db  0Eh
.eh_frame:080005F7                 db    8
.eh_frame:080005F8                 db  85h
.eh_frame:080005F9                 db    2
.eh_frame:080005FA                 db  42h ; B
.eh_frame:080005FB                 db  0Dh
.eh_frame:080005FC                 db    5
.eh_frame:080005FD                 db  4Eh ; N
.eh_frame:080005FE                 db 0C5h
.eh_frame:080005FF                 db  0Ch
.eh_frame:08000600                 db    4
.eh_frame:08000601                 db    4
.eh_frame:08000602                 db    0
.eh_frame:08000603                 db    0
.eh_frame:08000604                 db  1Ch
.eh_frame:08000605                 db    0
.eh_frame:08000606                 db    0
.eh_frame:08000607                 db    0
.eh_frame:08000608                 db 0FCh
.eh_frame:08000609                 db    0
.eh_frame:0800060A                 db    0
.eh_frame:0800060B                 db    0
.eh_frame:0800060C                 dd offset DUPFFshift_add - $
.eh_frame:08000610                 db  10h
.eh_frame:08000611                 db    0
.eh_frame:08000612                 db    0
.eh_frame:08000613                 db    0
.eh_frame:08000614                 db    0
.eh_frame:08000615                 db  41h ; A
.eh_frame:08000616                 db  0Eh
.eh_frame:08000617                 db    8
.eh_frame:08000618                 db  85h
.eh_frame:08000619                 db    2
.eh_frame:0800061A                 db  42h ; B
.eh_frame:0800061B                 db  0Dh
.eh_frame:0800061C                 db    5
.eh_frame:0800061D                 db  4Ch ; L
.eh_frame:0800061E                 db 0C5h
.eh_frame:0800061F                 db  0Ch
.eh_frame:08000620                 db    4
.eh_frame:08000621                 db    4
.eh_frame:08000622                 db    0
.eh_frame:08000623                 db    0
.eh_frame:08000624                 db  28h ; (
.eh_frame:08000625                 db    0
.eh_frame:08000626                 db    0
.eh_frame:08000627                 db    0
.eh_frame:08000628                 db  1Ch
.eh_frame:08000629                 db    1
.eh_frame:0800062A                 db    0
.eh_frame:0800062B                 db    0
.eh_frame:0800062C                 dd offset DUPFFexgcd - $
.eh_frame:08000630                 db  13h
.eh_frame:08000631                 db    3
.eh_frame:08000632                 db    0
.eh_frame:08000633                 db    0
.eh_frame:08000634                 db    0
.eh_frame:08000635                 db  41h ; A
.eh_frame:08000636                 db  0Eh
.eh_frame:08000637                 db    8
.eh_frame:08000638                 db  85h
.eh_frame:08000639                 db    2
.eh_frame:0800063A                 db  42h ; B
.eh_frame:0800063B                 db  0Dh
.eh_frame:0800063C                 db    5
.eh_frame:0800063D                 db  45h ; E
.eh_frame:0800063E                 db  86h
.eh_frame:0800063F                 db    3
.eh_frame:08000640                 db  83h
.eh_frame:08000641                 db    4
.eh_frame:08000642                 db    3
.eh_frame:08000643                 db    8
.eh_frame:08000644                 db    3
.eh_frame:08000645                 db 0C3h
.eh_frame:08000646                 db  41h ; A
.eh_frame:08000647                 db 0C6h
.eh_frame:08000648                 db  41h ; A
.eh_frame:08000649                 db 0C5h
.eh_frame:0800064A                 db  0Ch
.eh_frame:0800064B                 db    4
.eh_frame:0800064C                 db    4
.eh_frame:0800064D                 db    0
.eh_frame:0800064E                 db    0
.eh_frame:0800064F                 db    0
.eh_frame:08000650                 db  28h ; (
.eh_frame:08000651                 db    0
.eh_frame:08000652                 db    0
.eh_frame:08000653                 db    0
.eh_frame:08000654                 db  48h ; H
.eh_frame:08000655                 db    1
.eh_frame:08000656                 db    0
.eh_frame:08000657                 db    0
.eh_frame:08000658                 dd offset main - $
.eh_frame:0800065C                 db 0AFh
.eh_frame:0800065D                 db    0
.eh_frame:0800065E                 db    0
.eh_frame:0800065F                 db    0
.eh_frame:08000660                 db    0
.eh_frame:08000661                 db  44h ; D
.eh_frame:08000662                 db  0Ch
.eh_frame:08000663                 db    1
.eh_frame:08000664                 db    0
.eh_frame:08000665                 db  49h ; I
.eh_frame:08000666                 db  10h
.eh_frame:08000667                 db    5
.eh_frame:08000668                 db    2
.eh_frame:08000669                 db  75h ; u
.eh_frame:0800066A                 db    0
.eh_frame:0800066B                 db  41h ; A
.eh_frame:0800066C                 db  0Fh
.eh_frame:0800066D                 db    3
.eh_frame:0800066E                 db  75h ; u
.eh_frame:0800066F                 db  7Ch ; |
.eh_frame:08000670                 db    6
.eh_frame:08000671                 db    2
.eh_frame:08000672                 db  9Ch
.eh_frame:08000673                 db  0Ch
.eh_frame:08000674                 db    1
.eh_frame:08000675                 db    0
.eh_frame:08000676                 db  41h ; A
.eh_frame:08000677                 db 0C5h
.eh_frame:08000678                 db  43h ; C
.eh_frame:08000679                 db  0Ch
.eh_frame:0800067A                 db    4
.eh_frame:0800067B                 db    4
.eh_frame:0800067C                 db  10h
.eh_frame:0800067D                 db    0
.eh_frame:0800067E                 db    0
.eh_frame:0800067F                 db    0
.eh_frame:08000680                 db  74h ; t
.eh_frame:08000681                 db    1
.eh_frame:08000682                 db    0
.eh_frame:08000683                 db    0
.eh_frame:08000684                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:08000688                 db    4
.eh_frame:08000689                 db    0
.eh_frame:0800068A                 db    0
.eh_frame:0800068B                 db    0
.eh_frame:0800068C                 db    0
.eh_frame:0800068D                 db    0
.eh_frame:0800068E                 db    0
.eh_frame:0800068F                 db    0
.eh_frame:08000690                 db  10h
.eh_frame:08000691                 db    0
.eh_frame:08000692                 db    0
.eh_frame:08000693                 db    0
.eh_frame:08000694                 db  88h
.eh_frame:08000695                 db    1
.eh_frame:08000696                 db    0
.eh_frame:08000697                 db    0
.eh_frame:08000698                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:0800069C                 db    4
.eh_frame:0800069D                 db    0
.eh_frame:0800069E                 db    0
.eh_frame:0800069F                 db    0
.eh_frame:080006A0                 db    0
.eh_frame:080006A1                 db    0
.eh_frame:080006A2                 db    0
.eh_frame:080006A3                 db    0
.eh_frame:080006A3 _eh_frame       ends
.eh_frame:080006A3
extern:080006A4 ; ===========================================================================
extern:080006A4
extern:080006A4 ; Segment type: Externs
extern:080006A4 ; extern
extern:080006A4 ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:080006A4                 extrn __assert_fail:near
extern:080006A4                                         ; CODE XREF: reach_error+2A↑p
extern:080006A8 ; void *malloc(size_t size)
extern:080006A8                 extrn malloc:near       ; CODE XREF: DUPFFnew+17↑p
extern:080006A8                                         ; DUPFFnew+3F↑p
extern:080006AC ; void *memset(void *s, int c, size_t n)
extern:080006AC                 extrn memset:near       ; CODE XREF: DUPFFnew+69↑p
extern:080006B0 ; void abort(void)
extern:080006B0                 extrn abort:near        ; CODE XREF: DUPFFexgcd:loc_8000191↑p
extern:080006B4                 extrn __stack_chk_fail_local:near
extern:080006B4                                         ; CODE XREF: main+A2↑p
extern:080006B4
.got:080006B8 ; ===========================================================================
.got:080006B8
.got:080006B8 ; Segment type: Pure data
.got:080006B8 ; Segment permissions: Read
.got:080006B8 _got            segment dword public 'CONST' use32
.got:080006B8                 assume cs:_got
.got:080006B8                 ;org 80006B8h
.got:080006B8 _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: reach_error+C↑o
.got:080006B8                                         ; reach_error+11↑o ...
.got:080006B8 _got            ends
.got:080006B8
.got:080006B8
.got:080006B8                 end
