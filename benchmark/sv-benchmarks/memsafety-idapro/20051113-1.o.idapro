LOAD:00000000 ;
LOAD:00000000 ; +-------------------------------------------------------------------------+
LOAD:00000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
LOAD:00000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
LOAD:00000000 ; |                      License info: 48-357D-7BC4-C6                      |
LOAD:00000000 ; |                              Virginia Tech                              |
LOAD:00000000 ; +-------------------------------------------------------------------------+
LOAD:00000000 ;
LOAD:00000000 ; Input SHA256 : 5E1BFFCFFEBB9027BD9F55EA3794A71953BD6BE8DFB9086CF87B66CABCFBC9CF
LOAD:00000000 ; Input MD5    : 9F69DF1F592CB75B032C0A247C8AE4B8
LOAD:00000000 ; Input CRC32  : E4090E1B
LOAD:00000000
LOAD:00000000 ; File Name   : /home/cindy/Documents/Workspace/sv-benchmarks/c/bin/memsafety/20051113-1.o
LOAD:00000000 ; Format      : ELF for Intel 386 (Shared object)
LOAD:00000000 ; Interpreter '/lib/ld-linux.so.2'
LOAD:00000000 ; Needed Library 'libc.so.6'
LOAD:00000000 ;
LOAD:00000000 ; Source File : 'Scrt1.o'
LOAD:00000000 ; Source File : 'crtstuff.c'
LOAD:00000000 ; Source File : '20051113-1.c'
LOAD:00000000 ; Source File : 'crtstuff.c'
LOAD:00000000
LOAD:00000000                 .686p
LOAD:00000000                 .mmx
LOAD:00000000                 .model flat
LOAD:00000000 .intel_syntax noprefix
LOAD:00000000
LOAD:00000000 ; ===========================================================================
LOAD:00000000
LOAD:00000000 ; Segment type: Pure data
LOAD:00000000 ; Segment permissions: Read
LOAD:00000000 LOAD            segment mempage public 'DATA' use32
LOAD:00000000                 assume cs:LOAD
LOAD:00000000 dword_0         dd 464C457Fh            ; DATA XREF: LOAD:0000021C↓o
LOAD:00000000                                         ; LOAD:0000022C↓o ...
LOAD:00000000                                         ; File format: \x7FELF
LOAD:00000004                 db 1                    ; File class: 32-bit
LOAD:00000005                 db 1                    ; Data encoding: little-endian
LOAD:00000006                 db 1                    ; File version
LOAD:00000007                 db 0                    ; OS/ABI: UNIX System V ABI
LOAD:00000008                 db 0                    ; ABI Version
LOAD:00000009                 db 7 dup(0)             ; Padding
LOAD:00000010                 dw 3                    ; File type: Shared object
LOAD:00000012                 dw 3                    ; Machine: Intel 386
LOAD:00000014                 dd 1                    ; File version
LOAD:00000018                 dd offset _start        ; Entry point
LOAD:0000001C                 dd 34h                  ; PHT file offset
LOAD:00000020                 dd 36B0h                ; SHT file offset
LOAD:00000024                 dd 0                    ; Processor-specific flags
LOAD:00000028                 dw 34h                  ; ELF header size
LOAD:0000002A                 dw 20h                  ; PHT entry size
LOAD:0000002C                 dw 0Bh                  ; Number of entries in PHT
LOAD:0000002E                 dw 28h                  ; SHT entry size
LOAD:00000030                 dw 1Dh                  ; Number of entries in SHT
LOAD:00000032                 dw 1Ch                  ; SHT entry index for string table
LOAD:00000034 ; ELF32 Program Header
LOAD:00000034 ; PHT Entry 0
LOAD:00000034 dword_34        dd 6                    ; DATA XREF: LOAD:0000003C↓o
LOAD:00000034                                         ; Type: PHDR
LOAD:00000038                 dd 34h                  ; File offset
LOAD:0000003C                 dd offset dword_34      ; Virtual address
LOAD:00000040                 dd 34h                  ; Physical address
LOAD:00000044                 dd 160h                 ; Size in file image
LOAD:00000048                 dd 160h                 ; Size in memory image
LOAD:0000004C                 dd 4                    ; Flags
LOAD:00000050                 dd 4                    ; Alignment
LOAD:00000054 ; PHT Entry 1
LOAD:00000054                 dd 3                    ; Type: INTERP
LOAD:00000058                 dd 194h                 ; File offset
LOAD:0000005C                 dd offset aLibLdLinuxSo2 ; Virtual address
LOAD:00000060                 dd 194h                 ; Physical address
LOAD:00000064                 dd 13h                  ; Size in file image
LOAD:00000068                 dd 13h                  ; Size in memory image
LOAD:0000006C                 dd 4                    ; Flags
LOAD:00000070                 dd 1                    ; Alignment
LOAD:00000074 ; PHT Entry 2
LOAD:00000074                 dd 1                    ; Type: LOAD
LOAD:00000078                 dd 0                    ; File offset
LOAD:0000007C                 dd 0                    ; Virtual address
LOAD:00000080                 dd 0                    ; Physical address
LOAD:00000084                 dd 420h                 ; Size in file image
LOAD:00000088                 dd 420h                 ; Size in memory image
LOAD:0000008C                 dd 4                    ; Flags
LOAD:00000090                 dd 1000h                ; Alignment
LOAD:00000094 ; PHT Entry 3
LOAD:00000094                 dd 1                    ; Type: LOAD
LOAD:00000098                 dd 1000h                ; File offset
LOAD:0000009C                 dd offset _init_proc    ; Virtual address
LOAD:000000A0                 dd 1000h                ; Physical address
LOAD:000000A4                 dd 3E8h                 ; Size in file image
LOAD:000000A8                 dd 3E8h                 ; Size in memory image
LOAD:000000AC                 dd 5                    ; Flags
LOAD:000000B0                 dd 1000h                ; Alignment
LOAD:000000B4 ; PHT Entry 4
LOAD:000000B4                 dd 1                    ; Type: LOAD
LOAD:000000B8                 dd 2000h                ; File offset
LOAD:000000BC                 dd offset _fp_hw        ; Virtual address
LOAD:000000C0                 dd 2000h                ; Physical address
LOAD:000000C4                 dd 1B4h                 ; Size in file image
LOAD:000000C8                 dd 1B4h                 ; Size in memory image
LOAD:000000CC                 dd 4                    ; Flags
LOAD:000000D0                 dd 1000h                ; Alignment
LOAD:000000D4 ; PHT Entry 5
LOAD:000000D4                 dd 1                    ; Type: LOAD
LOAD:000000D8                 dd 2ED0h                ; File offset
LOAD:000000DC                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:000000E0                 dd 3ED0h                ; Physical address
LOAD:000000E4                 dd 138h                 ; Size in file image
LOAD:000000E8                 dd 13Ch                 ; Size in memory image
LOAD:000000EC                 dd 6                    ; Flags
LOAD:000000F0                 dd 1000h                ; Alignment
LOAD:000000F4 ; PHT Entry 6
LOAD:000000F4                 dd 2                    ; Type: DYNAMIC
LOAD:000000F8                 dd 2ED8h                ; File offset
LOAD:000000FC                 dd offset _DYNAMIC      ; Virtual address
LOAD:00000100                 dd 3ED8h                ; Physical address
LOAD:00000104                 dd 0F8h                 ; Size in file image
LOAD:00000108                 dd 0F8h                 ; Size in memory image
LOAD:0000010C                 dd 6                    ; Flags
LOAD:00000110                 dd 4                    ; Alignment
LOAD:00000114 ; PHT Entry 7
LOAD:00000114                 dd 4                    ; Type: NOTE
LOAD:00000118                 dd 1A8h                 ; File offset
LOAD:0000011C                 dd offset dword_1A8     ; Virtual address
LOAD:00000120                 dd 1A8h                 ; Physical address
LOAD:00000124                 dd 44h                  ; Size in file image
LOAD:00000128                 dd 44h                  ; Size in memory image
LOAD:0000012C                 dd 4                    ; Flags
LOAD:00000130                 dd 4                    ; Alignment
LOAD:00000134 ; PHT Entry 8
LOAD:00000134                 dd 6474E550h            ; Type: EH_FRAME
LOAD:00000138                 dd 2024h                ; File offset
LOAD:0000013C                 dd offset __GNU_EH_FRAME_HDR ; Virtual address
LOAD:00000140                 dd 2024h                ; Physical address
LOAD:00000144                 dd 54h                  ; Size in file image
LOAD:00000148                 dd 54h                  ; Size in memory image
LOAD:0000014C                 dd 4                    ; Flags
LOAD:00000150                 dd 4                    ; Alignment
LOAD:00000154 ; PHT Entry 9
LOAD:00000154                 dd 6474E551h            ; Type: STACK
LOAD:00000158                 dd 0                    ; File offset
LOAD:0000015C                 dd 0                    ; Virtual address
LOAD:00000160                 dd 0                    ; Physical address
LOAD:00000164                 dd 0                    ; Size in file image
LOAD:00000168                 dd 0                    ; Size in memory image
LOAD:0000016C                 dd 6                    ; Flags
LOAD:00000170                 dd 10h                  ; Alignment
LOAD:00000174 ; PHT Entry 10
LOAD:00000174                 dd 6474E552h            ; Type: RO-AFTER
LOAD:00000178                 dd 2ED0h                ; File offset
LOAD:0000017C                 dd offset __frame_dummy_init_array_entry ; Virtual address
LOAD:00000180                 dd 3ED0h                ; Physical address
LOAD:00000184                 dd 130h                 ; Size in file image
LOAD:00000188                 dd 130h                 ; Size in memory image
LOAD:0000018C                 dd 4                    ; Flags
LOAD:00000190                 dd 1                    ; Alignment
LOAD:00000194 aLibLdLinuxSo2  db '/lib/ld-linux.so.2',0
LOAD:00000194                                         ; DATA XREF: LOAD:0000005C↑o
LOAD:000001A7                 align 4
LOAD:000001A8 ; ELF Note Entry
LOAD:000001A8 dword_1A8       dd 4                    ; DATA XREF: LOAD:0000011C↑o
LOAD:000001A8                                         ; Name Size
LOAD:000001AC                 dd 14h                  ; Desc Size
LOAD:000001B0                 dd 3                    ; Type: NT_GNU_BUILD_ID
LOAD:000001B4 aGnu            db 'GNU',0              ; Name
LOAD:000001B8                 db 70h, 2Bh, 19h, 0EDh, 14h, 2Ch, 0FFh, 14h, 3Fh, 6Bh ; Desc
LOAD:000001B8                 db 57h, 2Eh, 37h, 63h, 56h, 0B5h, 94h, 0E3h, 0A1h, 7Bh
LOAD:000001CC ; ELF Note Entry
LOAD:000001CC __abi_tag       dd 4                    ; Name Size
LOAD:000001D0                 dd 10h                  ; Desc Size
LOAD:000001D4                 dd 1                    ; Type: NT_GNU_ABI_TAG
LOAD:000001D8 aGnu_0          db 'GNU',0              ; Name
LOAD:000001DC                 dd 0, 3, 2, 0           ; ABI: Linux 3.2.0
LOAD:000001EC ; ELF GNU Hash Table
LOAD:000001EC elf_gnu_hash_nbuckets dd 2
LOAD:000001F0 elf_gnu_hash_symbias dd 9
LOAD:000001F4 elf_gnu_hash_bitmask_nwords dd 1
LOAD:000001F8 elf_gnu_hash_shift dd 5
LOAD:000001FC elf_gnu_hash_indexes dd 20002000h
LOAD:00000200 elf_gnu_hash_bucket dd 0, 9
LOAD:00000208 elf_gnu_hash_chain dd 0C0E34BADh
LOAD:0000020C ; ELF Symbol Table
LOAD:0000020C                 Elf32_Sym <0>
LOAD:0000021C                 Elf32_Sym <offset aLibcStartMain - offset unk_2AC, offset dword_0, 0, \ ; "__libc_start_main"
LOAD:0000021C                            12h, 0, 0>
LOAD:0000022C                 Elf32_Sym <offset aItmDeregistert - offset unk_2AC, offset dword_0, 0,\ ; "_ITM_deregisterTMCloneTable"
LOAD:0000022C                            20h, 0, 0>
LOAD:0000023C                 Elf32_Sym <offset aCxaFinalize - offset unk_2AC, offset dword_0, 0, \ ; "__cxa_finalize"
LOAD:0000023C                            22h, 0, 0>
LOAD:0000024C                 Elf32_Sym <offset aMalloc - offset unk_2AC, offset dword_0, 0, 12h, 0,\ ; "malloc"
LOAD:0000024C                            0>
LOAD:0000025C                 Elf32_Sym <offset aGmonStart - offset unk_2AC, offset dword_0, 0, 20h,\ ; "__gmon_start__"
LOAD:0000025C                            0, 0>
LOAD:0000026C                 Elf32_Sym <offset aMemset - offset unk_2AC, offset dword_0, 0, 12h, 0,\ ; "memset"
LOAD:0000026C                            0>
LOAD:0000027C                 Elf32_Sym <offset aItmRegistertmc - offset unk_2AC, offset dword_0, 0,\ ; "_ITM_registerTMCloneTable"
LOAD:0000027C                            20h, 0, 0>
LOAD:0000028C                 Elf32_Sym <offset aAssertFail - offset unk_2AC, offset dword_0, 0, \ ; "__assert_fail"
LOAD:0000028C                            12h, 0, 0>
LOAD:0000029C                 Elf32_Sym <offset aIoStdinUsed - offset unk_2AC, \ ; "_IO_stdin_used"
LOAD:0000029C                            offset _IO_stdin_used, 4, 11h, 0, 10h>
LOAD:000002AC ; ELF String Table
LOAD:000002AC unk_2AC         db    0                 ; DATA XREF: LOAD:0000021C↑o
LOAD:000002AC                                         ; LOAD:0000022C↑o ...
LOAD:000002AD aIoStdinUsed    db '_IO_stdin_used',0   ; DATA XREF: LOAD:0000029C↑o
LOAD:000002BC aAssertFail     db '__assert_fail',0    ; DATA XREF: LOAD:0000028C↑o
LOAD:000002CA aCxaFinalize    db '__cxa_finalize',0   ; DATA XREF: LOAD:0000023C↑o
LOAD:000002D9 aMalloc         db 'malloc',0           ; DATA XREF: LOAD:0000024C↑o
LOAD:000002E0 aLibcStartMain  db '__libc_start_main',0
LOAD:000002E0                                         ; DATA XREF: LOAD:0000021C↑o
LOAD:000002F2 aMemset         db 'memset',0           ; DATA XREF: LOAD:0000026C↑o
LOAD:000002F9 aLibcSo6        db 'libc.so.6',0        ; DATA XREF: LOAD:00000380↓o
LOAD:00000303 aGlibc20        db 'GLIBC_2.0',0        ; DATA XREF: LOAD:00000390↓o
LOAD:0000030D aGlibc213       db 'GLIBC_2.1.3',0      ; DATA XREF: LOAD:000003A0↓o
LOAD:00000319 aGlibc234       db 'GLIBC_2.34',0       ; DATA XREF: LOAD:000003B0↓o
LOAD:00000324 aItmDeregistert db '_ITM_deregisterTMCloneTable',0
LOAD:00000324                                         ; DATA XREF: LOAD:0000022C↑o
LOAD:00000340 aGmonStart      db '__gmon_start__',0   ; DATA XREF: LOAD:0000025C↑o
LOAD:0000034F aItmRegistertmc db '_ITM_registerTMCloneTable',0
LOAD:0000034F                                         ; DATA XREF: LOAD:0000027C↑o
LOAD:00000369                 align 2
LOAD:0000036A ; ELF GNU Symbol Version Table
LOAD:0000036A                 dw 0
LOAD:0000036C                 dw 2                    ; __libc_start_main@@GLIBC_2.34
LOAD:0000036E                 dw 1                    ; global symbol: _ITM_deregisterTMCloneTable
LOAD:00000370                 dw 3                    ; __cxa_finalize@@GLIBC_2.1.3
LOAD:00000372                 dw 4                    ; malloc@@GLIBC_2.0
LOAD:00000374                 dw 1                    ; global symbol: __gmon_start__
LOAD:00000376                 dw 4                    ; memset@@GLIBC_2.0
LOAD:00000378                 dw 1                    ; global symbol: _ITM_registerTMCloneTable
LOAD:0000037A                 dw 4                    ; __assert_fail@@GLIBC_2.0
LOAD:0000037C                 dw 1                    ; global symbol: _IO_stdin_used
LOAD:0000037E                 dw 0
LOAD:00000380 ; ELF GNU Symbol Version Requirements
LOAD:00000380                 Elf32_Verneed <1, 3, offset aLibcSo6 - offset unk_2AC, 10h, 0> ; "libc.so.6"
LOAD:00000390                 Elf32_Vernaux <0D696910h, 0, 4, offset aGlibc20 - offset unk_2AC, 10h> ; "GLIBC_2.0"
LOAD:000003A0                 Elf32_Vernaux <9691F73h, 0, 3, offset aGlibc213 - offset unk_2AC, 10h> ; "GLIBC_2.1.3"
LOAD:000003B0                 Elf32_Vernaux <69691B4h, 0, 2, offset aGlibc234 - offset unk_2AC, 0> ; "GLIBC_2.34"
LOAD:000003C0 ; ELF REL Relocation Table
LOAD:000003C0                 Elf32_Rel <3ED0h, 8>    ; R_386_RELATIVE
LOAD:000003C8                 Elf32_Rel <3ED4h, 8>    ; R_386_RELATIVE
LOAD:000003D0                 Elf32_Rel <3FF8h, 8>    ; R_386_RELATIVE
LOAD:000003D8                 Elf32_Rel <4004h, 8>    ; R_386_RELATIVE
LOAD:000003E0                 Elf32_Rel <3FECh, 206h> ; R_386_GLOB_DAT _ITM_deregisterTMCloneTable
LOAD:000003E8                 Elf32_Rel <3FF0h, 306h> ; R_386_GLOB_DAT __cxa_finalize
LOAD:000003F0                 Elf32_Rel <3FF4h, 506h> ; R_386_GLOB_DAT __gmon_start__
LOAD:000003F8                 Elf32_Rel <3FFCh, 706h> ; R_386_GLOB_DAT _ITM_registerTMCloneTable
LOAD:00000400 ; ELF JMPREL Relocation Table
LOAD:00000400                 Elf32_Rel <3FDCh, 107h> ; R_386_JMP_SLOT __libc_start_main
LOAD:00000408                 Elf32_Rel <3FE0h, 407h> ; R_386_JMP_SLOT malloc
LOAD:00000410                 Elf32_Rel <3FE4h, 607h> ; R_386_JMP_SLOT memset
LOAD:00000418                 Elf32_Rel <3FE8h, 807h> ; R_386_JMP_SLOT __assert_fail
LOAD:00000418 LOAD            ends
LOAD:00000418
.init:00001000 ; ===========================================================================
.init:00001000
.init:00001000 ; Segment type: Pure code
.init:00001000 ; Segment permissions: Read/Execute
.init:00001000 _init           segment dword public 'CODE' use32
.init:00001000                 assume cs:_init
.init:00001000                 ;org 1000h
.init:00001000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.init:00001000
.init:00001000 ; =============== S U B R O U T I N E =======================================
.init:00001000
.init:00001000
.init:00001000                 public _init_proc
.init:00001000 _init_proc      proc near               ; DATA XREF: LOAD:0000009C↑o
.init:00001000                 endbr32                 ; _init
.init:00001004                 push    ebx
.init:00001005                 sub     esp, 8
.init:00001008                 call    __x86_get_pc_thunk_bx
.init:0000100D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.init:00001013                 mov     eax, ds:(__gmon_start___ptr - 3FD0h)[ebx]
.init:00001019                 test    eax, eax
.init:0000101B                 jz      short loc_101F
.init:0000101D                 call    eax
.init:0000101F
.init:0000101F loc_101F:                               ; CODE XREF: _init_proc+1B↑j
.init:0000101F                 add     esp, 8
.init:00001022                 pop     ebx
.init:00001023                 retn
.init:00001023 _init_proc      endp
.init:00001023
.init:00001023 _init           ends
.init:00001023
LOAD:00001024 ; ===========================================================================
LOAD:00001024
LOAD:00001024 ; Segment type: Pure code
LOAD:00001024 ; Segment permissions: Read/Execute
LOAD:00001024 LOAD            segment mempage public 'CODE' use32
LOAD:00001024                 assume cs:LOAD
LOAD:00001024                 ;org 1024h
LOAD:00001024                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00001024                 align 10h
LOAD:00001024 LOAD            ends
LOAD:00001024
.plt:00001030 ; ===========================================================================
.plt:00001030
.plt:00001030 ; Segment type: Pure code
.plt:00001030 ; Segment permissions: Read/Execute
.plt:00001030 _plt            segment para public 'CODE' use32
.plt:00001030                 assume cs:_plt
.plt:00001030                 ;org 1030h
.plt:00001030                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt:00001030
.plt:00001030 ; =============== S U B R O U T I N E =======================================
.plt:00001030
.plt:00001030
.plt:00001030 sub_1030        proc near               ; CODE XREF: .plt:0000104B↓j
.plt:00001030                                         ; .plt:0000105B↓j ...
.plt:00001030 ; __unwind {
.plt:00001030                 push    dword ptr [ebx+4]
.plt:00001036                 jmp     dword ptr [ebx+8]
.plt:00001036 sub_1030        endp
.plt:00001036
.plt:00001036 ; ---------------------------------------------------------------------------
.plt:0000103C                 align 10h
.plt:00001040
.plt:00001040 ; =============== S U B R O U T I N E =======================================
.plt:00001040
.plt:00001040 ; Attributes: thunk
.plt:00001040
.plt:00001040 ; int __cdecl __libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
.plt:00001040 ___libc_start_main proc near            ; CODE XREF: _start+26↓p
.plt:00001040
.plt:00001040 main            = dword ptr  4
.plt:00001040 argc            = dword ptr  8
.plt:00001040 ubp_av          = dword ptr  0Ch
.plt:00001040 init            = dword ptr  10h
.plt:00001040 fini            = dword ptr  14h
.plt:00001040 rtld_fini       = dword ptr  18h
.plt:00001040 stack_end       = dword ptr  1Ch
.plt:00001040
.plt:00001040                 jmp     ds:__libc_start_main_ptr ; PIC mode
.plt:00001040 ___libc_start_main endp
.plt:00001040
.plt:00001046 ; ---------------------------------------------------------------------------
.plt:00001046                 push    0
.plt:0000104B                 jmp     sub_1030
.plt:00001050
.plt:00001050 ; =============== S U B R O U T I N E =======================================
.plt:00001050
.plt:00001050 ; Attributes: thunk
.plt:00001050
.plt:00001050 ; void *malloc(size_t size)
.plt:00001050 _malloc         proc near               ; CODE XREF: main+24↓p
.plt:00001050
.plt:00001050 size            = dword ptr  4
.plt:00001050
.plt:00001050                 jmp     ds:malloc_ptr   ; PIC mode
.plt:00001050 _malloc         endp
.plt:00001050
.plt:00001056 ; ---------------------------------------------------------------------------
.plt:00001056                 push    8
.plt:0000105B                 jmp     sub_1030
.plt:00001060
.plt:00001060 ; =============== S U B R O U T I N E =======================================
.plt:00001060
.plt:00001060 ; Attributes: thunk
.plt:00001060
.plt:00001060 ; void *memset(void *s, int c, size_t n)
.plt:00001060 _memset         proc near               ; CODE XREF: main+39↓p
.plt:00001060
.plt:00001060 s               = dword ptr  4
.plt:00001060 c               = dword ptr  8
.plt:00001060 n               = dword ptr  0Ch
.plt:00001060
.plt:00001060                 jmp     ds:memset_ptr   ; PIC mode
.plt:00001060 _memset         endp
.plt:00001060
.plt:00001066 ; ---------------------------------------------------------------------------
.plt:00001066                 push    10h
.plt:0000106B                 jmp     sub_1030
.plt:00001070
.plt:00001070 ; =============== S U B R O U T I N E =======================================
.plt:00001070
.plt:00001070 ; Attributes: noreturn thunk
.plt:00001070
.plt:00001070 ; void __assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
.plt:00001070 ___assert_fail  proc near               ; CODE XREF: reach_error+2A↓p
.plt:00001070
.plt:00001070 assertion       = dword ptr  4
.plt:00001070 file            = dword ptr  8
.plt:00001070 line            = dword ptr  0Ch
.plt:00001070 function        = dword ptr  10h
.plt:00001070
.plt:00001070                 jmp     ds:__assert_fail_ptr ; PIC mode
.plt:00001070 ___assert_fail  endp
.plt:00001070
.plt:00001076 ; ---------------------------------------------------------------------------
.plt:00001076                 push    18h
.plt:0000107B                 jmp     sub_1030
.plt:0000107B ; } // starts at 1030
.plt:0000107B _plt            ends
.plt:0000107B
.plt.got:00001080 ; ===========================================================================
.plt.got:00001080
.plt.got:00001080 ; Segment type: Pure code
.plt.got:00001080 ; Segment permissions: Read/Execute
.plt.got:00001080 _plt_got        segment qword public 'CODE' use32
.plt.got:00001080                 assume cs:_plt_got
.plt.got:00001080                 ;org 1080h
.plt.got:00001080                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.plt.got:00001080
.plt.got:00001080 ; =============== S U B R O U T I N E =======================================
.plt.got:00001080
.plt.got:00001080 ; Attributes: thunk
.plt.got:00001080
.plt.got:00001080 ; int __cdecl __cxa_finalize(void *)
.plt.got:00001080 ___cxa_finalize proc near               ; CODE XREF: __do_global_dtors_aux+32↓p
.plt.got:00001080 ; __unwind {
.plt.got:00001080                 jmp     ds:__cxa_finalize_ptr ; PIC mode
.plt.got:00001080 ___cxa_finalize endp
.plt.got:00001080
.plt.got:00001080 ; ---------------------------------------------------------------------------
.plt.got:00001086                 align 4
.plt.got:00001086 ; } // starts at 1080
.plt.got:00001086 _plt_got        ends
.plt.got:00001086
LOAD:00001088 ; ===========================================================================
LOAD:00001088
LOAD:00001088 ; Segment type: Pure code
LOAD:00001088 ; Segment permissions: Read/Execute
LOAD:00001088 LOAD            segment mempage public 'CODE' use32
LOAD:00001088                 assume cs:LOAD
LOAD:00001088                 ;org 1088h
LOAD:00001088                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
LOAD:00001088                 align 10h
LOAD:00001088 LOAD            ends
LOAD:00001088
.text:00001090 ; ===========================================================================
.text:00001090
.text:00001090 ; Segment type: Pure code
.text:00001090 ; Segment permissions: Read/Execute
.text:00001090 _text           segment para public 'CODE' use32
.text:00001090                 assume cs:_text
.text:00001090                 ;org 1090h
.text:00001090                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:00001090
.text:00001090 ; =============== S U B R O U T I N E =======================================
.text:00001090
.text:00001090 ; Attributes: noreturn fuzzy-sp
.text:00001090
.text:00001090                 public _start
.text:00001090 _start          proc near               ; DATA XREF: LOAD:00000018↑o
.text:00001090 ; __unwind {
.text:00001090                 endbr32
.text:00001094                 xor     ebp, ebp
.text:00001096                 pop     esi
.text:00001097                 mov     ecx, esp
.text:00001099                 and     esp, 0FFFFFFF0h
.text:0000109C                 push    eax
.text:0000109D                 push    esp             ; stack_end
.text:0000109E                 push    edx             ; rtld_fini
.text:0000109F                 call    sub_10BC
.text:000010A4                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000010AA                 push    0               ; fini
.text:000010AC                 push    0               ; init
.text:000010AE                 push    ecx             ; ubp_av
.text:000010AF                 push    esi             ; argc
.text:000010B0                 push    ds:(main_ptr - 3FD0h)[ebx] ; main
.text:000010B6                 call    ___libc_start_main
.text:000010BB                 hlt
.text:000010BB _start          endp
.text:000010BB
.text:000010BC
.text:000010BC ; =============== S U B R O U T I N E =======================================
.text:000010BC
.text:000010BC
.text:000010BC sub_10BC        proc near               ; CODE XREF: _start+F↑p
.text:000010BC                 mov     ebx, [esp+0]
.text:000010BF                 retn
.text:000010BF ; } // starts at 1090
.text:000010BF sub_10BC        endp
.text:000010BF
.text:000010C0
.text:000010C0 ; =============== S U B R O U T I N E =======================================
.text:000010C0
.text:000010C0
.text:000010C0                 public __x86_get_pc_thunk_bx
.text:000010C0 __x86_get_pc_thunk_bx proc near         ; CODE XREF: _init_proc+8↑p
.text:000010C0                                         ; __do_global_dtors_aux+8↓p ...
.text:000010C0                 mov     ebx, [esp+0]
.text:000010C3                 retn
.text:000010C3 __x86_get_pc_thunk_bx endp
.text:000010C3
.text:000010C3 ; ---------------------------------------------------------------------------
.text:000010C4                 align 10h
.text:000010D0
.text:000010D0 ; =============== S U B R O U T I N E =======================================
.text:000010D0
.text:000010D0
.text:000010D0 deregister_tm_clones proc near          ; CODE XREF: __do_global_dtors_aux:loc_119A↓p
.text:000010D0                 call    __x86_get_pc_thunk_dx
.text:000010D5                 add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000010DB                 lea     ecx, (__bss_start - 3FD0h)[edx]
.text:000010E1                 lea     eax, (__bss_start - 3FD0h)[edx]
.text:000010E7                 cmp     eax, ecx
.text:000010E9                 jz      short locret_1108
.text:000010EB                 mov     eax, ds:(_ITM_deregisterTMCloneTable_ptr - 3FD0h)[edx]
.text:000010F1                 test    eax, eax
.text:000010F3                 jz      short locret_1108
.text:000010F5                 push    ebp
.text:000010F6                 mov     ebp, esp
.text:000010F8                 sub     esp, 14h
.text:000010FB                 push    ecx
.text:000010FC                 call    eax
.text:000010FE                 add     esp, 10h
.text:00001101                 leave
.text:00001102                 retn
.text:00001102 ; ---------------------------------------------------------------------------
.text:00001103                 align 8
.text:00001108
.text:00001108 locret_1108:                            ; CODE XREF: deregister_tm_clones+19↑j
.text:00001108                                         ; deregister_tm_clones+23↑j
.text:00001108                 retn
.text:00001108 deregister_tm_clones endp
.text:00001108
.text:00001108 ; ---------------------------------------------------------------------------
.text:00001109                 align 10h
.text:00001110
.text:00001110 ; =============== S U B R O U T I N E =======================================
.text:00001110
.text:00001110
.text:00001110 register_tm_clones proc near            ; CODE XREF: frame_dummy+4↓j
.text:00001110                 call    __x86_get_pc_thunk_dx
.text:00001115                 add     edx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0000111B                 push    ebp
.text:0000111C                 mov     ebp, esp
.text:0000111E                 push    ebx
.text:0000111F                 lea     ecx, (__bss_start - 3FD0h)[edx]
.text:00001125                 lea     eax, (__bss_start - 3FD0h)[edx]
.text:0000112B                 sub     esp, 4
.text:0000112E                 sub     eax, ecx
.text:00001130                 mov     ebx, eax
.text:00001132                 shr     eax, 1Fh
.text:00001135                 sar     ebx, 2
.text:00001138                 add     eax, ebx
.text:0000113A                 sar     eax, 1
.text:0000113C                 jz      short loc_1152
.text:0000113E                 mov     edx, ds:(_ITM_registerTMCloneTable_ptr - 3FD0h)[edx]
.text:00001144                 test    edx, edx
.text:00001146                 jz      short loc_1152
.text:00001148                 sub     esp, 8
.text:0000114B                 push    eax
.text:0000114C                 push    ecx
.text:0000114D                 call    edx
.text:0000114F                 add     esp, 10h
.text:00001152
.text:00001152 loc_1152:                               ; CODE XREF: register_tm_clones+2C↑j
.text:00001152                                         ; register_tm_clones+36↑j
.text:00001152                 mov     ebx, [ebp-4]
.text:00001155                 leave
.text:00001156                 retn
.text:00001156 register_tm_clones endp
.text:00001156
.text:00001156 ; ---------------------------------------------------------------------------
.text:00001157                 align 10h
.text:00001160
.text:00001160 ; =============== S U B R O U T I N E =======================================
.text:00001160
.text:00001160 ; Attributes: bp-based frame
.text:00001160
.text:00001160 __do_global_dtors_aux proc near         ; DATA XREF: .fini_array:__do_global_dtors_aux_fini_array_entry↓o
.text:00001160
.text:00001160 var_4           = dword ptr -4
.text:00001160
.text:00001160                 endbr32
.text:00001164                 push    ebp
.text:00001165                 mov     ebp, esp
.text:00001167                 push    ebx
.text:00001168                 call    __x86_get_pc_thunk_bx
.text:0000116D                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001173                 sub     esp, 4
.text:00001176                 cmp     ds:(__bss_start - 3FD0h)[ebx], 0
.text:0000117D                 jnz     short loc_11A6
.text:0000117F                 mov     eax, ds:(__cxa_finalize_ptr - 3FD0h)[ebx]
.text:00001185                 test    eax, eax
.text:00001187                 jz      short loc_119A
.text:00001189                 sub     esp, 0Ch
.text:0000118C                 push    (__dso_handle - 3FD0h)[ebx] ; void *
.text:00001192                 call    ___cxa_finalize
.text:00001197                 add     esp, 10h
.text:0000119A
.text:0000119A loc_119A:                               ; CODE XREF: __do_global_dtors_aux+27↑j
.text:0000119A                 call    deregister_tm_clones
.text:0000119F                 mov     ds:(__bss_start - 3FD0h)[ebx], 1
.text:000011A6
.text:000011A6 loc_11A6:                               ; CODE XREF: __do_global_dtors_aux+1D↑j
.text:000011A6                 mov     ebx, [ebp+var_4]
.text:000011A9                 leave
.text:000011AA                 retn
.text:000011AA __do_global_dtors_aux endp
.text:000011AA
.text:000011AA ; ---------------------------------------------------------------------------
.text:000011AB                 align 10h
.text:000011B0
.text:000011B0 ; =============== S U B R O U T I N E =======================================
.text:000011B0
.text:000011B0
.text:000011B0 frame_dummy     proc near               ; DATA XREF: .init_array:__frame_dummy_init_array_entry↓o
.text:000011B0                 endbr32
.text:000011B4                 jmp     register_tm_clones
.text:000011B4 frame_dummy     endp
.text:000011B4
.text:000011B9
.text:000011B9 ; =============== S U B R O U T I N E =======================================
.text:000011B9
.text:000011B9
.text:000011B9                 public __x86_get_pc_thunk_dx
.text:000011B9 __x86_get_pc_thunk_dx proc near         ; CODE XREF: deregister_tm_clones↑p
.text:000011B9                                         ; register_tm_clones↑p
.text:000011B9                 mov     edx, [esp+0]
.text:000011BC                 retn
.text:000011BC __x86_get_pc_thunk_dx endp
.text:000011BC
.text:000011BD
.text:000011BD ; =============== S U B R O U T I N E =======================================
.text:000011BD
.text:000011BD ; Attributes: noreturn bp-based frame
.text:000011BD
.text:000011BD                 public reach_error
.text:000011BD reach_error     proc near
.text:000011BD ; __unwind {
.text:000011BD                 push    ebp
.text:000011BE                 mov     ebp, esp
.text:000011C0                 push    ebx
.text:000011C1                 sub     esp, 4
.text:000011C4                 call    __x86_get_pc_thunk_ax
.text:000011C9                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000011CE                 lea     edx, (__PRETTY_FUNCTION___0 - 3FD0h)[eax] ; "reach_error"
.text:000011D4                 push    edx             ; function
.text:000011D5                 push    3               ; line
.text:000011D7                 lea     edx, (a200511131C - 3FD0h)[eax] ; "20051113-1.c"
.text:000011DD                 push    edx             ; file
.text:000011DE                 lea     edx, (a0 - 3FD0h)[eax] ; "0"
.text:000011E4                 push    edx             ; assertion
.text:000011E5                 mov     ebx, eax
.text:000011E7                 call    ___assert_fail
.text:000011E7 ; } // starts at 11BD
.text:000011E7 reach_error     endp
.text:000011E7
.text:000011EC
.text:000011EC ; =============== S U B R O U T I N E =======================================
.text:000011EC
.text:000011EC ; Attributes: bp-based frame
.text:000011EC
.text:000011EC                 public Sum
.text:000011EC Sum             proc near               ; CODE XREF: main+B6↓p
.text:000011EC
.text:000011EC var_C           = dword ptr -0Ch
.text:000011EC var_8           = dword ptr -8
.text:000011EC var_4           = dword ptr -4
.text:000011EC arg_0           = dword ptr  8
.text:000011EC
.text:000011EC ; __unwind {
.text:000011EC                 push    ebp
.text:000011ED                 mov     ebp, esp
.text:000011EF                 sub     esp, 10h
.text:000011F2                 call    __x86_get_pc_thunk_ax
.text:000011F7                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000011FC                 mov     [ebp+var_8], 0
.text:00001203                 mov     [ebp+var_4], 0
.text:0000120A                 mov     [ebp+var_C], 0
.text:00001211                 jmp     short loc_122E
.text:00001213 ; ---------------------------------------------------------------------------
.text:00001213
.text:00001213 loc_1213:                               ; CODE XREF: Sum+4A↓j
.text:00001213                 mov     edx, [ebp+arg_0]
.text:00001216                 mov     eax, [ebp+var_C]
.text:00001219                 imul    eax, 1Eh
.text:0000121C                 add     eax, edx
.text:0000121E                 mov     edx, [eax+0Eh]
.text:00001221                 mov     eax, [eax+0Ah]
.text:00001224                 add     [ebp+var_8], eax
.text:00001227                 adc     [ebp+var_4], edx
.text:0000122A                 add     [ebp+var_C], 1
.text:0000122E
.text:0000122E loc_122E:                               ; CODE XREF: Sum+25↑j
.text:0000122E                 mov     eax, [ebp+arg_0]
.text:00001231                 mov     eax, ds:(_GLOBAL_OFFSET_TABLE_ - 3FD0h)[eax]
.text:00001233                 cmp     [ebp+var_C], eax
.text:00001236                 jl      short loc_1213
.text:00001238                 mov     eax, [ebp+var_8]
.text:0000123B                 mov     edx, [ebp+var_4]
.text:0000123E                 leave
.text:0000123F                 retn
.text:0000123F ; } // starts at 11EC
.text:0000123F Sum             endp
.text:0000123F
.text:00001240
.text:00001240 ; =============== S U B R O U T I N E =======================================
.text:00001240
.text:00001240 ; Attributes: bp-based frame
.text:00001240
.text:00001240                 public Sum2
.text:00001240 Sum2            proc near               ; CODE XREF: main+EA↓p
.text:00001240
.text:00001240 var_C           = dword ptr -0Ch
.text:00001240 var_8           = dword ptr -8
.text:00001240 var_4           = dword ptr -4
.text:00001240 arg_0           = dword ptr  8
.text:00001240
.text:00001240 ; __unwind {
.text:00001240                 push    ebp
.text:00001241                 mov     ebp, esp
.text:00001243                 sub     esp, 10h
.text:00001246                 call    __x86_get_pc_thunk_ax
.text:0000124B                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:00001250                 mov     [ebp+var_8], 0
.text:00001257                 mov     [ebp+var_4], 0
.text:0000125E                 mov     [ebp+var_C], 0
.text:00001265                 jmp     short loc_1282
.text:00001267 ; ---------------------------------------------------------------------------
.text:00001267
.text:00001267 loc_1267:                               ; CODE XREF: Sum2+4A↓j
.text:00001267                 mov     edx, [ebp+arg_0]
.text:0000126A                 mov     eax, [ebp+var_C]
.text:0000126D                 imul    eax, 1Eh
.text:00001270                 add     eax, edx
.text:00001272                 mov     edx, [eax+16h]
.text:00001275                 mov     eax, [eax+12h]
.text:00001278                 add     [ebp+var_8], eax
.text:0000127B                 adc     [ebp+var_4], edx
.text:0000127E                 add     [ebp+var_C], 1
.text:00001282
.text:00001282 loc_1282:                               ; CODE XREF: Sum2+25↑j
.text:00001282                 mov     eax, [ebp+arg_0]
.text:00001285                 mov     eax, ds:(_GLOBAL_OFFSET_TABLE_ - 3FD0h)[eax]
.text:00001287                 cmp     [ebp+var_C], eax
.text:0000128A                 jl      short loc_1267
.text:0000128C                 mov     eax, [ebp+var_8]
.text:0000128F                 mov     edx, [ebp+var_4]
.text:00001292                 leave
.text:00001293                 retn
.text:00001293 ; } // starts at 1240
.text:00001293 Sum2            endp
.text:00001293
.text:00001294
.text:00001294 ; =============== S U B R O U T I N E =======================================
.text:00001294
.text:00001294 ; Attributes: bp-based frame
.text:00001294
.text:00001294 dummy_abort     proc near               ; CODE XREF: main+DF↓p
.text:00001294                                         ; main+10B↓p
.text:00001294 ; __unwind {
.text:00001294                 push    ebp
.text:00001295                 mov     ebp, esp
.text:00001297                 call    __x86_get_pc_thunk_ax
.text:0000129C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000012A1                 nop
.text:000012A2                 pop     ebp
.text:000012A3                 retn
.text:000012A3 ; } // starts at 1294
.text:000012A3 dummy_abort     endp
.text:000012A3
.text:000012A4
.text:000012A4 ; =============== S U B R O U T I N E =======================================
.text:000012A4
.text:000012A4 ; Attributes: bp-based frame fuzzy-sp
.text:000012A4
.text:000012A4 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:000012A4                 public main
.text:000012A4 main            proc near               ; DATA XREF: .got:main_ptr↓o
.text:000012A4
.text:000012A4 var_30          = dword ptr -30h
.text:000012A4 var_2C          = dword ptr -2Ch
.text:000012A4 s               = dword ptr -1Ch
.text:000012A4 argc            = dword ptr  8
.text:000012A4 argv            = dword ptr  0Ch
.text:000012A4 envp            = dword ptr  10h
.text:000012A4
.text:000012A4 ; __unwind {
.text:000012A4                 lea     ecx, [esp+4]
.text:000012A8                 and     esp, 0FFFFFFF0h
.text:000012AB                 push    dword ptr [ecx-4]
.text:000012AE                 push    ebp
.text:000012AF                 mov     ebp, esp
.text:000012B1                 push    edi
.text:000012B2                 push    esi
.text:000012B3                 push    ebx
.text:000012B4                 push    ecx
.text:000012B5                 sub     esp, 28h
.text:000012B8                 call    __x86_get_pc_thunk_bx
.text:000012BD                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:000012C3                 sub     esp, 0Ch
.text:000012C6                 push    5Eh ; '^'       ; size
.text:000012C8                 call    _malloc
.text:000012CD                 add     esp, 10h
.text:000012D0                 mov     [ebp+s], eax
.text:000012D3                 sub     esp, 4
.text:000012D6                 push    5Eh ; '^'       ; n
.text:000012D8                 push    0               ; c
.text:000012DA                 push    [ebp+s]         ; s
.text:000012DD                 call    _memset
.text:000012E2                 add     esp, 10h
.text:000012E5                 mov     eax, [ebp+s]
.text:000012E8                 mov     dword ptr [eax], 3
.text:000012EE                 mov     eax, [ebp+s]
.text:000012F1                 mov     dword ptr [eax+0Ah], 22Bh
.text:000012F8                 mov     dword ptr [eax+0Eh], 0
.text:000012FF                 mov     eax, [ebp+s]
.text:00001302                 mov     dword ptr [eax+28h], 3E7h
.text:00001309                 mov     dword ptr [eax+2Ch], 0
.text:00001310                 mov     eax, [ebp+s]
.text:00001313                 mov     dword ptr [eax+46h], 1010101h
.text:0000131A                 mov     dword ptr [eax+4Ah], 1
.text:00001321                 mov     eax, [ebp+s]
.text:00001324                 mov     dword ptr [eax+12h], 22Bh
.text:0000132B                 mov     dword ptr [eax+16h], 0
.text:00001332                 mov     eax, [ebp+s]
.text:00001335                 mov     dword ptr [eax+30h], 3E7h
.text:0000133C                 mov     dword ptr [eax+34h], 0
.text:00001343                 mov     eax, [ebp+s]
.text:00001346                 mov     dword ptr [eax+4Eh], 1010101h
.text:0000134D                 mov     dword ptr [eax+52h], 1
.text:00001354                 sub     esp, 0Ch
.text:00001357                 push    [ebp+s]
.text:0000135A                 call    Sum
.text:0000135F                 add     esp, 10h
.text:00001362                 mov     ecx, eax
.text:00001364                 xor     ecx, 1010713h
.text:0000136A                 mov     [ebp+var_30], ecx
.text:0000136D                 mov     eax, edx
.text:0000136F                 xor     eax, 1
.text:00001372                 mov     [ebp+var_2C], eax
.text:00001375                 mov     edx, [ebp+var_30]
.text:00001378                 mov     ecx, [ebp+var_2C]
.text:0000137B                 mov     eax, ecx
.text:0000137D                 or      eax, edx
.text:0000137F                 test    eax, eax
.text:00001381                 jz      short loc_1388
.text:00001383                 call    dummy_abort
.text:00001388
.text:00001388 loc_1388:                               ; CODE XREF: main+DD↑j
.text:00001388                 sub     esp, 0Ch
.text:0000138B                 push    [ebp+s]
.text:0000138E                 call    Sum2
.text:00001393                 add     esp, 10h
.text:00001396                 mov     ebx, eax
.text:00001398                 xor     ebx, 1010713h
.text:0000139E                 mov     esi, ebx
.text:000013A0                 mov     eax, edx
.text:000013A2                 xor     eax, 1
.text:000013A5                 mov     edi, eax
.text:000013A7                 mov     eax, edi
.text:000013A9                 or      eax, esi
.text:000013AB                 test    eax, eax
.text:000013AD                 jz      short loc_13B4
.text:000013AF                 call    dummy_abort
.text:000013B4
.text:000013B4 loc_13B4:                               ; CODE XREF: main+109↑j
.text:000013B4                 mov     [ebp+s], 0
.text:000013BB                 mov     eax, 0
.text:000013C0                 lea     esp, [ebp-10h]
.text:000013C3                 pop     ecx
.text:000013C4                 pop     ebx
.text:000013C5                 pop     esi
.text:000013C6                 pop     edi
.text:000013C7                 pop     ebp
.text:000013C8                 lea     esp, [ecx-4]
.text:000013CB                 retn
.text:000013CB ; } // starts at 12A4
.text:000013CB main            endp
.text:000013CB
.text:000013CC
.text:000013CC ; =============== S U B R O U T I N E =======================================
.text:000013CC
.text:000013CC
.text:000013CC                 public __x86_get_pc_thunk_ax
.text:000013CC __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text:000013CC                                         ; Sum+6↑p ...
.text:000013CC ; __unwind {
.text:000013CC                 mov     eax, [esp+0]
.text:000013CF                 retn
.text:000013CF ; } // starts at 13CC
.text:000013CF __x86_get_pc_thunk_ax endp
.text:000013CF
.text:000013CF _text           ends
.text:000013CF
.fini:000013D0 ; ===========================================================================
.fini:000013D0
.fini:000013D0 ; Segment type: Pure code
.fini:000013D0 ; Segment permissions: Read/Execute
.fini:000013D0 _fini           segment dword public 'CODE' use32
.fini:000013D0                 assume cs:_fini
.fini:000013D0                 ;org 13D0h
.fini:000013D0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.fini:000013D0
.fini:000013D0 ; =============== S U B R O U T I N E =======================================
.fini:000013D0
.fini:000013D0
.fini:000013D0                 public _term_proc
.fini:000013D0 _term_proc      proc near
.fini:000013D0                 endbr32                 ; _fini
.fini:000013D4                 push    ebx
.fini:000013D5                 sub     esp, 8
.fini:000013D8                 call    __x86_get_pc_thunk_bx
.fini:000013DD                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.fini:000013E3                 add     esp, 8
.fini:000013E6                 pop     ebx
.fini:000013E7                 retn
.fini:000013E7 _term_proc      endp
.fini:000013E7
.fini:000013E7 _fini           ends
.fini:000013E7
.rodata:00002000 ; ===========================================================================
.rodata:00002000
.rodata:00002000 ; Segment type: Pure data
.rodata:00002000 ; Segment permissions: Read
.rodata:00002000 _rodata         segment dword public 'CONST' use32
.rodata:00002000                 assume cs:_rodata
.rodata:00002000                 ;org 2000h
.rodata:00002000                 public _fp_hw
.rodata:00002000 _fp_hw          db    3                 ; DATA XREF: LOAD:000000BC↑o
.rodata:00002001                 db    0
.rodata:00002002                 db    0
.rodata:00002003                 db    0
.rodata:00002004                 public _IO_stdin_used
.rodata:00002004 _IO_stdin_used  db    1                 ; DATA XREF: LOAD:0000029C↑o
.rodata:00002005                 db    0
.rodata:00002006                 db    2
.rodata:00002007                 db    0
.rodata:00002008 a200511131C     db '20051113-1.c',0     ; DATA XREF: reach_error+1A↑o
.rodata:00002015 a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:00002017                 align 4
.rodata:00002018 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:00002018                                         ; DATA XREF: reach_error+11↑o
.rodata:00002018 _rodata         ends
.rodata:00002018
.eh_frame_hdr:00002024 ; ===========================================================================
.eh_frame_hdr:00002024
.eh_frame_hdr:00002024 ; Segment type: Pure data
.eh_frame_hdr:00002024 ; Segment permissions: Read
.eh_frame_hdr:00002024 _eh_frame_hdr   segment dword public 'CONST' use32
.eh_frame_hdr:00002024                 assume cs:_eh_frame_hdr
.eh_frame_hdr:00002024                 ;org 2024h
.eh_frame_hdr:00002024 __GNU_EH_FRAME_HDR db    1              ; DATA XREF: LOAD:0000013C↑o
.eh_frame_hdr:00002025                 db  1Bh
.eh_frame_hdr:00002026                 db    3
.eh_frame_hdr:00002027                 db  3Bh ; ;
.eh_frame_hdr:00002028                 db  50h ; P
.eh_frame_hdr:00002029                 db    0
.eh_frame_hdr:0000202A                 db    0
.eh_frame_hdr:0000202B                 db    0
.eh_frame_hdr:0000202C                 db    9
.eh_frame_hdr:0000202D                 db    0
.eh_frame_hdr:0000202E                 db    0
.eh_frame_hdr:0000202F                 db    0
.eh_frame_hdr:00002030                 db  0Ch
.eh_frame_hdr:00002031                 db 0F0h
.eh_frame_hdr:00002032                 db 0FFh
.eh_frame_hdr:00002033                 db 0FFh
.eh_frame_hdr:00002034                 db  80h
.eh_frame_hdr:00002035                 db    0
.eh_frame_hdr:00002036                 db    0
.eh_frame_hdr:00002037                 db    0
.eh_frame_hdr:00002038                 db  5Ch ; \
.eh_frame_hdr:00002039                 db 0F0h
.eh_frame_hdr:0000203A                 db 0FFh
.eh_frame_hdr:0000203B                 db 0FFh
.eh_frame_hdr:0000203C                 db 0A4h
.eh_frame_hdr:0000203D                 db    0
.eh_frame_hdr:0000203E                 db    0
.eh_frame_hdr:0000203F                 db    0
.eh_frame_hdr:00002040                 db  6Ch ; l
.eh_frame_hdr:00002041                 db 0F0h
.eh_frame_hdr:00002042                 db 0FFh
.eh_frame_hdr:00002043                 db 0FFh
.eh_frame_hdr:00002044                 db  6Ch ; l
.eh_frame_hdr:00002045                 db    0
.eh_frame_hdr:00002046                 db    0
.eh_frame_hdr:00002047                 db    0
.eh_frame_hdr:00002048                 db  99h
.eh_frame_hdr:00002049                 db 0F1h
.eh_frame_hdr:0000204A                 db 0FFh
.eh_frame_hdr:0000204B                 db 0FFh
.eh_frame_hdr:0000204C                 db 0B8h
.eh_frame_hdr:0000204D                 db    0
.eh_frame_hdr:0000204E                 db    0
.eh_frame_hdr:0000204F                 db    0
.eh_frame_hdr:00002050                 db 0C8h
.eh_frame_hdr:00002051                 db 0F1h
.eh_frame_hdr:00002052                 db 0FFh
.eh_frame_hdr:00002053                 db 0FFh
.eh_frame_hdr:00002054                 db 0D4h
.eh_frame_hdr:00002055                 db    0
.eh_frame_hdr:00002056                 db    0
.eh_frame_hdr:00002057                 db    0
.eh_frame_hdr:00002058                 db  1Ch
.eh_frame_hdr:00002059                 db 0F2h
.eh_frame_hdr:0000205A                 db 0FFh
.eh_frame_hdr:0000205B                 db 0FFh
.eh_frame_hdr:0000205C                 db 0F4h
.eh_frame_hdr:0000205D                 db    0
.eh_frame_hdr:0000205E                 db    0
.eh_frame_hdr:0000205F                 db    0
.eh_frame_hdr:00002060                 db  70h ; p
.eh_frame_hdr:00002061                 db 0F2h
.eh_frame_hdr:00002062                 db 0FFh
.eh_frame_hdr:00002063                 db 0FFh
.eh_frame_hdr:00002064                 db  14h
.eh_frame_hdr:00002065                 db    1
.eh_frame_hdr:00002066                 db    0
.eh_frame_hdr:00002067                 db    0
.eh_frame_hdr:00002068                 db  80h
.eh_frame_hdr:00002069                 db 0F2h
.eh_frame_hdr:0000206A                 db 0FFh
.eh_frame_hdr:0000206B                 db 0FFh
.eh_frame_hdr:0000206C                 db  34h ; 4
.eh_frame_hdr:0000206D                 db    1
.eh_frame_hdr:0000206E                 db    0
.eh_frame_hdr:0000206F                 db    0
.eh_frame_hdr:00002070                 db 0A8h
.eh_frame_hdr:00002071                 db 0F3h
.eh_frame_hdr:00002072                 db 0FFh
.eh_frame_hdr:00002073                 db 0FFh
.eh_frame_hdr:00002074                 db  78h ; x
.eh_frame_hdr:00002075                 db    1
.eh_frame_hdr:00002076                 db    0
.eh_frame_hdr:00002077                 db    0
.eh_frame_hdr:00002077 _eh_frame_hdr   ends
.eh_frame_hdr:00002077
.eh_frame:00002078 ; ===========================================================================
.eh_frame:00002078
.eh_frame:00002078 ; Segment type: Pure data
.eh_frame:00002078 ; Segment permissions: Read
.eh_frame:00002078 _eh_frame       segment dword public 'CONST' use32
.eh_frame:00002078                 assume cs:_eh_frame
.eh_frame:00002078                 ;org 2078h
.eh_frame:00002078                 db  14h
.eh_frame:00002079                 db    0
.eh_frame:0000207A                 db    0
.eh_frame:0000207B                 db    0
.eh_frame:0000207C                 db    0
.eh_frame:0000207D                 db    0
.eh_frame:0000207E                 db    0
.eh_frame:0000207F                 db    0
.eh_frame:00002080                 db    1
.eh_frame:00002081                 db  7Ah ; z
.eh_frame:00002082                 db  52h ; R
.eh_frame:00002083                 db    0
.eh_frame:00002084                 db    1
.eh_frame:00002085                 db  7Ch ; |
.eh_frame:00002086                 db    8
.eh_frame:00002087                 db    1
.eh_frame:00002088                 db  1Bh
.eh_frame:00002089                 db  0Ch
.eh_frame:0000208A                 db    4
.eh_frame:0000208B                 db    4
.eh_frame:0000208C                 db  88h
.eh_frame:0000208D                 db    1
.eh_frame:0000208E                 db    0
.eh_frame:0000208F                 db    0
.eh_frame:00002090                 db  10h
.eh_frame:00002091                 db    0
.eh_frame:00002092                 db    0
.eh_frame:00002093                 db    0
.eh_frame:00002094                 db  1Ch
.eh_frame:00002095                 db    0
.eh_frame:00002096                 db    0
.eh_frame:00002097                 db    0
.eh_frame:00002098                 db 0F8h
.eh_frame:00002099                 db 0EFh
.eh_frame:0000209A                 db 0FFh
.eh_frame:0000209B                 db 0FFh
.eh_frame:0000209C                 db  30h ; 0
.eh_frame:0000209D                 db    0
.eh_frame:0000209E                 db    0
.eh_frame:0000209F                 db    0
.eh_frame:000020A0                 db    0
.eh_frame:000020A1                 db  44h ; D
.eh_frame:000020A2                 db    7
.eh_frame:000020A3                 db    8
.eh_frame:000020A4                 db  20h
.eh_frame:000020A5                 db    0
.eh_frame:000020A6                 db    0
.eh_frame:000020A7                 db    0
.eh_frame:000020A8                 db  30h ; 0
.eh_frame:000020A9                 db    0
.eh_frame:000020AA                 db    0
.eh_frame:000020AB                 db    0
.eh_frame:000020AC                 db  84h
.eh_frame:000020AD                 db 0EFh
.eh_frame:000020AE                 db 0FFh
.eh_frame:000020AF                 db 0FFh
.eh_frame:000020B0                 db  50h ; P
.eh_frame:000020B1                 db    0
.eh_frame:000020B2                 db    0
.eh_frame:000020B3                 db    0
.eh_frame:000020B4                 db    0
.eh_frame:000020B5                 db  0Eh
.eh_frame:000020B6                 db    8
.eh_frame:000020B7                 db  46h ; F
.eh_frame:000020B8                 db  0Eh
.eh_frame:000020B9                 db  0Ch
.eh_frame:000020BA                 db  4Ah ; J
.eh_frame:000020BB                 db  0Fh
.eh_frame:000020BC                 db  0Bh
.eh_frame:000020BD                 db  74h ; t
.eh_frame:000020BE                 db    4
.eh_frame:000020BF                 db  78h ; x
.eh_frame:000020C0                 db    0
.eh_frame:000020C1                 db  3Fh ; ?
.eh_frame:000020C2                 db  1Ah
.eh_frame:000020C3                 db  3Bh ; ;
.eh_frame:000020C4                 db  2Ah ; *
.eh_frame:000020C5                 db  32h ; 2
.eh_frame:000020C6                 db  24h ; $
.eh_frame:000020C7                 db  22h ; "
.eh_frame:000020C8                 db  10h
.eh_frame:000020C9                 db    0
.eh_frame:000020CA                 db    0
.eh_frame:000020CB                 db    0
.eh_frame:000020CC                 db  54h ; T
.eh_frame:000020CD                 db    0
.eh_frame:000020CE                 db    0
.eh_frame:000020CF                 db    0
.eh_frame:000020D0                 db 0B0h
.eh_frame:000020D1                 db 0EFh
.eh_frame:000020D2                 db 0FFh
.eh_frame:000020D3                 db 0FFh
.eh_frame:000020D4                 db    8
.eh_frame:000020D5                 db    0
.eh_frame:000020D6                 db    0
.eh_frame:000020D7                 db    0
.eh_frame:000020D8                 db    0
.eh_frame:000020D9                 db    0
.eh_frame:000020DA                 db    0
.eh_frame:000020DB                 db    0
.eh_frame:000020DC                 db  18h
.eh_frame:000020DD                 db    0
.eh_frame:000020DE                 db    0
.eh_frame:000020DF                 db    0
.eh_frame:000020E0                 db  68h ; h
.eh_frame:000020E1                 db    0
.eh_frame:000020E2                 db    0
.eh_frame:000020E3                 db    0
.eh_frame:000020E4                 db 0D9h
.eh_frame:000020E5                 db 0F0h
.eh_frame:000020E6                 db 0FFh
.eh_frame:000020E7                 db 0FFh
.eh_frame:000020E8                 db  2Fh ; /
.eh_frame:000020E9                 db    0
.eh_frame:000020EA                 db    0
.eh_frame:000020EB                 db    0
.eh_frame:000020EC                 db    0
.eh_frame:000020ED                 db  41h ; A
.eh_frame:000020EE                 db  0Eh
.eh_frame:000020EF                 db    8
.eh_frame:000020F0                 db  85h
.eh_frame:000020F1                 db    2
.eh_frame:000020F2                 db  42h ; B
.eh_frame:000020F3                 db  0Dh
.eh_frame:000020F4                 db    5
.eh_frame:000020F5                 db  44h ; D
.eh_frame:000020F6                 db  83h
.eh_frame:000020F7                 db    3
.eh_frame:000020F8                 db  1Ch
.eh_frame:000020F9                 db    0
.eh_frame:000020FA                 db    0
.eh_frame:000020FB                 db    0
.eh_frame:000020FC                 db  84h
.eh_frame:000020FD                 db    0
.eh_frame:000020FE                 db    0
.eh_frame:000020FF                 db    0
.eh_frame:00002100                 db 0ECh
.eh_frame:00002101                 db 0F0h
.eh_frame:00002102                 db 0FFh
.eh_frame:00002103                 db 0FFh
.eh_frame:00002104                 db  54h ; T
.eh_frame:00002105                 db    0
.eh_frame:00002106                 db    0
.eh_frame:00002107                 db    0
.eh_frame:00002108                 db    0
.eh_frame:00002109                 db  41h ; A
.eh_frame:0000210A                 db  0Eh
.eh_frame:0000210B                 db    8
.eh_frame:0000210C                 db  85h
.eh_frame:0000210D                 db    2
.eh_frame:0000210E                 db  42h ; B
.eh_frame:0000210F                 db  0Dh
.eh_frame:00002110                 db    5
.eh_frame:00002111                 db    2
.eh_frame:00002112                 db  50h ; P
.eh_frame:00002113                 db 0C5h
.eh_frame:00002114                 db  0Ch
.eh_frame:00002115                 db    4
.eh_frame:00002116                 db    4
.eh_frame:00002117                 db    0
.eh_frame:00002118                 db  1Ch
.eh_frame:00002119                 db    0
.eh_frame:0000211A                 db    0
.eh_frame:0000211B                 db    0
.eh_frame:0000211C                 db 0A4h
.eh_frame:0000211D                 db    0
.eh_frame:0000211E                 db    0
.eh_frame:0000211F                 db    0
.eh_frame:00002120                 db  20h
.eh_frame:00002121                 db 0F1h
.eh_frame:00002122                 db 0FFh
.eh_frame:00002123                 db 0FFh
.eh_frame:00002124                 db  54h ; T
.eh_frame:00002125                 db    0
.eh_frame:00002126                 db    0
.eh_frame:00002127                 db    0
.eh_frame:00002128                 db    0
.eh_frame:00002129                 db  41h ; A
.eh_frame:0000212A                 db  0Eh
.eh_frame:0000212B                 db    8
.eh_frame:0000212C                 db  85h
.eh_frame:0000212D                 db    2
.eh_frame:0000212E                 db  42h ; B
.eh_frame:0000212F                 db  0Dh
.eh_frame:00002130                 db    5
.eh_frame:00002131                 db    2
.eh_frame:00002132                 db  50h ; P
.eh_frame:00002133                 db 0C5h
.eh_frame:00002134                 db  0Ch
.eh_frame:00002135                 db    4
.eh_frame:00002136                 db    4
.eh_frame:00002137                 db    0
.eh_frame:00002138                 db  1Ch
.eh_frame:00002139                 db    0
.eh_frame:0000213A                 db    0
.eh_frame:0000213B                 db    0
.eh_frame:0000213C                 db 0C4h
.eh_frame:0000213D                 db    0
.eh_frame:0000213E                 db    0
.eh_frame:0000213F                 db    0
.eh_frame:00002140                 db  54h ; T
.eh_frame:00002141                 db 0F1h
.eh_frame:00002142                 db 0FFh
.eh_frame:00002143                 db 0FFh
.eh_frame:00002144                 db  10h
.eh_frame:00002145                 db    0
.eh_frame:00002146                 db    0
.eh_frame:00002147                 db    0
.eh_frame:00002148                 db    0
.eh_frame:00002149                 db  41h ; A
.eh_frame:0000214A                 db  0Eh
.eh_frame:0000214B                 db    8
.eh_frame:0000214C                 db  85h
.eh_frame:0000214D                 db    2
.eh_frame:0000214E                 db  42h ; B
.eh_frame:0000214F                 db  0Dh
.eh_frame:00002150                 db    5
.eh_frame:00002151                 db  4Ch ; L
.eh_frame:00002152                 db 0C5h
.eh_frame:00002153                 db  0Ch
.eh_frame:00002154                 db    4
.eh_frame:00002155                 db    4
.eh_frame:00002156                 db    0
.eh_frame:00002157                 db    0
.eh_frame:00002158                 db  40h ; @
.eh_frame:00002159                 db    0
.eh_frame:0000215A                 db    0
.eh_frame:0000215B                 db    0
.eh_frame:0000215C                 db 0E4h
.eh_frame:0000215D                 db    0
.eh_frame:0000215E                 db    0
.eh_frame:0000215F                 db    0
.eh_frame:00002160                 db  44h ; D
.eh_frame:00002161                 db 0F1h
.eh_frame:00002162                 db 0FFh
.eh_frame:00002163                 db 0FFh
.eh_frame:00002164                 db  28h ; (
.eh_frame:00002165                 db    1
.eh_frame:00002166                 db    0
.eh_frame:00002167                 db    0
.eh_frame:00002168                 db    0
.eh_frame:00002169                 db  44h ; D
.eh_frame:0000216A                 db  0Ch
.eh_frame:0000216B                 db    1
.eh_frame:0000216C                 db    0
.eh_frame:0000216D                 db  49h ; I
.eh_frame:0000216E                 db  10h
.eh_frame:0000216F                 db    5
.eh_frame:00002170                 db    2
.eh_frame:00002171                 db  75h ; u
.eh_frame:00002172                 db    0
.eh_frame:00002173                 db  44h ; D
.eh_frame:00002174                 db  0Fh
.eh_frame:00002175                 db    3
.eh_frame:00002176                 db  75h ; u
.eh_frame:00002177                 db  70h ; p
.eh_frame:00002178                 db    6
.eh_frame:00002179                 db  10h
.eh_frame:0000217A                 db    7
.eh_frame:0000217B                 db    2
.eh_frame:0000217C                 db  75h ; u
.eh_frame:0000217D                 db  7Ch ; |
.eh_frame:0000217E                 db  10h
.eh_frame:0000217F                 db    6
.eh_frame:00002180                 db    2
.eh_frame:00002181                 db  75h ; u
.eh_frame:00002182                 db  78h ; x
.eh_frame:00002183                 db  10h
.eh_frame:00002184                 db    3
.eh_frame:00002185                 db    2
.eh_frame:00002186                 db  75h ; u
.eh_frame:00002187                 db  74h ; t
.eh_frame:00002188                 db    3
.eh_frame:00002189                 db  0Fh
.eh_frame:0000218A                 db    1
.eh_frame:0000218B                 db 0C1h
.eh_frame:0000218C                 db  0Ch
.eh_frame:0000218D                 db    1
.eh_frame:0000218E                 db    0
.eh_frame:0000218F                 db  41h ; A
.eh_frame:00002190                 db 0C3h
.eh_frame:00002191                 db  41h ; A
.eh_frame:00002192                 db 0C6h
.eh_frame:00002193                 db  41h ; A
.eh_frame:00002194                 db 0C7h
.eh_frame:00002195                 db  41h ; A
.eh_frame:00002196                 db 0C5h
.eh_frame:00002197                 db  43h ; C
.eh_frame:00002198                 db  0Ch
.eh_frame:00002199                 db    4
.eh_frame:0000219A                 db    4
.eh_frame:0000219B                 db    0
.eh_frame:0000219C                 db  10h
.eh_frame:0000219D                 db    0
.eh_frame:0000219E                 db    0
.eh_frame:0000219F                 db    0
.eh_frame:000021A0                 db  28h ; (
.eh_frame:000021A1                 db    1
.eh_frame:000021A2                 db    0
.eh_frame:000021A3                 db    0
.eh_frame:000021A4                 db  28h ; (
.eh_frame:000021A5                 db 0F2h
.eh_frame:000021A6                 db 0FFh
.eh_frame:000021A7                 db 0FFh
.eh_frame:000021A8                 db    4
.eh_frame:000021A9                 db    0
.eh_frame:000021AA                 db    0
.eh_frame:000021AB                 db    0
.eh_frame:000021AC                 db    0
.eh_frame:000021AD                 db    0
.eh_frame:000021AE                 db    0
.eh_frame:000021AF                 db    0
.eh_frame:000021B0 __FRAME_END__   db    0
.eh_frame:000021B1                 db    0
.eh_frame:000021B2                 db    0
.eh_frame:000021B3                 db    0
.eh_frame:000021B3 _eh_frame       ends
.eh_frame:000021B3
.init_array:00003ED0 ; ELF Initialization Function Table
.init_array:00003ED0 ; ===========================================================================
.init_array:00003ED0
.init_array:00003ED0 ; Segment type: Pure data
.init_array:00003ED0 ; Segment permissions: Read/Write
.init_array:00003ED0 _init_array     segment dword public 'DATA' use32
.init_array:00003ED0                 assume cs:_init_array
.init_array:00003ED0                 ;org 3ED0h
.init_array:00003ED0 __frame_dummy_init_array_entry dd offset frame_dummy
.init_array:00003ED0                                         ; DATA XREF: LOAD:000000DC↑o
.init_array:00003ED0                                         ; LOAD:0000017C↑o
.init_array:00003ED0 _init_array     ends
.init_array:00003ED0
.fini_array:00003ED4 ; ELF Termination Function Table
.fini_array:00003ED4 ; ===========================================================================
.fini_array:00003ED4
.fini_array:00003ED4 ; Segment type: Pure data
.fini_array:00003ED4 ; Segment permissions: Read/Write
.fini_array:00003ED4 _fini_array     segment dword public 'DATA' use32
.fini_array:00003ED4                 assume cs:_fini_array
.fini_array:00003ED4                 ;org 3ED4h
.fini_array:00003ED4 __do_global_dtors_aux_fini_array_entry dd offset __do_global_dtors_aux
.fini_array:00003ED4 _fini_array     ends
.fini_array:00003ED4
LOAD:00003ED8 ; ELF Dynamic Information
LOAD:00003ED8 ; ===========================================================================
LOAD:00003ED8
LOAD:00003ED8 ; Segment type: Pure data
LOAD:00003ED8 ; Segment permissions: Read/Write
LOAD:00003ED8 LOAD            segment mempage public 'DATA' use32
LOAD:00003ED8                 assume cs:LOAD
LOAD:00003ED8                 ;org 3ED8h
LOAD:00003ED8 _DYNAMIC        Elf32_Dyn <1, <4Dh>>    ; DATA XREF: LOAD:000000FC↑o
LOAD:00003ED8                                         ; .got:_GLOBAL_OFFSET_TABLE_↓o
LOAD:00003ED8                                         ; DT_NEEDED libc.so.6
LOAD:00003EE0                 Elf32_Dyn <0Ch, <1000h>> ; DT_INIT
LOAD:00003EE8                 Elf32_Dyn <0Dh, <13D0h>> ; DT_FINI
LOAD:00003EF0                 Elf32_Dyn <19h, <3ED0h>> ; DT_INIT_ARRAY
LOAD:00003EF8                 Elf32_Dyn <1Bh, <4>>    ; DT_INIT_ARRAYSZ
LOAD:00003F00                 Elf32_Dyn <1Ah, <3ED4h>> ; DT_FINI_ARRAY
LOAD:00003F08                 Elf32_Dyn <1Ch, <4>>    ; DT_FINI_ARRAYSZ
LOAD:00003F10                 Elf32_Dyn <6FFFFEF5h, <1ECh>> ; DT_GNU_HASH
LOAD:00003F18                 Elf32_Dyn <5, <2ACh>>   ; DT_STRTAB
LOAD:00003F20                 Elf32_Dyn <6, <20Ch>>   ; DT_SYMTAB
LOAD:00003F28                 Elf32_Dyn <0Ah, <0BDh>> ; DT_STRSZ
LOAD:00003F30                 Elf32_Dyn <0Bh, <10h>>  ; DT_SYMENT
LOAD:00003F38                 Elf32_Dyn <15h, <0>>    ; DT_DEBUG
LOAD:00003F40                 Elf32_Dyn <3, <3FD0h>>  ; DT_PLTGOT
LOAD:00003F48                 Elf32_Dyn <2, <20h>>    ; DT_PLTRELSZ
LOAD:00003F50                 Elf32_Dyn <14h, <11h>>  ; DT_PLTREL
LOAD:00003F58                 Elf32_Dyn <17h, <400h>> ; DT_JMPREL
LOAD:00003F60                 Elf32_Dyn <11h, <3C0h>> ; DT_REL
LOAD:00003F68                 Elf32_Dyn <12h, <40h>>  ; DT_RELSZ
LOAD:00003F70                 Elf32_Dyn <13h, <8>>    ; DT_RELENT
LOAD:00003F78                 Elf32_Dyn <1Eh, <8>>    ; DT_FLAGS
LOAD:00003F80                 Elf32_Dyn <6FFFFFFBh, <8000001h>> ; DT_FLAGS_1
LOAD:00003F88                 Elf32_Dyn <6FFFFFFEh, <380h>> ; DT_VERNEED
LOAD:00003F90                 Elf32_Dyn <6FFFFFFFh, <1>> ; DT_VERNEEDNUM
LOAD:00003F98                 Elf32_Dyn <6FFFFFF0h, <36Ah>> ; DT_VERSYM
LOAD:00003FA0                 Elf32_Dyn <6FFFFFFAh, <4>> ; DT_RELCOUNT
LOAD:00003FA8                 Elf32_Dyn <0>           ; DT_NULL
LOAD:00003FB0                 db    0
LOAD:00003FB1                 db    0
LOAD:00003FB2                 db    0
LOAD:00003FB3                 db    0
LOAD:00003FB4                 db    0
LOAD:00003FB5                 db    0
LOAD:00003FB6                 db    0
LOAD:00003FB7                 db    0
LOAD:00003FB8                 db    0
LOAD:00003FB9                 db    0
LOAD:00003FBA                 db    0
LOAD:00003FBB                 db    0
LOAD:00003FBC                 db    0
LOAD:00003FBD                 db    0
LOAD:00003FBE                 db    0
LOAD:00003FBF                 db    0
LOAD:00003FC0                 db    0
LOAD:00003FC1                 db    0
LOAD:00003FC2                 db    0
LOAD:00003FC3                 db    0
LOAD:00003FC4                 db    0
LOAD:00003FC5                 db    0
LOAD:00003FC6                 db    0
LOAD:00003FC7                 db    0
LOAD:00003FC8                 db    0
LOAD:00003FC9                 db    0
LOAD:00003FCA                 db    0
LOAD:00003FCB                 db    0
LOAD:00003FCC                 db    0
LOAD:00003FCD                 db    0
LOAD:00003FCE                 db    0
LOAD:00003FCF                 db    0
LOAD:00003FCF LOAD            ends
LOAD:00003FCF
.got:00003FD0 ; ===========================================================================
.got:00003FD0
.got:00003FD0 ; Segment type: Pure data
.got:00003FD0 ; Segment permissions: Read/Write
.got:00003FD0 _got            segment dword public 'DATA' use32
.got:00003FD0                 assume cs:_got
.got:00003FD0                 ;org 3FD0h
.got:00003FD0 _GLOBAL_OFFSET_TABLE_ dd offset _DYNAMIC
.got:00003FD0                                         ; DATA XREF: _init_proc+D↑o
.got:00003FD0                                         ; _start+14↑o ...
.got:00003FD4                 dd 0
.got:00003FD8                 dd 0
.got:00003FDC __libc_start_main_ptr dd offset __libc_start_main
.got:00003FDC                                         ; DATA XREF: ___libc_start_main↑r
.got:00003FE0 malloc_ptr      dd offset malloc        ; DATA XREF: _malloc↑r
.got:00003FE4 memset_ptr      dd offset memset        ; DATA XREF: _memset↑r
.got:00003FE8 __assert_fail_ptr dd offset __assert_fail
.got:00003FE8                                         ; DATA XREF: ___assert_fail↑r
.got:00003FEC _ITM_deregisterTMCloneTable_ptr dd offset _ITM_deregisterTMCloneTable
.got:00003FEC                                         ; DATA XREF: deregister_tm_clones+1B↑r
.got:00003FF0 __cxa_finalize_ptr dd offset __cxa_finalize
.got:00003FF0                                         ; DATA XREF: ___cxa_finalize↑r
.got:00003FF0                                         ; __do_global_dtors_aux+1F↑r
.got:00003FF4 __gmon_start___ptr dd offset __gmon_start__
.got:00003FF4                                         ; DATA XREF: _init_proc+13↑r
.got:00003FF8 main_ptr        dd offset main          ; DATA XREF: _start+20↑r
.got:00003FFC _ITM_registerTMCloneTable_ptr dd offset _ITM_registerTMCloneTable
.got:00003FFC                                         ; DATA XREF: register_tm_clones+2E↑r
.got:00003FFC _got            ends
.got:00003FFC
.data:00004000 ; ===========================================================================
.data:00004000
.data:00004000 ; Segment type: Pure data
.data:00004000 ; Segment permissions: Read/Write
.data:00004000 _data           segment dword public 'DATA' use32
.data:00004000                 assume cs:_data
.data:00004000                 ;org 4000h
.data:00004000                 public __data_start ; weak
.data:00004000 __data_start    db    0                 ; Alternative name is '__data_start'
.data:00004000                                         ; data_start
.data:00004001                 db    0
.data:00004002                 db    0
.data:00004003                 db    0
.data:00004004                 public __dso_handle
.data:00004004 __dso_handle    dd offset __dso_handle  ; DATA XREF: __do_global_dtors_aux+2C↑r
.data:00004004                                         ; .data:__dso_handle↓o
.data:00004004 _data           ends
.data:00004004
.bss:00004008 ; ===========================================================================
.bss:00004008
.bss:00004008 ; Segment type: Uninitialized
.bss:00004008 ; Segment permissions: Read/Write
.bss:00004008 _bss            segment byte public 'BSS' use32
.bss:00004008                 assume cs:_bss
.bss:00004008                 ;org 4008h
.bss:00004008                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:00004008                 public __bss_start
.bss:00004008 __bss_start     db ?                    ; DATA XREF: deregister_tm_clones+B↑o
.bss:00004008                                         ; deregister_tm_clones+11↑o ...
.bss:00004008                                         ; Alternative name is '__TMC_END__'
.bss:00004008                                         ; completed.0
.bss:00004008                                         ; _edata
.bss:00004009                 align 4
.bss:00004009 _bss            ends
.bss:00004009
.prgend:0000400C ; ===========================================================================
.prgend:0000400C
.prgend:0000400C ; Segment type: Zero-length
.prgend:0000400C _prgend         segment byte public '' use32
.prgend:0000400C _end            label byte
.prgend:0000400C _prgend         ends
.prgend:0000400C
extern:00004010 ; ===========================================================================
extern:00004010
extern:00004010 ; Segment type: Externs
extern:00004010 ; extern
extern:00004010 ; int __cdecl _libc_start_main(int (__cdecl *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end)
extern:00004010                 extrn __libc_start_main:near
extern:00004010                                         ; CODE XREF: ___libc_start_main↑j
extern:00004010                                         ; DATA XREF: .got:__libc_start_main_ptr↑o
extern:00004014 ; int __cdecl _cxa_finalize(void *)
extern:00004014                 extrn __cxa_finalize:near ; weak
extern:00004014                                         ; CODE XREF: ___cxa_finalize↑j
extern:00004014                                         ; DATA XREF: .got:__cxa_finalize_ptr↑o
extern:00004018 ; void *malloc(size_t size)
extern:00004018                 extrn malloc:near       ; CODE XREF: _malloc↑j
extern:00004018                                         ; DATA XREF: .got:malloc_ptr↑o
extern:0000401C ; void *memset(void *s, int c, size_t n)
extern:0000401C                 extrn memset:near       ; CODE XREF: _memset↑j
extern:0000401C                                         ; DATA XREF: .got:memset_ptr↑o
extern:00004020 ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:00004020                 extrn __assert_fail:near
extern:00004020                                         ; CODE XREF: ___assert_fail↑j
extern:00004020                                         ; DATA XREF: .got:__assert_fail_ptr↑o
extern:00004024                 extrn _ITM_deregisterTMCloneTable ; weak
extern:00004024                                         ; DATA XREF: .got:_ITM_deregisterTMCloneTable_ptr↑o
extern:00004028                 extrn __gmon_start__ ; weak
extern:00004028                                         ; DATA XREF: .got:__gmon_start___ptr↑o
extern:0000402C                 extrn _ITM_registerTMCloneTable ; weak
extern:0000402C                                         ; DATA XREF: .got:_ITM_registerTMCloneTable_ptr↑o
extern:0000402C
extern:0000402C
extern:0000402C                 end _start
