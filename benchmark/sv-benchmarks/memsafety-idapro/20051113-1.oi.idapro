.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : B0DF0FC8272EAE157B40C39B78E9232F44E282071A6E81646F5E52FD6FBBE28F
.text:08000000 ; Input MD5    : E47CCFCDFFF5B1170A17506FD1A3D363
.text:08000000 ; Input CRC32  : 62E2F71E
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/20051113-1.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : '20051113-1.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: noreturn bp-based frame
.text:08000000
.text:08000000                 public reach_error
.text:08000000 reach_error     proc near               ; DATA XREF: .eh_frame:08000258↓o
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_ax
.text:0800000C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000011                 lea     edx, (__PRETTY_FUNCTION___0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "reach_error"
.text:08000017                 push    edx             ; function
.text:08000018                 push    3               ; line
.text:0800001A                 lea     edx, (a200511131C - _GLOBAL_OFFSET_TABLE_)[eax] ; "20051113-1.c"
.text:08000020                 push    edx             ; file
.text:08000021                 lea     edx, (a0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "0"
.text:08000027                 push    edx             ; assertion
.text:08000028                 mov     ebx, eax
.text:0800002A                 call    __assert_fail   ; PIC mode
.text:0800002A ; } // starts at 8000000
.text:0800002A reach_error     endp
.text:0800002A
.text:0800002F
.text:0800002F ; =============== S U B R O U T I N E =======================================
.text:0800002F
.text:0800002F ; Attributes: bp-based frame
.text:0800002F
.text:0800002F                 public Sum
.text:0800002F Sum             proc near               ; CODE XREF: main+B6↓p
.text:0800002F                                         ; DATA XREF: .eh_frame:08000274↓o
.text:0800002F
.text:0800002F var_C           = dword ptr -0Ch
.text:0800002F var_8           = dword ptr -8
.text:0800002F var_4           = dword ptr -4
.text:0800002F arg_0           = dword ptr  8
.text:0800002F
.text:0800002F ; __unwind {
.text:0800002F                 push    ebp
.text:08000030                 mov     ebp, esp
.text:08000032                 sub     esp, 10h
.text:08000035                 call    __x86_get_pc_thunk_ax
.text:0800003A                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800003F                 mov     [ebp+var_8], 0
.text:08000046                 mov     [ebp+var_4], 0
.text:0800004D                 mov     [ebp+var_C], 0
.text:08000054                 jmp     short loc_8000071
.text:08000056 ; ---------------------------------------------------------------------------
.text:08000056
.text:08000056 loc_8000056:                            ; CODE XREF: Sum+4A↓j
.text:08000056                 mov     edx, [ebp+arg_0]
.text:08000059                 mov     eax, [ebp+var_C]
.text:0800005C                 imul    eax, 1Eh
.text:0800005F                 add     eax, edx
.text:08000061                 mov     edx, [eax+0Eh]
.text:08000064                 mov     eax, [eax+0Ah]
.text:08000067                 add     [ebp+var_8], eax
.text:0800006A                 adc     [ebp+var_4], edx
.text:0800006D                 add     [ebp+var_C], 1
.text:08000071
.text:08000071 loc_8000071:                            ; CODE XREF: Sum+25↑j
.text:08000071                 mov     eax, [ebp+arg_0]
.text:08000074                 mov     eax, ds:(_GLOBAL_OFFSET_TABLE_ - 8000344h)[eax]
.text:08000076                 cmp     [ebp+var_C], eax
.text:08000079                 jl      short loc_8000056
.text:0800007B                 mov     eax, [ebp+var_8]
.text:0800007E                 mov     edx, [ebp+var_4]
.text:08000081                 leave
.text:08000082                 retn
.text:08000082 ; } // starts at 800002F
.text:08000082 Sum             endp
.text:08000082
.text:08000083
.text:08000083 ; =============== S U B R O U T I N E =======================================
.text:08000083
.text:08000083 ; Attributes: bp-based frame
.text:08000083
.text:08000083                 public Sum2
.text:08000083 Sum2            proc near               ; CODE XREF: main+EA↓p
.text:08000083                                         ; DATA XREF: .eh_frame:08000294↓o
.text:08000083
.text:08000083 var_C           = dword ptr -0Ch
.text:08000083 var_8           = dword ptr -8
.text:08000083 var_4           = dword ptr -4
.text:08000083 arg_0           = dword ptr  8
.text:08000083
.text:08000083 ; __unwind {
.text:08000083                 push    ebp
.text:08000084                 mov     ebp, esp
.text:08000086                 sub     esp, 10h
.text:08000089                 call    __x86_get_pc_thunk_ax
.text:0800008E                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000093                 mov     [ebp+var_8], 0
.text:0800009A                 mov     [ebp+var_4], 0
.text:080000A1                 mov     [ebp+var_C], 0
.text:080000A8                 jmp     short loc_80000C5
.text:080000AA ; ---------------------------------------------------------------------------
.text:080000AA
.text:080000AA loc_80000AA:                            ; CODE XREF: Sum2+4A↓j
.text:080000AA                 mov     edx, [ebp+arg_0]
.text:080000AD                 mov     eax, [ebp+var_C]
.text:080000B0                 imul    eax, 1Eh
.text:080000B3                 add     eax, edx
.text:080000B5                 mov     edx, [eax+16h]
.text:080000B8                 mov     eax, [eax+12h]
.text:080000BB                 add     [ebp+var_8], eax
.text:080000BE                 adc     [ebp+var_4], edx
.text:080000C1                 add     [ebp+var_C], 1
.text:080000C5
.text:080000C5 loc_80000C5:                            ; CODE XREF: Sum2+25↑j
.text:080000C5                 mov     eax, [ebp+arg_0]
.text:080000C8                 mov     eax, ds:(_GLOBAL_OFFSET_TABLE_ - 8000344h)[eax]
.text:080000CA                 cmp     [ebp+var_C], eax
.text:080000CD                 jl      short loc_80000AA
.text:080000CF                 mov     eax, [ebp+var_8]
.text:080000D2                 mov     edx, [ebp+var_4]
.text:080000D5                 leave
.text:080000D6                 retn
.text:080000D6 ; } // starts at 8000083
.text:080000D6 Sum2            endp
.text:080000D6
.text:080000D7
.text:080000D7 ; =============== S U B R O U T I N E =======================================
.text:080000D7
.text:080000D7 ; Attributes: bp-based frame
.text:080000D7
.text:080000D7 dummy_abort     proc near               ; CODE XREF: main+DF↓p
.text:080000D7                                         ; main+10B↓p
.text:080000D7                                         ; DATA XREF: ...
.text:080000D7 ; __unwind {
.text:080000D7                 push    ebp
.text:080000D8                 mov     ebp, esp
.text:080000DA                 call    __x86_get_pc_thunk_ax
.text:080000DF                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000E4                 nop
.text:080000E5                 pop     ebp
.text:080000E6                 retn
.text:080000E6 ; } // starts at 80000D7
.text:080000E6 dummy_abort     endp
.text:080000E6
.text:080000E7
.text:080000E7 ; =============== S U B R O U T I N E =======================================
.text:080000E7
.text:080000E7 ; Attributes: bp-based frame fuzzy-sp
.text:080000E7
.text:080000E7 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:080000E7                 public main
.text:080000E7 main            proc near               ; DATA XREF: .eh_frame:080002D4↓o
.text:080000E7
.text:080000E7 var_30          = dword ptr -30h
.text:080000E7 var_2C          = dword ptr -2Ch
.text:080000E7 s               = dword ptr -1Ch
.text:080000E7 argc            = dword ptr  8
.text:080000E7 argv            = dword ptr  0Ch
.text:080000E7 envp            = dword ptr  10h
.text:080000E7
.text:080000E7 ; __unwind {
.text:080000E7                 lea     ecx, [esp+4]
.text:080000EB                 and     esp, 0FFFFFFF0h
.text:080000EE                 push    dword ptr [ecx-4]
.text:080000F1                 push    ebp
.text:080000F2                 mov     ebp, esp
.text:080000F4                 push    edi
.text:080000F5                 push    esi
.text:080000F6                 push    ebx
.text:080000F7                 push    ecx
.text:080000F8                 sub     esp, 28h
.text:080000FB                 call    __x86_get_pc_thunk_bx
.text:08000100                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000106                 sub     esp, 0Ch
.text:08000109                 push    5Eh ; '^'       ; size
.text:0800010B                 call    malloc          ; PIC mode
.text:08000110                 add     esp, 10h
.text:08000113                 mov     [ebp+s], eax
.text:08000116                 sub     esp, 4
.text:08000119                 push    5Eh ; '^'       ; n
.text:0800011B                 push    0               ; c
.text:0800011D                 push    [ebp+s]         ; s
.text:08000120                 call    memset          ; PIC mode
.text:08000125                 add     esp, 10h
.text:08000128                 mov     eax, [ebp+s]
.text:0800012B                 mov     dword ptr [eax], 3
.text:08000131                 mov     eax, [ebp+s]
.text:08000134                 mov     dword ptr [eax+0Ah], 22Bh
.text:0800013B                 mov     dword ptr [eax+0Eh], 0
.text:08000142                 mov     eax, [ebp+s]
.text:08000145                 mov     dword ptr [eax+28h], 3E7h
.text:0800014C                 mov     dword ptr [eax+2Ch], 0
.text:08000153                 mov     eax, [ebp+s]
.text:08000156                 mov     dword ptr [eax+46h], 1010101h
.text:0800015D                 mov     dword ptr [eax+4Ah], 1
.text:08000164                 mov     eax, [ebp+s]
.text:08000167                 mov     dword ptr [eax+12h], 22Bh
.text:0800016E                 mov     dword ptr [eax+16h], 0
.text:08000175                 mov     eax, [ebp+s]
.text:08000178                 mov     dword ptr [eax+30h], 3E7h
.text:0800017F                 mov     dword ptr [eax+34h], 0
.text:08000186                 mov     eax, [ebp+s]
.text:08000189                 mov     dword ptr [eax+4Eh], 1010101h
.text:08000190                 mov     dword ptr [eax+52h], 1
.text:08000197                 sub     esp, 0Ch
.text:0800019A                 push    [ebp+s]
.text:0800019D                 call    Sum
.text:080001A2                 add     esp, 10h
.text:080001A5                 mov     ecx, eax
.text:080001A7                 xor     ecx, 1010713h
.text:080001AD                 mov     [ebp+var_30], ecx
.text:080001B0                 mov     eax, edx
.text:080001B2                 xor     eax, 1
.text:080001B5                 mov     [ebp+var_2C], eax
.text:080001B8                 mov     edx, [ebp+var_30]
.text:080001BB                 mov     ecx, [ebp+var_2C]
.text:080001BE                 mov     eax, ecx
.text:080001C0                 or      eax, edx
.text:080001C2                 test    eax, eax
.text:080001C4                 jz      short loc_80001CB
.text:080001C6                 call    dummy_abort
.text:080001CB
.text:080001CB loc_80001CB:                            ; CODE XREF: main+DD↑j
.text:080001CB                 sub     esp, 0Ch
.text:080001CE                 push    [ebp+s]
.text:080001D1                 call    Sum2
.text:080001D6                 add     esp, 10h
.text:080001D9                 mov     ebx, eax
.text:080001DB                 xor     ebx, 1010713h
.text:080001E1                 mov     esi, ebx
.text:080001E3                 mov     eax, edx
.text:080001E5                 xor     eax, 1
.text:080001E8                 mov     edi, eax
.text:080001EA                 mov     eax, edi
.text:080001EC                 or      eax, esi
.text:080001EE                 test    eax, eax
.text:080001F0                 jz      short loc_80001F7
.text:080001F2                 call    dummy_abort
.text:080001F7
.text:080001F7 loc_80001F7:                            ; CODE XREF: main+109↑j
.text:080001F7                 mov     [ebp+s], 0
.text:080001FE                 mov     eax, 0
.text:08000203                 lea     esp, [ebp-10h]
.text:08000206                 pop     ecx
.text:08000207                 pop     ebx
.text:08000208                 pop     esi
.text:08000209                 pop     edi
.text:0800020A                 pop     ebp
.text:0800020B                 lea     esp, [ecx-4]
.text:0800020E                 retn
.text:0800020E ; } // starts at 80000E7
.text:0800020E main            endp
.text:0800020E
.text:0800020E _text           ends
.text:0800020E
.data:0800020F ; ===========================================================================
.data:0800020F
.data:0800020F ; Segment type: Zero-length
.data:0800020F ; Segment permissions: Read/Write
.data:0800020F _data           segment byte public 'DATA' use32
.data:0800020F _data           ends
.data:0800020F
.bss:08000210 ; ===========================================================================
.bss:08000210
.bss:08000210 ; Segment type: Zero-length
.bss:08000210 ; Segment permissions: Read/Write
.bss:08000210 _bss            segment byte public 'BSS' use32
.bss:08000210 _bss            ends
.bss:08000210
.rodata:08000214 ; ===========================================================================
.rodata:08000214
.rodata:08000214 ; Segment type: Pure data
.rodata:08000214 ; Segment permissions: Read
.rodata:08000214 _rodata         segment dword public 'CONST' use32
.rodata:08000214                 assume cs:_rodata
.rodata:08000214                 ;org 8000214h
.rodata:08000214 a200511131C     db '20051113-1.c',0     ; DATA XREF: reach_error+1A↑o
.rodata:08000221 a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:08000223                 align 4
.rodata:08000224 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:08000224                                         ; DATA XREF: reach_error+11↑o
.rodata:08000224 _rodata         ends
.rodata:08000224
.text.__x86.get_pc_thunk.ax:08000230 ; ===========================================================================
.text.__x86.get_pc_thunk.ax:08000230
.text.__x86.get_pc_thunk.ax:08000230 ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:08000230 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:08000230 _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:08000230                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000230                 ;org 8000230h
.text.__x86.get_pc_thunk.ax:08000230                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:08000230
.text.__x86.get_pc_thunk.ax:08000230 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:08000230
.text.__x86.get_pc_thunk.ax:08000230
.text.__x86.get_pc_thunk.ax:08000230                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000230 __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text.__x86.get_pc_thunk.ax:08000230                                         ; Sum+6↑p ...
.text.__x86.get_pc_thunk.ax:08000230 ; __unwind {
.text.__x86.get_pc_thunk.ax:08000230                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:08000233                 retn
.text.__x86.get_pc_thunk.ax:08000233 ; } // starts at 8000230
.text.__x86.get_pc_thunk.ax:08000233 __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:08000233
.text.__x86.get_pc_thunk.ax:08000233 _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:08000233
.text.__x86.get_pc_thunk.bx:08000234 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:08000234
.text.__x86.get_pc_thunk.bx:08000234 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:08000234 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:08000234 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:08000234                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000234                 ;org 8000234h
.text.__x86.get_pc_thunk.bx:08000234                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:08000234
.text.__x86.get_pc_thunk.bx:08000234 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:08000234
.text.__x86.get_pc_thunk.bx:08000234
.text.__x86.get_pc_thunk.bx:08000234                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000234 __x86_get_pc_thunk_bx proc near         ; CODE XREF: main+14↑p
.text.__x86.get_pc_thunk.bx:08000234                                         ; DATA XREF: .eh_frame:0800032C↓o
.text.__x86.get_pc_thunk.bx:08000234 ; __unwind {
.text.__x86.get_pc_thunk.bx:08000234                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:08000237                 retn
.text.__x86.get_pc_thunk.bx:08000237 ; } // starts at 8000234
.text.__x86.get_pc_thunk.bx:08000237 __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:08000237
.text.__x86.get_pc_thunk.bx:08000237 _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:08000237
.eh_frame:08000238 ; ===========================================================================
.eh_frame:08000238
.eh_frame:08000238 ; Segment type: Pure data
.eh_frame:08000238 ; Segment permissions: Read
.eh_frame:08000238 _eh_frame       segment dword public 'CONST' use32
.eh_frame:08000238                 assume cs:_eh_frame
.eh_frame:08000238                 ;org 8000238h
.eh_frame:08000238                 db  14h
.eh_frame:08000239                 db    0
.eh_frame:0800023A                 db    0
.eh_frame:0800023B                 db    0
.eh_frame:0800023C                 db    0
.eh_frame:0800023D                 db    0
.eh_frame:0800023E                 db    0
.eh_frame:0800023F                 db    0
.eh_frame:08000240                 db    1
.eh_frame:08000241                 db  7Ah ; z
.eh_frame:08000242                 db  52h ; R
.eh_frame:08000243                 db    0
.eh_frame:08000244                 db    1
.eh_frame:08000245                 db  7Ch ; |
.eh_frame:08000246                 db    8
.eh_frame:08000247                 db    1
.eh_frame:08000248                 db  1Bh
.eh_frame:08000249                 db  0Ch
.eh_frame:0800024A                 db    4
.eh_frame:0800024B                 db    4
.eh_frame:0800024C                 db  88h
.eh_frame:0800024D                 db    1
.eh_frame:0800024E                 db    0
.eh_frame:0800024F                 db    0
.eh_frame:08000250                 db  18h
.eh_frame:08000251                 db    0
.eh_frame:08000252                 db    0
.eh_frame:08000253                 db    0
.eh_frame:08000254                 db  1Ch
.eh_frame:08000255                 db    0
.eh_frame:08000256                 db    0
.eh_frame:08000257                 db    0
.eh_frame:08000258                 dd offset reach_error - $
.eh_frame:0800025C                 db  2Fh ; /
.eh_frame:0800025D                 db    0
.eh_frame:0800025E                 db    0
.eh_frame:0800025F                 db    0
.eh_frame:08000260                 db    0
.eh_frame:08000261                 db  41h ; A
.eh_frame:08000262                 db  0Eh
.eh_frame:08000263                 db    8
.eh_frame:08000264                 db  85h
.eh_frame:08000265                 db    2
.eh_frame:08000266                 db  42h ; B
.eh_frame:08000267                 db  0Dh
.eh_frame:08000268                 db    5
.eh_frame:08000269                 db  44h ; D
.eh_frame:0800026A                 db  83h
.eh_frame:0800026B                 db    3
.eh_frame:0800026C                 db  1Ch
.eh_frame:0800026D                 db    0
.eh_frame:0800026E                 db    0
.eh_frame:0800026F                 db    0
.eh_frame:08000270                 db  38h ; 8
.eh_frame:08000271                 db    0
.eh_frame:08000272                 db    0
.eh_frame:08000273                 db    0
.eh_frame:08000274                 dd offset Sum - $
.eh_frame:08000278                 db  54h ; T
.eh_frame:08000279                 db    0
.eh_frame:0800027A                 db    0
.eh_frame:0800027B                 db    0
.eh_frame:0800027C                 db    0
.eh_frame:0800027D                 db  41h ; A
.eh_frame:0800027E                 db  0Eh
.eh_frame:0800027F                 db    8
.eh_frame:08000280                 db  85h
.eh_frame:08000281                 db    2
.eh_frame:08000282                 db  42h ; B
.eh_frame:08000283                 db  0Dh
.eh_frame:08000284                 db    5
.eh_frame:08000285                 db    2
.eh_frame:08000286                 db  50h ; P
.eh_frame:08000287                 db 0C5h
.eh_frame:08000288                 db  0Ch
.eh_frame:08000289                 db    4
.eh_frame:0800028A                 db    4
.eh_frame:0800028B                 db    0
.eh_frame:0800028C                 db  1Ch
.eh_frame:0800028D                 db    0
.eh_frame:0800028E                 db    0
.eh_frame:0800028F                 db    0
.eh_frame:08000290                 db  58h ; X
.eh_frame:08000291                 db    0
.eh_frame:08000292                 db    0
.eh_frame:08000293                 db    0
.eh_frame:08000294                 dd offset Sum2 - $
.eh_frame:08000298                 db  54h ; T
.eh_frame:08000299                 db    0
.eh_frame:0800029A                 db    0
.eh_frame:0800029B                 db    0
.eh_frame:0800029C                 db    0
.eh_frame:0800029D                 db  41h ; A
.eh_frame:0800029E                 db  0Eh
.eh_frame:0800029F                 db    8
.eh_frame:080002A0                 db  85h
.eh_frame:080002A1                 db    2
.eh_frame:080002A2                 db  42h ; B
.eh_frame:080002A3                 db  0Dh
.eh_frame:080002A4                 db    5
.eh_frame:080002A5                 db    2
.eh_frame:080002A6                 db  50h ; P
.eh_frame:080002A7                 db 0C5h
.eh_frame:080002A8                 db  0Ch
.eh_frame:080002A9                 db    4
.eh_frame:080002AA                 db    4
.eh_frame:080002AB                 db    0
.eh_frame:080002AC                 db  1Ch
.eh_frame:080002AD                 db    0
.eh_frame:080002AE                 db    0
.eh_frame:080002AF                 db    0
.eh_frame:080002B0                 db  78h ; x
.eh_frame:080002B1                 db    0
.eh_frame:080002B2                 db    0
.eh_frame:080002B3                 db    0
.eh_frame:080002B4                 dd offset dummy_abort - $
.eh_frame:080002B8                 db  10h
.eh_frame:080002B9                 db    0
.eh_frame:080002BA                 db    0
.eh_frame:080002BB                 db    0
.eh_frame:080002BC                 db    0
.eh_frame:080002BD                 db  41h ; A
.eh_frame:080002BE                 db  0Eh
.eh_frame:080002BF                 db    8
.eh_frame:080002C0                 db  85h
.eh_frame:080002C1                 db    2
.eh_frame:080002C2                 db  42h ; B
.eh_frame:080002C3                 db  0Dh
.eh_frame:080002C4                 db    5
.eh_frame:080002C5                 db  4Ch ; L
.eh_frame:080002C6                 db 0C5h
.eh_frame:080002C7                 db  0Ch
.eh_frame:080002C8                 db    4
.eh_frame:080002C9                 db    4
.eh_frame:080002CA                 db    0
.eh_frame:080002CB                 db    0
.eh_frame:080002CC                 db  40h ; @
.eh_frame:080002CD                 db    0
.eh_frame:080002CE                 db    0
.eh_frame:080002CF                 db    0
.eh_frame:080002D0                 db  98h
.eh_frame:080002D1                 db    0
.eh_frame:080002D2                 db    0
.eh_frame:080002D3                 db    0
.eh_frame:080002D4                 dd offset main - $
.eh_frame:080002D8                 db  28h ; (
.eh_frame:080002D9                 db    1
.eh_frame:080002DA                 db    0
.eh_frame:080002DB                 db    0
.eh_frame:080002DC                 db    0
.eh_frame:080002DD                 db  44h ; D
.eh_frame:080002DE                 db  0Ch
.eh_frame:080002DF                 db    1
.eh_frame:080002E0                 db    0
.eh_frame:080002E1                 db  49h ; I
.eh_frame:080002E2                 db  10h
.eh_frame:080002E3                 db    5
.eh_frame:080002E4                 db    2
.eh_frame:080002E5                 db  75h ; u
.eh_frame:080002E6                 db    0
.eh_frame:080002E7                 db  44h ; D
.eh_frame:080002E8                 db  0Fh
.eh_frame:080002E9                 db    3
.eh_frame:080002EA                 db  75h ; u
.eh_frame:080002EB                 db  70h ; p
.eh_frame:080002EC                 db    6
.eh_frame:080002ED                 db  10h
.eh_frame:080002EE                 db    7
.eh_frame:080002EF                 db    2
.eh_frame:080002F0                 db  75h ; u
.eh_frame:080002F1                 db  7Ch ; |
.eh_frame:080002F2                 db  10h
.eh_frame:080002F3                 db    6
.eh_frame:080002F4                 db    2
.eh_frame:080002F5                 db  75h ; u
.eh_frame:080002F6                 db  78h ; x
.eh_frame:080002F7                 db  10h
.eh_frame:080002F8                 db    3
.eh_frame:080002F9                 db    2
.eh_frame:080002FA                 db  75h ; u
.eh_frame:080002FB                 db  74h ; t
.eh_frame:080002FC                 db    3
.eh_frame:080002FD                 db  0Fh
.eh_frame:080002FE                 db    1
.eh_frame:080002FF                 db 0C1h
.eh_frame:08000300                 db  0Ch
.eh_frame:08000301                 db    1
.eh_frame:08000302                 db    0
.eh_frame:08000303                 db  41h ; A
.eh_frame:08000304                 db 0C3h
.eh_frame:08000305                 db  41h ; A
.eh_frame:08000306                 db 0C6h
.eh_frame:08000307                 db  41h ; A
.eh_frame:08000308                 db 0C7h
.eh_frame:08000309                 db  41h ; A
.eh_frame:0800030A                 db 0C5h
.eh_frame:0800030B                 db  43h ; C
.eh_frame:0800030C                 db  0Ch
.eh_frame:0800030D                 db    4
.eh_frame:0800030E                 db    4
.eh_frame:0800030F                 db    0
.eh_frame:08000310                 db  10h
.eh_frame:08000311                 db    0
.eh_frame:08000312                 db    0
.eh_frame:08000313                 db    0
.eh_frame:08000314                 db 0DCh
.eh_frame:08000315                 db    0
.eh_frame:08000316                 db    0
.eh_frame:08000317                 db    0
.eh_frame:08000318                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:0800031C                 db    4
.eh_frame:0800031D                 db    0
.eh_frame:0800031E                 db    0
.eh_frame:0800031F                 db    0
.eh_frame:08000320                 db    0
.eh_frame:08000321                 db    0
.eh_frame:08000322                 db    0
.eh_frame:08000323                 db    0
.eh_frame:08000324                 db  10h
.eh_frame:08000325                 db    0
.eh_frame:08000326                 db    0
.eh_frame:08000327                 db    0
.eh_frame:08000328                 db 0F0h
.eh_frame:08000329                 db    0
.eh_frame:0800032A                 db    0
.eh_frame:0800032B                 db    0
.eh_frame:0800032C                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:08000330                 db    4
.eh_frame:08000331                 db    0
.eh_frame:08000332                 db    0
.eh_frame:08000333                 db    0
.eh_frame:08000334                 db    0
.eh_frame:08000335                 db    0
.eh_frame:08000336                 db    0
.eh_frame:08000337                 db    0
.eh_frame:08000337 _eh_frame       ends
.eh_frame:08000337
extern:08000338 ; ===========================================================================
extern:08000338
extern:08000338 ; Segment type: Externs
extern:08000338 ; extern
extern:08000338 ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:08000338                 extrn __assert_fail:near
extern:08000338                                         ; CODE XREF: reach_error+2A↑p
extern:0800033C ; void *malloc(size_t size)
extern:0800033C                 extrn malloc:near       ; CODE XREF: main+24↑p
extern:08000340 ; void *memset(void *s, int c, size_t n)
extern:08000340                 extrn memset:near       ; CODE XREF: main+39↑p
extern:08000340
.got:08000344 ; ===========================================================================
.got:08000344
.got:08000344 ; Segment type: Pure data
.got:08000344 ; Segment permissions: Read
.got:08000344 _got            segment dword public 'CONST' use32
.got:08000344                 assume cs:_got
.got:08000344                 ;org 8000344h
.got:08000344 _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: reach_error+C↑o
.got:08000344                                         ; reach_error+11↑o ...
.got:08000344 _got            ends
.got:08000344
.got:08000344
.got:08000344                 end
