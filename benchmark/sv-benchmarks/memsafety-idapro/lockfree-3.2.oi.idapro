.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : DA0676FEEB2691CFCA9764609BF5C8EFD6929E4D551865B69235A1997FA3D48B
.text:08000000 ; Input MD5    : E99FD08737270B17F3E69B44B158F40C
.text:08000000 ; Input CRC32  : 5DDD991A
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/lockfree-3.2.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : 'lockfree-3.2.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: noreturn bp-based frame
.text:08000000
.text:08000000                 public reach_error
.text:08000000 reach_error     proc near               ; DATA XREF: .eh_frame:08000338↓o
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_ax
.text:0800000C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000011                 lea     edx, (__PRETTY_FUNCTION___1 - _GLOBAL_OFFSET_TABLE_)[eax] ; "reach_error"
.text:08000017                 push    edx             ; function
.text:08000018                 push    3               ; line
.text:0800001A                 lea     edx, (aLockfree32C - _GLOBAL_OFFSET_TABLE_)[eax] ; "lockfree-3.2.c"
.text:08000020                 push    edx             ; file
.text:08000021                 lea     edx, (a0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "0"
.text:08000027                 push    edx             ; assertion
.text:08000028                 mov     ebx, eax
.text:0800002A                 call    __assert_fail   ; PIC mode
.text:0800002A ; } // starts at 8000000
.text:0800002A reach_error     endp
.text:0800002A
.text:0800002F
.text:0800002F ; =============== S U B R O U T I N E =======================================
.text:0800002F
.text:0800002F ; Attributes: bp-based frame
.text:0800002F
.text:0800002F                 public push
.text:0800002F push            proc near               ; CODE XREF: main+28↓p
.text:0800002F                                         ; DATA XREF: .eh_frame:08000354↓o
.text:0800002F
.text:0800002F var_4           = dword ptr -4
.text:0800002F
.text:0800002F ; __unwind {
.text:0800002F                 push    ebp
.text:08000030                 mov     ebp, esp
.text:08000032                 push    ebx
.text:08000033                 sub     esp, 4
.text:08000036                 call    __x86_get_pc_thunk_bx
.text:0800003B                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000041                 mov     eax, (pc1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000047                 lea     edx, [eax+1]
.text:0800004A                 mov     (pc1 - _GLOBAL_OFFSET_TABLE_)[ebx], edx
.text:08000050                 cmp     eax, 6          ; switch 7 cases
.text:08000053                 ja      _L2             ; jumptable 08000065 default case, case 0
.text:08000059                 shl     eax, 2
.text:0800005C                 mov     eax, ds:(jpt_8000065 - 80003FCh)[eax+ebx]
.text:08000063                 add     eax, ebx
.text:08000065                 jmp     eax             ; switch jump
.text:08000067 ; ---------------------------------------------------------------------------
.text:08000067
.text:08000067 _L10:                                   ; CODE XREF: push+36↑j
.text:08000067                                         ; DATA XREF: .rodata:jpt_8000065↓o
.text:08000067                 sub     esp, 0Ch        ; jumptable 08000065 case 1
.text:0800006A                 push    8               ; size
.text:0800006C                 call    malloc          ; PIC mode
.text:08000071                 add     esp, 10h
.text:08000074                 mov     ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:0800007A                 mov     eax, ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000080                 mov     dword ptr [eax], 0
.text:08000086                 mov     eax, ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800008C                 mov     dword ptr [eax+4], 0
.text:08000093                 jmp     short _L2       ; jumptable 08000065 default case, case 0
.text:08000095 ; ---------------------------------------------------------------------------
.text:08000095
.text:08000095 _L9:                                    ; CODE XREF: push+36↑j
.text:08000095                                         ; DATA XREF: .rodata:jpt_8000065↓o
.text:08000095                 mov     eax, ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx] ; jumptable 08000065 case 2
.text:0800009B                 mov     dword ptr [eax], 4
.text:080000A1                 jmp     short _L2       ; jumptable 08000065 default case, case 0
.text:080000A3 ; ---------------------------------------------------------------------------
.text:080000A3
.text:080000A3 _L8:                                    ; CODE XREF: push+36↑j
.text:080000A3                                         ; DATA XREF: .rodata:jpt_8000065↓o
.text:080000A3                 mov     eax, ds:(S - _GLOBAL_OFFSET_TABLE_)[ebx] ; jumptable 08000065 case 3
.text:080000A9                 mov     ds:(t1 - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:080000AF                 jmp     short _L2       ; jumptable 08000065 default case, case 0
.text:080000B1 ; ---------------------------------------------------------------------------
.text:080000B1
.text:080000B1 _L7:                                    ; CODE XREF: push+36↑j
.text:080000B1                                         ; DATA XREF: .rodata:jpt_8000065↓o
.text:080000B1                 mov     eax, ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx] ; jumptable 08000065 case 4
.text:080000B7                 mov     edx, ds:(t1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000BD                 mov     [eax+4], edx
.text:080000C0                 jmp     short _L2       ; jumptable 08000065 default case, case 0
.text:080000C2 ; ---------------------------------------------------------------------------
.text:080000C2
.text:080000C2 _L6:                                    ; CODE XREF: push+36↑j
.text:080000C2                                         ; DATA XREF: .rodata:jpt_8000065↓o
.text:080000C2                 mov     edx, ds:(S - _GLOBAL_OFFSET_TABLE_)[ebx] ; jumptable 08000065 case 5
.text:080000C8                 mov     eax, ds:(t1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000CE                 cmp     edx, eax
.text:080000D0                 jnz     short loc_80000E0
.text:080000D2                 mov     eax, ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000D8                 mov     ds:(S - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:080000DE                 jmp     short _L2       ; jumptable 08000065 default case, case 0
.text:080000E0 ; ---------------------------------------------------------------------------
.text:080000E0
.text:080000E0 loc_80000E0:                            ; CODE XREF: push+A1↑j
.text:080000E0                 mov     (pc1 - _GLOBAL_OFFSET_TABLE_)[ebx], 3
.text:080000EA                 jmp     short _L2       ; jumptable 08000065 default case, case 0
.text:080000EC ; ---------------------------------------------------------------------------
.text:080000EC
.text:080000EC _L4:                                    ; CODE XREF: push+36↑j
.text:080000EC                                         ; DATA XREF: .rodata:jpt_8000065↓o
.text:080000EC                 mov     (pc1 - _GLOBAL_OFFSET_TABLE_)[ebx], 1 ; jumptable 08000065 case 6
.text:080000F6                 nop
.text:080000F7
.text:080000F7 _L2:                                    ; CODE XREF: push+24↑j
.text:080000F7                                         ; push+36↑j ...
.text:080000F7                 mov     ebx, [ebp+var_4] ; jumptable 08000065 default case, case 0
.text:080000FA                 leave
.text:080000FB                 retn
.text:080000FB ; } // starts at 800002F
.text:080000FB push            endp
.text:080000FB
.text:080000FC
.text:080000FC ; =============== S U B R O U T I N E =======================================
.text:080000FC
.text:080000FC ; Attributes: bp-based frame
.text:080000FC
.text:080000FC                 public pop
.text:080000FC pop             proc near               ; CODE XREF: main:loc_80001F8↓p
.text:080000FC                                         ; DATA XREF: .eh_frame:08000378↓o
.text:080000FC ; __unwind {
.text:080000FC                 push    ebp
.text:080000FD                 mov     ebp, esp
.text:080000FF                 call    __x86_get_pc_thunk_ax
.text:08000104                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000109                 mov     edx, (pc4 - _GLOBAL_OFFSET_TABLE_)[eax]
.text:0800010F                 lea     ecx, [edx+1]
.text:08000112                 mov     (pc4 - _GLOBAL_OFFSET_TABLE_)[eax], ecx
.text:08000118                 cmp     edx, 5          ; switch 6 cases
.text:0800011B                 ja      _L13            ; jumptable 0800012D default case, case 0
.text:08000121                 shl     edx, 2
.text:08000124                 mov     edx, ds:(jpt_800012D - 80003FCh)[edx+eax]
.text:0800012B                 add     edx, eax
.text:0800012D                 jmp     edx             ; switch jump
.text:0800012F ; ---------------------------------------------------------------------------
.text:0800012F
.text:0800012F _L20:                                   ; CODE XREF: pop+31↑j
.text:0800012F                                         ; DATA XREF: .rodata:jpt_800012D↓o
.text:0800012F                 mov     edx, ds:(S - _GLOBAL_OFFSET_TABLE_)[eax] ; jumptable 0800012D case 1
.text:08000135                 mov     ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax], edx
.text:0800013B                 jmp     _L13            ; jumptable 0800012D default case, case 0
.text:08000140 ; ---------------------------------------------------------------------------
.text:08000140
.text:08000140 _L19:                                   ; CODE XREF: pop+31↑j
.text:08000140                                         ; DATA XREF: .rodata:jpt_800012D↓o
.text:08000140                 mov     edx, ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax] ; jumptable 0800012D case 2
.text:08000146                 test    edx, edx
.text:08000148                 jnz     short loc_80001C6
.text:0800014A                 mov     (pc4 - _GLOBAL_OFFSET_TABLE_)[eax], 1
.text:08000154                 jmp     short loc_80001C6
.text:08000156 ; ---------------------------------------------------------------------------
.text:08000156
.text:08000156 _L18:                                   ; CODE XREF: pop+31↑j
.text:08000156                                         ; DATA XREF: .rodata:jpt_800012D↓o
.text:08000156                 mov     edx, ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax] ; jumptable 0800012D case 3
.text:0800015C                 mov     edx, [edx+4]
.text:0800015F                 mov     ds:(x4 - _GLOBAL_OFFSET_TABLE_)[eax], edx
.text:08000165                 jmp     short _L13      ; jumptable 0800012D default case, case 0
.text:08000167 ; ---------------------------------------------------------------------------
.text:08000167
.text:08000167 _L17:                                   ; CODE XREF: pop+31↑j
.text:08000167                                         ; DATA XREF: .rodata:jpt_800012D↓o
.text:08000167                 mov     ecx, ds:(S - _GLOBAL_OFFSET_TABLE_)[eax] ; jumptable 0800012D case 4
.text:0800016D                 mov     edx, ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax]
.text:08000173                 cmp     ecx, edx
.text:08000175                 jnz     short loc_8000185
.text:08000177                 mov     edx, ds:(x4 - _GLOBAL_OFFSET_TABLE_)[eax]
.text:0800017D                 mov     ds:(S - _GLOBAL_OFFSET_TABLE_)[eax], edx
.text:08000183                 jmp     short _L13      ; jumptable 0800012D default case, case 0
.text:08000185 ; ---------------------------------------------------------------------------
.text:08000185
.text:08000185 loc_8000185:                            ; CODE XREF: pop+79↑j
.text:08000185                 mov     (pc4 - _GLOBAL_OFFSET_TABLE_)[eax], 1
.text:0800018F                 jmp     short _L13      ; jumptable 0800012D default case, case 0
.text:08000191 ; ---------------------------------------------------------------------------
.text:08000191
.text:08000191 _L15:                                   ; CODE XREF: pop+31↑j
.text:08000191                                         ; DATA XREF: .rodata:jpt_800012D↓o
.text:08000191                 mov     edx, ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax] ; jumptable 0800012D case 5
.text:08000197                 mov     edx, [edx]
.text:08000199                 mov     ds:(res4_0 - _GLOBAL_OFFSET_TABLE_)[eax], edx
.text:0800019F                 mov     edx, ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax]
.text:080001A5                 mov     ecx, ds:(garbage - _GLOBAL_OFFSET_TABLE_)[eax]
.text:080001AB                 mov     [edx+4], ecx
.text:080001AE                 mov     edx, ds:(t4 - _GLOBAL_OFFSET_TABLE_)[eax]
.text:080001B4                 mov     ds:(garbage - _GLOBAL_OFFSET_TABLE_)[eax], edx
.text:080001BA                 mov     (pc4 - _GLOBAL_OFFSET_TABLE_)[eax], 1
.text:080001C4                 jmp     short _L13      ; jumptable 0800012D default case, case 0
.text:080001C6 ; ---------------------------------------------------------------------------
.text:080001C6
.text:080001C6 loc_80001C6:                            ; CODE XREF: pop+4C↑j
.text:080001C6                                         ; pop+58↑j
.text:080001C6                 nop
.text:080001C7
.text:080001C7 _L13:                                   ; CODE XREF: pop+1F↑j
.text:080001C7                                         ; pop+31↑j ...
.text:080001C7                 pop     ebp             ; jumptable 0800012D default case, case 0
.text:080001C8                 retn
.text:080001C8 ; } // starts at 80000FC
.text:080001C8 pop             endp
.text:080001C8
.text:080001C9
.text:080001C9 ; =============== S U B R O U T I N E =======================================
.text:080001C9
.text:080001C9 ; Attributes: bp-based frame fuzzy-sp
.text:080001C9
.text:080001C9 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:080001C9                 public main
.text:080001C9 main            proc near               ; DATA XREF: .eh_frame:08000398↓o
.text:080001C9
.text:080001C9 var_C           = dword ptr -0Ch
.text:080001C9 argc            = dword ptr  8
.text:080001C9 argv            = dword ptr  0Ch
.text:080001C9 envp            = dword ptr  10h
.text:080001C9
.text:080001C9 ; __unwind {
.text:080001C9                 lea     ecx, [esp+4]
.text:080001CD                 and     esp, 0FFFFFFF0h
.text:080001D0                 push    dword ptr [ecx-4]
.text:080001D3                 push    ebp
.text:080001D4                 mov     ebp, esp
.text:080001D6                 push    ebx
.text:080001D7                 push    ecx
.text:080001D8                 sub     esp, 10h
.text:080001DB                 call    __x86_get_pc_thunk_bx
.text:080001E0                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080001E6                 jmp     short loc_80001FD
.text:080001E8 ; ---------------------------------------------------------------------------
.text:080001E8
.text:080001E8 loc_80001E8:                            ; CODE XREF: main+3C↓j
.text:080001E8                                         ; main+47↓j ...
.text:080001E8                 call    __VERIFIER_nondet_int ; PIC mode
.text:080001ED                 test    eax, eax
.text:080001EF                 jz      short loc_80001F8
.text:080001F1                 call    push
.text:080001F6                 jmp     short loc_80001FD
.text:080001F8 ; ---------------------------------------------------------------------------
.text:080001F8
.text:080001F8 loc_80001F8:                            ; CODE XREF: main+26↑j
.text:080001F8                 call    pop
.text:080001FD
.text:080001FD loc_80001FD:                            ; CODE XREF: main+1D↑j
.text:080001FD                                         ; main+2D↑j
.text:080001FD                 mov     eax, ds:(S - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000203                 test    eax, eax
.text:08000205                 jnz     short loc_80001E8
.text:08000207                 mov     eax, (pc4 - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800020D                 cmp     eax, 1
.text:08000210                 jnz     short loc_80001E8
.text:08000212                 call    __VERIFIER_nondet_int ; PIC mode
.text:08000217                 test    eax, eax
.text:08000219                 jnz     short loc_80001E8
.text:0800021B                 jmp     short loc_8000244
.text:0800021D ; ---------------------------------------------------------------------------
.text:0800021D
.text:0800021D loc_800021D:                            ; CODE XREF: main+83↓j
.text:0800021D                 mov     eax, ds:(garbage - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000223                 mov     eax, [eax+4]
.text:08000226                 mov     [ebp+var_C], eax
.text:08000229                 mov     eax, ds:(garbage - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800022F                 sub     esp, 0Ch
.text:08000232                 push    eax             ; ptr
.text:08000233                 call    free            ; PIC mode
.text:08000238                 add     esp, 10h
.text:0800023B                 mov     eax, [ebp+var_C]
.text:0800023E                 mov     ds:(garbage - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:08000244
.text:08000244 loc_8000244:                            ; CODE XREF: main+52↑j
.text:08000244                 mov     eax, ds:(garbage - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800024A                 test    eax, eax
.text:0800024C                 jnz     short loc_800021D
.text:0800024E                 mov     ds:(S - _GLOBAL_OFFSET_TABLE_)[ebx], 0
.text:08000258                 mov     ds:(t1 - _GLOBAL_OFFSET_TABLE_)[ebx], 0
.text:08000262                 mov     ds:(x1 - _GLOBAL_OFFSET_TABLE_)[ebx], 0
.text:0800026C                 mov     ds:(t4 - _GLOBAL_OFFSET_TABLE_)[ebx], 0
.text:08000276                 mov     ds:(x4 - _GLOBAL_OFFSET_TABLE_)[ebx], 0
.text:08000280                 mov     eax, ds:(garbage - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000286                 test    eax, eax
.text:08000288                 setnz   al
.text:0800028B                 movzx   eax, al
.text:0800028E                 lea     esp, [ebp-8]
.text:08000291                 pop     ecx
.text:08000292                 pop     ebx
.text:08000293                 pop     ebp
.text:08000294                 lea     esp, [ecx-4]
.text:08000297                 retn
.text:08000297 ; } // starts at 80001C9
.text:08000297 main            endp
.text:08000297
.text:08000297 _text           ends
.text:08000297
.data:08000298 ; ===========================================================================
.data:08000298
.data:08000298 ; Segment type: Pure data
.data:08000298 ; Segment permissions: Read/Write
.data:08000298 _data           segment dword public 'DATA' use32
.data:08000298                 assume cs:_data
.data:08000298                 ;org 8000298h
.data:08000298                 public pc1
.data:08000298 pc1             dd 1                    ; DATA XREF: push+12↑r
.data:08000298                                         ; push+1B↑w ...
.data:0800029C                 public pc4
.data:0800029C pc4             dd 1                    ; DATA XREF: pop+D↑r
.data:0800029C                                         ; pop+16↑w ...
.data:0800029C _data           ends
.data:0800029C
.bss:080002A0 ; ===========================================================================
.bss:080002A0
.bss:080002A0 ; Segment type: Uninitialized
.bss:080002A0 ; Segment permissions: Read/Write
.bss:080002A0 _bss            segment dword public 'BSS' use32
.bss:080002A0                 assume cs:_bss
.bss:080002A0                 ;org 80002A0h
.bss:080002A0                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.bss:080002A0                 public S
.bss:080002A0 S               dd ?                    ; DATA XREF: push:_L8↑r
.bss:080002A0                                         ; push:_L6↑r ...
.bss:080002A4                 public garbage
.bss:080002A4 garbage         dd ?                    ; DATA XREF: pop+A9↑r
.bss:080002A4                                         ; pop+B8↑w ...
.bss:080002A8 t1              dd ?                    ; DATA XREF: push+7A↑w
.bss:080002A8                                         ; push+88↑r ...
.bss:080002AC x1              dd ?                    ; DATA XREF: push+45↑w
.bss:080002AC                                         ; push+4B↑r ...
.bss:080002B0 t4              dd ?                    ; DATA XREF: pop+39↑w
.bss:080002B0                                         ; pop:_L19↑r ...
.bss:080002B4 x4              dd ?                    ; DATA XREF: pop+63↑w
.bss:080002B4                                         ; pop+7B↑r ...
.bss:080002B8 res4_0          dd ?                    ; DATA XREF: pop+9D↑w
.bss:080002B8 _bss            ends
.bss:080002B8
.rodata:080002BC ; ===========================================================================
.rodata:080002BC
.rodata:080002BC ; Segment type: Pure data
.rodata:080002BC ; Segment permissions: Read
.rodata:080002BC _rodata         segment dword public 'CONST' use32
.rodata:080002BC                 assume cs:_rodata
.rodata:080002BC                 ;org 80002BCh
.rodata:080002BC aLockfree32C    db 'lockfree-3.2.c',0   ; DATA XREF: reach_error+1A↑o
.rodata:080002CB a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:080002CD                 align 10h
.rodata:080002D0 jpt_8000065     dd offset _L2 - 80003FCh
.rodata:080002D0                                         ; DATA XREF: push+2D↑r
.rodata:080002D0                 dd offset _L10 - 80003FCh ; jump table for switch statement
.rodata:080002D0                 dd offset _L9 - 80003FCh
.rodata:080002D0                 dd offset _L8 - 80003FCh
.rodata:080002D0                 dd offset _L7 - 80003FCh
.rodata:080002D0                 dd offset _L6 - 80003FCh
.rodata:080002D0                 dd offset _L4 - 80003FCh
.rodata:080002EC jpt_800012D     dd offset _L13 - 80003FCh
.rodata:080002EC                                         ; DATA XREF: pop+28↑r
.rodata:080002EC                 dd offset _L20 - 80003FCh ; jump table for switch statement
.rodata:080002EC                 dd offset _L19 - 80003FCh
.rodata:080002EC                 dd offset _L18 - 80003FCh
.rodata:080002EC                 dd offset _L17 - 80003FCh
.rodata:080002EC                 dd offset _L15 - 80003FCh
.rodata:08000304 __PRETTY_FUNCTION___1 db 'reach_error',0
.rodata:08000304                                         ; DATA XREF: reach_error+11↑o
.rodata:08000304 _rodata         ends
.rodata:08000304
.text.__x86.get_pc_thunk.ax:08000310 ; ===========================================================================
.text.__x86.get_pc_thunk.ax:08000310
.text.__x86.get_pc_thunk.ax:08000310 ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:08000310 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:08000310 _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:08000310                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000310                 ;org 8000310h
.text.__x86.get_pc_thunk.ax:08000310                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:08000310
.text.__x86.get_pc_thunk.ax:08000310 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:08000310
.text.__x86.get_pc_thunk.ax:08000310
.text.__x86.get_pc_thunk.ax:08000310                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:08000310 __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text.__x86.get_pc_thunk.ax:08000310                                         ; pop+3↑p
.text.__x86.get_pc_thunk.ax:08000310                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.ax:08000310 ; __unwind {
.text.__x86.get_pc_thunk.ax:08000310                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:08000313                 retn
.text.__x86.get_pc_thunk.ax:08000313 ; } // starts at 8000310
.text.__x86.get_pc_thunk.ax:08000313 __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:08000313
.text.__x86.get_pc_thunk.ax:08000313 _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:08000313
.text.__x86.get_pc_thunk.bx:08000314 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:08000314
.text.__x86.get_pc_thunk.bx:08000314 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:08000314 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:08000314 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:08000314                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000314                 ;org 8000314h
.text.__x86.get_pc_thunk.bx:08000314                 assume es:nothing, ss:nothing, ds:_data, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:08000314
.text.__x86.get_pc_thunk.bx:08000314 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:08000314
.text.__x86.get_pc_thunk.bx:08000314
.text.__x86.get_pc_thunk.bx:08000314                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:08000314 __x86_get_pc_thunk_bx proc near         ; CODE XREF: push+7↑p
.text.__x86.get_pc_thunk.bx:08000314                                         ; main+12↑p
.text.__x86.get_pc_thunk.bx:08000314                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.bx:08000314 ; __unwind {
.text.__x86.get_pc_thunk.bx:08000314                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:08000317                 retn
.text.__x86.get_pc_thunk.bx:08000317 ; } // starts at 8000314
.text.__x86.get_pc_thunk.bx:08000317 __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:08000317
.text.__x86.get_pc_thunk.bx:08000317 _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:08000317
.eh_frame:08000318 ; ===========================================================================
.eh_frame:08000318
.eh_frame:08000318 ; Segment type: Pure data
.eh_frame:08000318 ; Segment permissions: Read
.eh_frame:08000318 _eh_frame       segment dword public 'CONST' use32
.eh_frame:08000318                 assume cs:_eh_frame
.eh_frame:08000318                 ;org 8000318h
.eh_frame:08000318                 db  14h
.eh_frame:08000319                 db    0
.eh_frame:0800031A                 db    0
.eh_frame:0800031B                 db    0
.eh_frame:0800031C                 db    0
.eh_frame:0800031D                 db    0
.eh_frame:0800031E                 db    0
.eh_frame:0800031F                 db    0
.eh_frame:08000320                 db    1
.eh_frame:08000321                 db  7Ah ; z
.eh_frame:08000322                 db  52h ; R
.eh_frame:08000323                 db    0
.eh_frame:08000324                 db    1
.eh_frame:08000325                 db  7Ch ; |
.eh_frame:08000326                 db    8
.eh_frame:08000327                 db    1
.eh_frame:08000328                 db  1Bh
.eh_frame:08000329                 db  0Ch
.eh_frame:0800032A                 db    4
.eh_frame:0800032B                 db    4
.eh_frame:0800032C                 db  88h
.eh_frame:0800032D                 db    1
.eh_frame:0800032E                 db    0
.eh_frame:0800032F                 db    0
.eh_frame:08000330                 db  18h
.eh_frame:08000331                 db    0
.eh_frame:08000332                 db    0
.eh_frame:08000333                 db    0
.eh_frame:08000334                 db  1Ch
.eh_frame:08000335                 db    0
.eh_frame:08000336                 db    0
.eh_frame:08000337                 db    0
.eh_frame:08000338                 dd offset reach_error - $
.eh_frame:0800033C                 db  2Fh ; /
.eh_frame:0800033D                 db    0
.eh_frame:0800033E                 db    0
.eh_frame:0800033F                 db    0
.eh_frame:08000340                 db    0
.eh_frame:08000341                 db  41h ; A
.eh_frame:08000342                 db  0Eh
.eh_frame:08000343                 db    8
.eh_frame:08000344                 db  85h
.eh_frame:08000345                 db    2
.eh_frame:08000346                 db  42h ; B
.eh_frame:08000347                 db  0Dh
.eh_frame:08000348                 db    5
.eh_frame:08000349                 db  44h ; D
.eh_frame:0800034A                 db  83h
.eh_frame:0800034B                 db    3
.eh_frame:0800034C                 db  20h
.eh_frame:0800034D                 db    0
.eh_frame:0800034E                 db    0
.eh_frame:0800034F                 db    0
.eh_frame:08000350                 db  38h ; 8
.eh_frame:08000351                 db    0
.eh_frame:08000352                 db    0
.eh_frame:08000353                 db    0
.eh_frame:08000354                 dd offset push - $
.eh_frame:08000358                 db 0CDh
.eh_frame:08000359                 db    0
.eh_frame:0800035A                 db    0
.eh_frame:0800035B                 db    0
.eh_frame:0800035C                 db    0
.eh_frame:0800035D                 db  41h ; A
.eh_frame:0800035E                 db  0Eh
.eh_frame:0800035F                 db    8
.eh_frame:08000360                 db  85h
.eh_frame:08000361                 db    2
.eh_frame:08000362                 db  42h ; B
.eh_frame:08000363                 db  0Dh
.eh_frame:08000364                 db    5
.eh_frame:08000365                 db  44h ; D
.eh_frame:08000366                 db  83h
.eh_frame:08000367                 db    3
.eh_frame:08000368                 db    2
.eh_frame:08000369                 db 0C5h
.eh_frame:0800036A                 db 0C5h
.eh_frame:0800036B                 db 0C3h
.eh_frame:0800036C                 db  0Ch
.eh_frame:0800036D                 db    4
.eh_frame:0800036E                 db    4
.eh_frame:0800036F                 db    0
.eh_frame:08000370                 db  1Ch
.eh_frame:08000371                 db    0
.eh_frame:08000372                 db    0
.eh_frame:08000373                 db    0
.eh_frame:08000374                 db  5Ch ; \
.eh_frame:08000375                 db    0
.eh_frame:08000376                 db    0
.eh_frame:08000377                 db    0
.eh_frame:08000378                 dd offset pop - $
.eh_frame:0800037C                 db 0CDh
.eh_frame:0800037D                 db    0
.eh_frame:0800037E                 db    0
.eh_frame:0800037F                 db    0
.eh_frame:08000380                 db    0
.eh_frame:08000381                 db  41h ; A
.eh_frame:08000382                 db  0Eh
.eh_frame:08000383                 db    8
.eh_frame:08000384                 db  85h
.eh_frame:08000385                 db    2
.eh_frame:08000386                 db  42h ; B
.eh_frame:08000387                 db  0Dh
.eh_frame:08000388                 db    5
.eh_frame:08000389                 db    2
.eh_frame:0800038A                 db 0C9h
.eh_frame:0800038B                 db 0C5h
.eh_frame:0800038C                 db  0Ch
.eh_frame:0800038D                 db    4
.eh_frame:0800038E                 db    4
.eh_frame:0800038F                 db    0
.eh_frame:08000390                 db  30h ; 0
.eh_frame:08000391                 db    0
.eh_frame:08000392                 db    0
.eh_frame:08000393                 db    0
.eh_frame:08000394                 db  7Ch ; |
.eh_frame:08000395                 db    0
.eh_frame:08000396                 db    0
.eh_frame:08000397                 db    0
.eh_frame:08000398                 dd offset main - $
.eh_frame:0800039C                 db 0CFh
.eh_frame:0800039D                 db    0
.eh_frame:0800039E                 db    0
.eh_frame:0800039F                 db    0
.eh_frame:080003A0                 db    0
.eh_frame:080003A1                 db  44h ; D
.eh_frame:080003A2                 db  0Ch
.eh_frame:080003A3                 db    1
.eh_frame:080003A4                 db    0
.eh_frame:080003A5                 db  49h ; I
.eh_frame:080003A6                 db  10h
.eh_frame:080003A7                 db    5
.eh_frame:080003A8                 db    2
.eh_frame:080003A9                 db  75h ; u
.eh_frame:080003AA                 db    0
.eh_frame:080003AB                 db  42h ; B
.eh_frame:080003AC                 db  0Fh
.eh_frame:080003AD                 db    3
.eh_frame:080003AE                 db  75h ; u
.eh_frame:080003AF                 db  78h ; x
.eh_frame:080003B0                 db    6
.eh_frame:080003B1                 db  10h
.eh_frame:080003B2                 db    3
.eh_frame:080003B3                 db    2
.eh_frame:080003B4                 db  75h ; u
.eh_frame:080003B5                 db  7Ch ; |
.eh_frame:080003B6                 db    2
.eh_frame:080003B7                 db 0BAh
.eh_frame:080003B8                 db 0C1h
.eh_frame:080003B9                 db  0Ch
.eh_frame:080003BA                 db    1
.eh_frame:080003BB                 db    0
.eh_frame:080003BC                 db  41h ; A
.eh_frame:080003BD                 db 0C3h
.eh_frame:080003BE                 db  41h ; A
.eh_frame:080003BF                 db 0C5h
.eh_frame:080003C0                 db  43h ; C
.eh_frame:080003C1                 db  0Ch
.eh_frame:080003C2                 db    4
.eh_frame:080003C3                 db    4
.eh_frame:080003C4                 db  10h
.eh_frame:080003C5                 db    0
.eh_frame:080003C6                 db    0
.eh_frame:080003C7                 db    0
.eh_frame:080003C8                 db 0B0h
.eh_frame:080003C9                 db    0
.eh_frame:080003CA                 db    0
.eh_frame:080003CB                 db    0
.eh_frame:080003CC                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:080003D0                 db    4
.eh_frame:080003D1                 db    0
.eh_frame:080003D2                 db    0
.eh_frame:080003D3                 db    0
.eh_frame:080003D4                 db    0
.eh_frame:080003D5                 db    0
.eh_frame:080003D6                 db    0
.eh_frame:080003D7                 db    0
.eh_frame:080003D8                 db  10h
.eh_frame:080003D9                 db    0
.eh_frame:080003DA                 db    0
.eh_frame:080003DB                 db    0
.eh_frame:080003DC                 db 0C4h
.eh_frame:080003DD                 db    0
.eh_frame:080003DE                 db    0
.eh_frame:080003DF                 db    0
.eh_frame:080003E0                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:080003E4                 db    4
.eh_frame:080003E5                 db    0
.eh_frame:080003E6                 db    0
.eh_frame:080003E7                 db    0
.eh_frame:080003E8                 db    0
.eh_frame:080003E9                 db    0
.eh_frame:080003EA                 db    0
.eh_frame:080003EB                 db    0
.eh_frame:080003EB _eh_frame       ends
.eh_frame:080003EB
extern:080003EC ; ===========================================================================
extern:080003EC
extern:080003EC ; Segment type: Externs
extern:080003EC ; extern
extern:080003EC ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:080003EC                 extrn __assert_fail:near
extern:080003EC                                         ; CODE XREF: reach_error+2A↑p
extern:080003F0 ; void *malloc(size_t size)
extern:080003F0                 extrn malloc:near       ; CODE XREF: push+3D↑p
extern:080003F4                 extrn __VERIFIER_nondet_int:near
extern:080003F4                                         ; CODE XREF: main:loc_80001E8↑p
extern:080003F4                                         ; main+49↑p
extern:080003F8 ; void free(void *ptr)
extern:080003F8                 extrn free:near         ; CODE XREF: main+6A↑p
extern:080003F8
.got:080003FC ; ===========================================================================
.got:080003FC
.got:080003FC ; Segment type: Pure data
.got:080003FC ; Segment permissions: Read
.got:080003FC _got            segment dword public 'CONST' use32
.got:080003FC                 assume cs:_got
.got:080003FC                 ;org 80003FCh
.got:080003FC _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: reach_error+C↑o
.got:080003FC                                         ; reach_error+11↑o ...
.got:080003FC _got            ends
.got:080003FC
.got:080003FC
.got:080003FC                 end
