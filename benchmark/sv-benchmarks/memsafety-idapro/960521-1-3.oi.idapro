.text:08000000 ;
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ; |      This file was generated by The Interactive Disassembler (IDA)      |
.text:08000000 ; |           Copyright (c) 2021 Hex-Rays, <support@hex-rays.com>           |
.text:08000000 ; |                      License info: 48-357D-7BC4-C6                      |
.text:08000000 ; |                              Virginia Tech                              |
.text:08000000 ; +-------------------------------------------------------------------------+
.text:08000000 ;
.text:08000000 ; Input SHA256 : E8BB15BBA244F09E271C39E5B69362C98D8A42474B41F75382726DFBEAF08AD6
.text:08000000 ; Input MD5    : 46F2B5F528D48F8E7A8E12E9610CA53C
.text:08000000 ; Input CRC32  : 1333B966
.text:08000000
.text:08000000 ; File Name   : /home/cindy/Documents/Projects/sv-benchmarks/c/bin/memsafety/960521-1-3.oi
.text:08000000 ; Format      : ELF for Intel 386 (Relocatable)
.text:08000000 ;
.text:08000000 ; Source File : '960521-1-3.i'
.text:08000000
.text:08000000                 .686p
.text:08000000                 .mmx
.text:08000000                 .model flat
.text:08000000 .intel_syntax noprefix
.text:08000000
.text:08000000 ; ===========================================================================
.text:08000000
.text:08000000 ; Segment type: Pure code
.text:08000000 ; Segment permissions: Read/Execute
.text:08000000 _text           segment byte public 'CODE' use32
.text:08000000                 assume cs:_text
.text:08000000                 ;org 8000000h
.text:08000000                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text:08000000
.text:08000000 ; =============== S U B R O U T I N E =======================================
.text:08000000
.text:08000000 ; Attributes: noreturn bp-based frame
.text:08000000
.text:08000000                 public reach_error
.text:08000000 reach_error     proc near               ; DATA XREF: .eh_frame:080001CC↓o
.text:08000000 ; __unwind {
.text:08000000                 push    ebp
.text:08000001                 mov     ebp, esp
.text:08000003                 push    ebx
.text:08000004                 sub     esp, 4
.text:08000007                 call    __x86_get_pc_thunk_ax
.text:0800000C                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:08000011                 lea     edx, (__PRETTY_FUNCTION___0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "reach_error"
.text:08000017                 push    edx             ; function
.text:08000018                 push    3               ; line
.text:0800001A                 lea     edx, (a96052113C - _GLOBAL_OFFSET_TABLE_)[eax] ; "960521-1-3.c"
.text:08000020                 push    edx             ; file
.text:08000021                 lea     edx, (a0 - _GLOBAL_OFFSET_TABLE_)[eax] ; "0"
.text:08000027                 push    edx             ; assertion
.text:08000028                 mov     ebx, eax
.text:0800002A                 call    __assert_fail   ; PIC mode
.text:0800002A ; } // starts at 8000000
.text:0800002A reach_error     endp
.text:0800002A
.text:0800002F
.text:0800002F ; =============== S U B R O U T I N E =======================================
.text:0800002F
.text:0800002F ; Attributes: bp-based frame
.text:0800002F
.text:0800002F                 public foo
.text:0800002F foo             proc near               ; CODE XREF: main+6F↓p
.text:0800002F                                         ; DATA XREF: .eh_frame:080001E8↓o
.text:0800002F
.text:0800002F var_4           = dword ptr -4
.text:0800002F
.text:0800002F ; __unwind {
.text:0800002F                 push    ebp
.text:08000030                 mov     ebp, esp
.text:08000032                 sub     esp, 10h
.text:08000035                 call    __x86_get_pc_thunk_ax
.text:0800003A                 add     eax, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:0800003F                 mov     [ebp+var_4], 0
.text:08000046                 jmp     short loc_8000060
.text:08000048 ; ---------------------------------------------------------------------------
.text:08000048
.text:08000048 loc_8000048:                            ; CODE XREF: foo+3A↓j
.text:08000048                 mov     ecx, ds:(a - _GLOBAL_OFFSET_TABLE_)[eax]
.text:0800004E                 mov     edx, [ebp+var_4]
.text:08000051                 shl     edx, 2
.text:08000054                 add     edx, ecx
.text:08000056                 mov     dword ptr [edx], 0FFFFFFFFh
.text:0800005C                 add     [ebp+var_4], 1
.text:08000060
.text:08000060 loc_8000060:                            ; CODE XREF: foo+17↑j
.text:08000060                 mov     edx, ds:(n - _GLOBAL_OFFSET_TABLE_)[eax]
.text:08000066                 cmp     [ebp+var_4], edx
.text:08000069                 jl      short loc_8000048
.text:0800006B                 mov     [ebp+var_4], 0
.text:08000072                 jmp     short loc_800008C
.text:08000074 ; ---------------------------------------------------------------------------
.text:08000074
.text:08000074 loc_8000074:                            ; CODE XREF: foo+61↓j
.text:08000074                 mov     ecx, ds:(b - _GLOBAL_OFFSET_TABLE_)[eax]
.text:0800007A                 mov     edx, [ebp+var_4]
.text:0800007D                 shl     edx, 2
.text:08000080                 add     edx, ecx
.text:08000082                 mov     dword ptr [edx], 0FFFFFFFFh
.text:08000088                 add     [ebp+var_4], 1
.text:0800008C
.text:0800008C loc_800008C:                            ; CODE XREF: foo+43↑j
.text:0800008C                 cmp     [ebp+var_4], 7Eh ; '~'
.text:08000090                 jle     short loc_8000074
.text:08000092                 nop
.text:08000093                 nop
.text:08000094                 leave
.text:08000095                 retn
.text:08000095 ; } // starts at 800002F
.text:08000095 foo             endp
.text:08000095
.text:08000096
.text:08000096 ; =============== S U B R O U T I N E =======================================
.text:08000096
.text:08000096 ; Attributes: bp-based frame fuzzy-sp
.text:08000096
.text:08000096 ; int __cdecl main(int argc, const char **argv, const char **envp)
.text:08000096                 public main
.text:08000096 main            proc near               ; DATA XREF: .eh_frame:08000208↓o
.text:08000096
.text:08000096 argc            = dword ptr  8
.text:08000096 argv            = dword ptr  0Ch
.text:08000096 envp            = dword ptr  10h
.text:08000096
.text:08000096 ; __unwind {
.text:08000096                 lea     ecx, [esp+4]
.text:0800009A                 and     esp, 0FFFFFFF0h
.text:0800009D                 push    dword ptr [ecx-4]
.text:080000A0                 push    ebp
.text:080000A1                 mov     ebp, esp
.text:080000A3                 push    ebx
.text:080000A4                 push    ecx
.text:080000A5                 call    __x86_get_pc_thunk_bx
.text:080000AA                 add     ebx, (offset _GLOBAL_OFFSET_TABLE_ - $)
.text:080000B0                 mov     ds:(n - _GLOBAL_OFFSET_TABLE_)[ebx], 80h
.text:080000BA                 mov     eax, ds:(n - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000C0                 shl     eax, 2
.text:080000C3                 sub     esp, 0Ch
.text:080000C6                 push    eax             ; size
.text:080000C7                 call    malloc          ; PIC mode
.text:080000CC                 add     esp, 10h
.text:080000CF                 mov     ds:(a - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:080000D5                 mov     eax, ds:(n - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000DB                 shl     eax, 2
.text:080000DE                 sub     esp, 0Ch
.text:080000E1                 push    eax             ; size
.text:080000E2                 call    malloc          ; PIC mode
.text:080000E7                 add     esp, 10h
.text:080000EA                 mov     ds:(b - _GLOBAL_OFFSET_TABLE_)[ebx], eax
.text:080000F0                 mov     eax, ds:(b - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:080000F6                 lea     edx, [eax+4]
.text:080000F9                 mov     ds:(b - _GLOBAL_OFFSET_TABLE_)[ebx], edx
.text:080000FF                 mov     dword ptr [eax], 0
.text:08000105                 call    foo
.text:0800010A                 mov     eax, ds:(b - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000110                 sub     eax, 8
.text:08000113                 mov     eax, [eax]
.text:08000115                 test    eax, eax
.text:08000117                 jz      short loc_8000142
.text:08000119                 mov     eax, ds:(a - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800011F                 sub     esp, 0Ch
.text:08000122                 push    eax             ; ptr
.text:08000123                 call    free            ; PIC mode
.text:08000128                 add     esp, 10h
.text:0800012B                 mov     eax, ds:(b - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000131                 sub     eax, 4
.text:08000134                 sub     esp, 0Ch
.text:08000137                 push    eax             ; ptr
.text:08000138                 call    free            ; PIC mode
.text:0800013D                 add     esp, 10h
.text:08000140                 jmp     short loc_8000169
.text:08000142 ; ---------------------------------------------------------------------------
.text:08000142
.text:08000142 loc_8000142:                            ; CODE XREF: main+81↑j
.text:08000142                 mov     eax, ds:(a - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:08000148                 sub     esp, 0Ch
.text:0800014B                 push    eax             ; ptr
.text:0800014C                 call    free            ; PIC mode
.text:08000151                 add     esp, 10h
.text:08000154                 mov     eax, ds:(b - _GLOBAL_OFFSET_TABLE_)[ebx]
.text:0800015A                 sub     eax, 4
.text:0800015D                 sub     esp, 0Ch
.text:08000160                 push    eax             ; ptr
.text:08000161                 call    free            ; PIC mode
.text:08000166                 add     esp, 10h
.text:08000169
.text:08000169 loc_8000169:                            ; CODE XREF: main+AA↑j
.text:08000169                 mov     eax, 0
.text:0800016E                 lea     esp, [ebp-8]
.text:08000171                 pop     ecx
.text:08000172                 pop     ebx
.text:08000173                 pop     ebp
.text:08000174                 lea     esp, [ecx-4]
.text:08000177                 retn
.text:08000177 ; } // starts at 8000096
.text:08000177 main            endp
.text:08000177
.text:08000177 _text           ends
.text:08000177
.data:08000178 ; ===========================================================================
.data:08000178
.data:08000178 ; Segment type: Zero-length
.data:08000178 ; Segment permissions: Read/Write
.data:08000178 _data           segment byte public 'DATA' use32
.data:08000178 _data           ends
.data:08000178
.bss:0800017C ; ===========================================================================
.bss:0800017C
.bss:0800017C ; Segment type: Uninitialized
.bss:0800017C ; Segment permissions: Read/Write
.bss:0800017C _bss            segment dword public 'BSS' use32
.bss:0800017C                 assume cs:_bss
.bss:0800017C                 ;org 800017Ch
.bss:0800017C                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.bss:0800017C                 public a
.bss:0800017C a               dd ?                    ; DATA XREF: foo:loc_8000048↑r
.bss:0800017C                                         ; main+39↑w ...
.bss:08000180                 public b
.bss:08000180 b               dd ?                    ; DATA XREF: foo:loc_8000074↑r
.bss:08000180                                         ; main+54↑w ...
.bss:08000184                 public n
.bss:08000184 n               dd ?                    ; DATA XREF: foo:loc_8000060↑r
.bss:08000184                                         ; main+1A↑w ...
.bss:08000184 _bss            ends
.bss:08000184
.rodata:08000188 ; ===========================================================================
.rodata:08000188
.rodata:08000188 ; Segment type: Pure data
.rodata:08000188 ; Segment permissions: Read
.rodata:08000188 _rodata         segment dword public 'CONST' use32
.rodata:08000188                 assume cs:_rodata
.rodata:08000188                 ;org 8000188h
.rodata:08000188 a96052113C      db '960521-1-3.c',0     ; DATA XREF: reach_error+1A↑o
.rodata:08000195 a0              db '0',0                ; DATA XREF: reach_error+21↑o
.rodata:08000197                 align 4
.rodata:08000198 __PRETTY_FUNCTION___0 db 'reach_error',0
.rodata:08000198                                         ; DATA XREF: reach_error+11↑o
.rodata:08000198 _rodata         ends
.rodata:08000198
.text.__x86.get_pc_thunk.ax:080001A4 ; ===========================================================================
.text.__x86.get_pc_thunk.ax:080001A4
.text.__x86.get_pc_thunk.ax:080001A4 ; Segment type: Pure code
.text.__x86.get_pc_thunk.ax:080001A4 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.ax:080001A4 _text___x86_get_pc_thunk_ax segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.ax:080001A4                 assume cs:_text___x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:080001A4                 ;org 80001A4h
.text.__x86.get_pc_thunk.ax:080001A4                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.ax:080001A4
.text.__x86.get_pc_thunk.ax:080001A4 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.ax:080001A4
.text.__x86.get_pc_thunk.ax:080001A4
.text.__x86.get_pc_thunk.ax:080001A4                 public __x86_get_pc_thunk_ax
.text.__x86.get_pc_thunk.ax:080001A4 __x86_get_pc_thunk_ax proc near         ; CODE XREF: reach_error+7↑p
.text.__x86.get_pc_thunk.ax:080001A4                                         ; foo+6↑p
.text.__x86.get_pc_thunk.ax:080001A4                                         ; DATA XREF: ...
.text.__x86.get_pc_thunk.ax:080001A4 ; __unwind {
.text.__x86.get_pc_thunk.ax:080001A4                 mov     eax, [esp+0]
.text.__x86.get_pc_thunk.ax:080001A7                 retn
.text.__x86.get_pc_thunk.ax:080001A7 ; } // starts at 80001A4
.text.__x86.get_pc_thunk.ax:080001A7 __x86_get_pc_thunk_ax endp
.text.__x86.get_pc_thunk.ax:080001A7
.text.__x86.get_pc_thunk.ax:080001A7 _text___x86_get_pc_thunk_ax ends
.text.__x86.get_pc_thunk.ax:080001A7
.text.__x86.get_pc_thunk.bx:080001A8 ; ===========================================================================
.text.__x86.get_pc_thunk.bx:080001A8
.text.__x86.get_pc_thunk.bx:080001A8 ; Segment type: Pure code
.text.__x86.get_pc_thunk.bx:080001A8 ; Segment permissions: Read/Execute
.text.__x86.get_pc_thunk.bx:080001A8 _text___x86_get_pc_thunk_bx segment byte public 'CODE' use32
.text.__x86.get_pc_thunk.bx:080001A8                 assume cs:_text___x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:080001A8                 ;org 80001A8h
.text.__x86.get_pc_thunk.bx:080001A8                 assume es:nothing, ss:nothing, ds:_text, fs:nothing, gs:nothing
.text.__x86.get_pc_thunk.bx:080001A8
.text.__x86.get_pc_thunk.bx:080001A8 ; =============== S U B R O U T I N E =======================================
.text.__x86.get_pc_thunk.bx:080001A8
.text.__x86.get_pc_thunk.bx:080001A8
.text.__x86.get_pc_thunk.bx:080001A8                 public __x86_get_pc_thunk_bx
.text.__x86.get_pc_thunk.bx:080001A8 __x86_get_pc_thunk_bx proc near         ; CODE XREF: main+F↑p
.text.__x86.get_pc_thunk.bx:080001A8                                         ; DATA XREF: .eh_frame:08000250↓o
.text.__x86.get_pc_thunk.bx:080001A8 ; __unwind {
.text.__x86.get_pc_thunk.bx:080001A8                 mov     ebx, [esp+0]
.text.__x86.get_pc_thunk.bx:080001AB                 retn
.text.__x86.get_pc_thunk.bx:080001AB ; } // starts at 80001A8
.text.__x86.get_pc_thunk.bx:080001AB __x86_get_pc_thunk_bx endp
.text.__x86.get_pc_thunk.bx:080001AB
.text.__x86.get_pc_thunk.bx:080001AB _text___x86_get_pc_thunk_bx ends
.text.__x86.get_pc_thunk.bx:080001AB
.eh_frame:080001AC ; ===========================================================================
.eh_frame:080001AC
.eh_frame:080001AC ; Segment type: Pure data
.eh_frame:080001AC ; Segment permissions: Read
.eh_frame:080001AC _eh_frame       segment dword public 'CONST' use32
.eh_frame:080001AC                 assume cs:_eh_frame
.eh_frame:080001AC                 ;org 80001ACh
.eh_frame:080001AC                 db  14h
.eh_frame:080001AD                 db    0
.eh_frame:080001AE                 db    0
.eh_frame:080001AF                 db    0
.eh_frame:080001B0                 db    0
.eh_frame:080001B1                 db    0
.eh_frame:080001B2                 db    0
.eh_frame:080001B3                 db    0
.eh_frame:080001B4                 db    1
.eh_frame:080001B5                 db  7Ah ; z
.eh_frame:080001B6                 db  52h ; R
.eh_frame:080001B7                 db    0
.eh_frame:080001B8                 db    1
.eh_frame:080001B9                 db  7Ch ; |
.eh_frame:080001BA                 db    8
.eh_frame:080001BB                 db    1
.eh_frame:080001BC                 db  1Bh
.eh_frame:080001BD                 db  0Ch
.eh_frame:080001BE                 db    4
.eh_frame:080001BF                 db    4
.eh_frame:080001C0                 db  88h
.eh_frame:080001C1                 db    1
.eh_frame:080001C2                 db    0
.eh_frame:080001C3                 db    0
.eh_frame:080001C4                 db  18h
.eh_frame:080001C5                 db    0
.eh_frame:080001C6                 db    0
.eh_frame:080001C7                 db    0
.eh_frame:080001C8                 db  1Ch
.eh_frame:080001C9                 db    0
.eh_frame:080001CA                 db    0
.eh_frame:080001CB                 db    0
.eh_frame:080001CC                 dd offset reach_error - $
.eh_frame:080001D0                 db  2Fh ; /
.eh_frame:080001D1                 db    0
.eh_frame:080001D2                 db    0
.eh_frame:080001D3                 db    0
.eh_frame:080001D4                 db    0
.eh_frame:080001D5                 db  41h ; A
.eh_frame:080001D6                 db  0Eh
.eh_frame:080001D7                 db    8
.eh_frame:080001D8                 db  85h
.eh_frame:080001D9                 db    2
.eh_frame:080001DA                 db  42h ; B
.eh_frame:080001DB                 db  0Dh
.eh_frame:080001DC                 db    5
.eh_frame:080001DD                 db  44h ; D
.eh_frame:080001DE                 db  83h
.eh_frame:080001DF                 db    3
.eh_frame:080001E0                 db  1Ch
.eh_frame:080001E1                 db    0
.eh_frame:080001E2                 db    0
.eh_frame:080001E3                 db    0
.eh_frame:080001E4                 db  38h ; 8
.eh_frame:080001E5                 db    0
.eh_frame:080001E6                 db    0
.eh_frame:080001E7                 db    0
.eh_frame:080001E8                 dd offset foo - $
.eh_frame:080001EC                 db  67h ; g
.eh_frame:080001ED                 db    0
.eh_frame:080001EE                 db    0
.eh_frame:080001EF                 db    0
.eh_frame:080001F0                 db    0
.eh_frame:080001F1                 db  41h ; A
.eh_frame:080001F2                 db  0Eh
.eh_frame:080001F3                 db    8
.eh_frame:080001F4                 db  85h
.eh_frame:080001F5                 db    2
.eh_frame:080001F6                 db  42h ; B
.eh_frame:080001F7                 db  0Dh
.eh_frame:080001F8                 db    5
.eh_frame:080001F9                 db    2
.eh_frame:080001FA                 db  63h ; c
.eh_frame:080001FB                 db 0C5h
.eh_frame:080001FC                 db  0Ch
.eh_frame:080001FD                 db    4
.eh_frame:080001FE                 db    4
.eh_frame:080001FF                 db    0
.eh_frame:08000200                 db  30h ; 0
.eh_frame:08000201                 db    0
.eh_frame:08000202                 db    0
.eh_frame:08000203                 db    0
.eh_frame:08000204                 db  58h ; X
.eh_frame:08000205                 db    0
.eh_frame:08000206                 db    0
.eh_frame:08000207                 db    0
.eh_frame:08000208                 dd offset main - $
.eh_frame:0800020C                 db 0E2h
.eh_frame:0800020D                 db    0
.eh_frame:0800020E                 db    0
.eh_frame:0800020F                 db    0
.eh_frame:08000210                 db    0
.eh_frame:08000211                 db  44h ; D
.eh_frame:08000212                 db  0Ch
.eh_frame:08000213                 db    1
.eh_frame:08000214                 db    0
.eh_frame:08000215                 db  49h ; I
.eh_frame:08000216                 db  10h
.eh_frame:08000217                 db    5
.eh_frame:08000218                 db    2
.eh_frame:08000219                 db  75h ; u
.eh_frame:0800021A                 db    0
.eh_frame:0800021B                 db  42h ; B
.eh_frame:0800021C                 db  0Fh
.eh_frame:0800021D                 db    3
.eh_frame:0800021E                 db  75h ; u
.eh_frame:0800021F                 db  78h ; x
.eh_frame:08000220                 db    6
.eh_frame:08000221                 db  10h
.eh_frame:08000222                 db    3
.eh_frame:08000223                 db    2
.eh_frame:08000224                 db  75h ; u
.eh_frame:08000225                 db  7Ch ; |
.eh_frame:08000226                 db    2
.eh_frame:08000227                 db 0CDh
.eh_frame:08000228                 db 0C1h
.eh_frame:08000229                 db  0Ch
.eh_frame:0800022A                 db    1
.eh_frame:0800022B                 db    0
.eh_frame:0800022C                 db  41h ; A
.eh_frame:0800022D                 db 0C3h
.eh_frame:0800022E                 db  41h ; A
.eh_frame:0800022F                 db 0C5h
.eh_frame:08000230                 db  43h ; C
.eh_frame:08000231                 db  0Ch
.eh_frame:08000232                 db    4
.eh_frame:08000233                 db    4
.eh_frame:08000234                 db  10h
.eh_frame:08000235                 db    0
.eh_frame:08000236                 db    0
.eh_frame:08000237                 db    0
.eh_frame:08000238                 db  8Ch
.eh_frame:08000239                 db    0
.eh_frame:0800023A                 db    0
.eh_frame:0800023B                 db    0
.eh_frame:0800023C                 dd offset __x86_get_pc_thunk_ax - $
.eh_frame:08000240                 db    4
.eh_frame:08000241                 db    0
.eh_frame:08000242                 db    0
.eh_frame:08000243                 db    0
.eh_frame:08000244                 db    0
.eh_frame:08000245                 db    0
.eh_frame:08000246                 db    0
.eh_frame:08000247                 db    0
.eh_frame:08000248                 db  10h
.eh_frame:08000249                 db    0
.eh_frame:0800024A                 db    0
.eh_frame:0800024B                 db    0
.eh_frame:0800024C                 db 0A0h
.eh_frame:0800024D                 db    0
.eh_frame:0800024E                 db    0
.eh_frame:0800024F                 db    0
.eh_frame:08000250                 dd offset __x86_get_pc_thunk_bx - $
.eh_frame:08000254                 db    4
.eh_frame:08000255                 db    0
.eh_frame:08000256                 db    0
.eh_frame:08000257                 db    0
.eh_frame:08000258                 db    0
.eh_frame:08000259                 db    0
.eh_frame:0800025A                 db    0
.eh_frame:0800025B                 db    0
.eh_frame:0800025B _eh_frame       ends
.eh_frame:0800025B
extern:0800025C ; ===========================================================================
extern:0800025C
extern:0800025C ; Segment type: Externs
extern:0800025C ; extern
extern:0800025C ; void _assert_fail(const char *assertion, const char *file, unsigned int line, const char *function)
extern:0800025C                 extrn __assert_fail:near
extern:0800025C                                         ; CODE XREF: reach_error+2A↑p
extern:08000260 ; void *malloc(size_t size)
extern:08000260                 extrn malloc:near       ; CODE XREF: main+31↑p
extern:08000260                                         ; main+4C↑p
extern:08000264 ; void free(void *ptr)
extern:08000264                 extrn free:near         ; CODE XREF: main+8D↑p
extern:08000264                                         ; main+A2↑p ...
extern:08000264
.got:08000268 ; ===========================================================================
.got:08000268
.got:08000268 ; Segment type: Pure data
.got:08000268 ; Segment permissions: Read
.got:08000268 _got            segment dword public 'CONST' use32
.got:08000268                 assume cs:_got
.got:08000268                 ;org 8000268h
.got:08000268 _GLOBAL_OFFSET_TABLE_ dd 0              ; DATA XREF: reach_error+C↑o
.got:08000268                                         ; reach_error+11↑o ...
.got:08000268 _got            ends
.got:08000268
.got:08000268
.got:08000268                 end
